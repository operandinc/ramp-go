// Package ramp provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package ramp

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
)

const (
	Oauth2Scopes = "oauth2.Scopes"
)

// Defines values for ApiAccountingCustomFieldCreateRequestBodyInputType.
const (
	ApiAccountingCustomFieldCreateRequestBodyInputTypeBOOLEAN      ApiAccountingCustomFieldCreateRequestBodyInputType = "BOOLEAN"
	ApiAccountingCustomFieldCreateRequestBodyInputTypeFREEFORMTEXT ApiAccountingCustomFieldCreateRequestBodyInputType = "FREE_FORM_TEXT"
	ApiAccountingCustomFieldCreateRequestBodyInputTypeSINGLECHOICE ApiAccountingCustomFieldCreateRequestBodyInputType = "SINGLE_CHOICE"
)

// Defines values for ApiAccountingCustomFieldResourceInputType.
const (
	ApiAccountingCustomFieldResourceInputTypeBOOLEAN      ApiAccountingCustomFieldResourceInputType = "BOOLEAN"
	ApiAccountingCustomFieldResourceInputTypeFREEFORMTEXT ApiAccountingCustomFieldResourceInputType = "FREE_FORM_TEXT"
	ApiAccountingCustomFieldResourceInputTypeSINGLECHOICE ApiAccountingCustomFieldResourceInputType = "SINGLE_CHOICE"
)

// Defines values for ApiAccountingProviderAccessCreateRequestBodyRemoteProviderName.
const (
	ACCOUNTINGSEED         ApiAccountingProviderAccessCreateRequestBodyRemoteProviderName = "ACCOUNTING_SEED"
	ACS                    ApiAccountingProviderAccessCreateRequestBodyRemoteProviderName = "ACS"
	ACUMATICA              ApiAccountingProviderAccessCreateRequestBodyRemoteProviderName = "ACUMATICA"
	BENCH                  ApiAccountingProviderAccessCreateRequestBodyRemoteProviderName = "BENCH"
	BLACKBAUDFINANCIALEDGE ApiAccountingProviderAccessCreateRequestBodyRemoteProviderName = "BLACKBAUD_FINANCIAL_EDGE"
	BLACKLINE              ApiAccountingProviderAccessCreateRequestBodyRemoteProviderName = "BLACKLINE"
	BQE                    ApiAccountingProviderAccessCreateRequestBodyRemoteProviderName = "BQE"
	CMIC                   ApiAccountingProviderAccessCreateRequestBodyRemoteProviderName = "CMIC"
	COMPUTEREASE           ApiAccountingProviderAccessCreateRequestBodyRemoteProviderName = "COMPUTEREASE"
	DEALERTRACK            ApiAccountingProviderAccessCreateRequestBodyRemoteProviderName = "DEALERTRACK"
	DELTEK                 ApiAccountingProviderAccessCreateRequestBodyRemoteProviderName = "DELTEK"
	EPICOR                 ApiAccountingProviderAccessCreateRequestBodyRemoteProviderName = "EPICOR"
	FINANCIALFORCE         ApiAccountingProviderAccessCreateRequestBodyRemoteProviderName = "FINANCIALFORCE"
	FISERVPROLOGUE         ApiAccountingProviderAccessCreateRequestBodyRemoteProviderName = "FISERV_PROLOGUE"
	FOUNDATION             ApiAccountingProviderAccessCreateRequestBodyRemoteProviderName = "FOUNDATION"
	FRESHBOOKS             ApiAccountingProviderAccessCreateRequestBodyRemoteProviderName = "FRESHBOOKS"
	FUNDEZ                 ApiAccountingProviderAccessCreateRequestBodyRemoteProviderName = "FUNDEZ"
	LIGHTSPEEDEVO          ApiAccountingProviderAccessCreateRequestBodyRemoteProviderName = "LIGHTSPEEDEVO"
	MICROSOFTDYNAMICS      ApiAccountingProviderAccessCreateRequestBodyRemoteProviderName = "MICROSOFT_DYNAMICS"
	MRI                    ApiAccountingProviderAccessCreateRequestBodyRemoteProviderName = "MRI"
	ODOO                   ApiAccountingProviderAccessCreateRequestBodyRemoteProviderName = "ODOO"
	ORACLEERP              ApiAccountingProviderAccessCreateRequestBodyRemoteProviderName = "ORACLE_ERP"
	PILOT                  ApiAccountingProviderAccessCreateRequestBodyRemoteProviderName = "PILOT"
	POWERCHURCH            ApiAccountingProviderAccessCreateRequestBodyRemoteProviderName = "POWERCHURCH"
	PUZZLEFINANCIAL        ApiAccountingProviderAccessCreateRequestBodyRemoteProviderName = "PUZZLE_FINANCIAL"
	QUICKBOOKSDESKTOP      ApiAccountingProviderAccessCreateRequestBodyRemoteProviderName = "QUICKBOOKS_DESKTOP"
	RENTMANAGER            ApiAccountingProviderAccessCreateRequestBodyRemoteProviderName = "RENT_MANAGER"
	RILLET                 ApiAccountingProviderAccessCreateRequestBodyRemoteProviderName = "RILLET"
	SAGE                   ApiAccountingProviderAccessCreateRequestBodyRemoteProviderName = "SAGE"
	SAP                    ApiAccountingProviderAccessCreateRequestBodyRemoteProviderName = "SAP"
	SGA                    ApiAccountingProviderAccessCreateRequestBodyRemoteProviderName = "SGA"
	SOFTLEDGER             ApiAccountingProviderAccessCreateRequestBodyRemoteProviderName = "SOFTLEDGER"
	SQUAVA                 ApiAccountingProviderAccessCreateRequestBodyRemoteProviderName = "SQUAVA"
	SYSPRO                 ApiAccountingProviderAccessCreateRequestBodyRemoteProviderName = "SYSPRO"
	TALLY                  ApiAccountingProviderAccessCreateRequestBodyRemoteProviderName = "TALLY"
	VIEWPOINT              ApiAccountingProviderAccessCreateRequestBodyRemoteProviderName = "VIEWPOINT"
	WAVEAPPS               ApiAccountingProviderAccessCreateRequestBodyRemoteProviderName = "WAVEAPPS"
	WORKDAY                ApiAccountingProviderAccessCreateRequestBodyRemoteProviderName = "WORKDAY"
	ZOHOBOOKS              ApiAccountingProviderAccessCreateRequestBodyRemoteProviderName = "ZOHO_BOOKS"
)

// Defines values for ApiAccountingSyncCreateRequestBodySyncType.
const (
	REIMBURSEMENTSYNC   ApiAccountingSyncCreateRequestBodySyncType = "REIMBURSEMENT_SYNC"
	STATEMENTCREDITSYNC ApiAccountingSyncCreateRequestBodySyncType = "STATEMENT_CREDIT_SYNC"
	TRANSACTIONSYNC     ApiAccountingSyncCreateRequestBodySyncType = "TRANSACTION_SYNC"
	TRANSFERSYNC        ApiAccountingSyncCreateRequestBodySyncType = "TRANSFER_SYNC"
)

// Defines values for ApiCardFulfillmentFulfillmentStatus.
const (
	DELIVERED          ApiCardFulfillmentFulfillmentStatus = "DELIVERED"
	DIGITALLYPRESENTED ApiCardFulfillmentFulfillmentStatus = "DIGITALLY_PRESENTED"
	ISSUED             ApiCardFulfillmentFulfillmentStatus = "ISSUED"
	ORDERED            ApiCardFulfillmentFulfillmentStatus = "ORDERED"
	REJECTED           ApiCardFulfillmentFulfillmentStatus = "REJECTED"
	SHIPPED            ApiCardFulfillmentFulfillmentStatus = "SHIPPED"
)

// Defines values for ApiCardProgramCreateRequestBodyIcon.
const (
	ApiCardProgramCreateRequestBodyIconAdvertisingIcon      ApiCardProgramCreateRequestBodyIcon = "AdvertisingIcon"
	ApiCardProgramCreateRequestBodyIconCardIcon             ApiCardProgramCreateRequestBodyIcon = "CardIcon"
	ApiCardProgramCreateRequestBodyIconEducationStipendIcon ApiCardProgramCreateRequestBodyIcon = "EducationStipendIcon"
	ApiCardProgramCreateRequestBodyIconLunchOrderingIcon    ApiCardProgramCreateRequestBodyIcon = "LunchOrderingIcon"
	ApiCardProgramCreateRequestBodyIconOnboardingIcon       ApiCardProgramCreateRequestBodyIcon = "OnboardingIcon"
	ApiCardProgramCreateRequestBodyIconPerDiemCardIcon      ApiCardProgramCreateRequestBodyIcon = "PerDiemCardIcon"
	ApiCardProgramCreateRequestBodyIconSaasSubscriptionIcon ApiCardProgramCreateRequestBodyIcon = "SaasSubscriptionIcon"
	ApiCardProgramCreateRequestBodyIconSoftwareTrialIcon    ApiCardProgramCreateRequestBodyIcon = "SoftwareTrialIcon"
	ApiCardProgramCreateRequestBodyIconTravelExpensesIcon   ApiCardProgramCreateRequestBodyIcon = "TravelExpensesIcon"
	ApiCardProgramCreateRequestBodyIconWellnessIcon         ApiCardProgramCreateRequestBodyIcon = "WellnessIcon"
)

// Defines values for ApiCardProgramResourceIcon.
const (
	ApiCardProgramResourceIconAdvertisingIcon      ApiCardProgramResourceIcon = "AdvertisingIcon"
	ApiCardProgramResourceIconCardIcon             ApiCardProgramResourceIcon = "CardIcon"
	ApiCardProgramResourceIconEducationStipendIcon ApiCardProgramResourceIcon = "EducationStipendIcon"
	ApiCardProgramResourceIconLunchOrderingIcon    ApiCardProgramResourceIcon = "LunchOrderingIcon"
	ApiCardProgramResourceIconOnboardingIcon       ApiCardProgramResourceIcon = "OnboardingIcon"
	ApiCardProgramResourceIconPerDiemCardIcon      ApiCardProgramResourceIcon = "PerDiemCardIcon"
	ApiCardProgramResourceIconSaasSubscriptionIcon ApiCardProgramResourceIcon = "SaasSubscriptionIcon"
	ApiCardProgramResourceIconSoftwareTrialIcon    ApiCardProgramResourceIcon = "SoftwareTrialIcon"
	ApiCardProgramResourceIconTravelExpensesIcon   ApiCardProgramResourceIcon = "TravelExpensesIcon"
	ApiCardProgramResourceIconWellnessIcon         ApiCardProgramResourceIcon = "WellnessIcon"
)

// Defines values for ApiCardProgramSpendingRestrictionsInterval.
const (
	ApiCardProgramSpendingRestrictionsIntervalANNUAL    ApiCardProgramSpendingRestrictionsInterval = "ANNUAL"
	ApiCardProgramSpendingRestrictionsIntervalDAILY     ApiCardProgramSpendingRestrictionsInterval = "DAILY"
	ApiCardProgramSpendingRestrictionsIntervalMONTHLY   ApiCardProgramSpendingRestrictionsInterval = "MONTHLY"
	ApiCardProgramSpendingRestrictionsIntervalQUARTERLY ApiCardProgramSpendingRestrictionsInterval = "QUARTERLY"
	ApiCardProgramSpendingRestrictionsIntervalTERTIARY  ApiCardProgramSpendingRestrictionsInterval = "TERTIARY"
	ApiCardProgramSpendingRestrictionsIntervalTOTAL     ApiCardProgramSpendingRestrictionsInterval = "TOTAL"
	ApiCardProgramSpendingRestrictionsIntervalWEEKLY    ApiCardProgramSpendingRestrictionsInterval = "WEEKLY"
	ApiCardProgramSpendingRestrictionsIntervalYEARLY    ApiCardProgramSpendingRestrictionsInterval = "YEARLY"
)

// Defines values for ApiCardSpendingRestrictionsDumpInterval.
const (
	ApiCardSpendingRestrictionsDumpIntervalANNUAL    ApiCardSpendingRestrictionsDumpInterval = "ANNUAL"
	ApiCardSpendingRestrictionsDumpIntervalDAILY     ApiCardSpendingRestrictionsDumpInterval = "DAILY"
	ApiCardSpendingRestrictionsDumpIntervalMONTHLY   ApiCardSpendingRestrictionsDumpInterval = "MONTHLY"
	ApiCardSpendingRestrictionsDumpIntervalQUARTERLY ApiCardSpendingRestrictionsDumpInterval = "QUARTERLY"
	ApiCardSpendingRestrictionsDumpIntervalTERTIARY  ApiCardSpendingRestrictionsDumpInterval = "TERTIARY"
	ApiCardSpendingRestrictionsDumpIntervalTOTAL     ApiCardSpendingRestrictionsDumpInterval = "TOTAL"
	ApiCardSpendingRestrictionsDumpIntervalWEEKLY    ApiCardSpendingRestrictionsDumpInterval = "WEEKLY"
	ApiCardSpendingRestrictionsDumpIntervalYEARLY    ApiCardSpendingRestrictionsDumpInterval = "YEARLY"
)

// Defines values for ApiCardSpendingRestrictionsRequestBodyInterval.
const (
	ApiCardSpendingRestrictionsRequestBodyIntervalANNUAL    ApiCardSpendingRestrictionsRequestBodyInterval = "ANNUAL"
	ApiCardSpendingRestrictionsRequestBodyIntervalDAILY     ApiCardSpendingRestrictionsRequestBodyInterval = "DAILY"
	ApiCardSpendingRestrictionsRequestBodyIntervalMONTHLY   ApiCardSpendingRestrictionsRequestBodyInterval = "MONTHLY"
	ApiCardSpendingRestrictionsRequestBodyIntervalQUARTERLY ApiCardSpendingRestrictionsRequestBodyInterval = "QUARTERLY"
	ApiCardSpendingRestrictionsRequestBodyIntervalTERTIARY  ApiCardSpendingRestrictionsRequestBodyInterval = "TERTIARY"
	ApiCardSpendingRestrictionsRequestBodyIntervalTOTAL     ApiCardSpendingRestrictionsRequestBodyInterval = "TOTAL"
	ApiCardSpendingRestrictionsRequestBodyIntervalWEEKLY    ApiCardSpendingRestrictionsRequestBodyInterval = "WEEKLY"
	ApiCardSpendingRestrictionsRequestBodyIntervalYEARLY    ApiCardSpendingRestrictionsRequestBodyInterval = "YEARLY"
)

// Defines values for ApiCardSpendingRestrictionsUpdateRequestBodyInterval.
const (
	ApiCardSpendingRestrictionsUpdateRequestBodyIntervalANNUAL    ApiCardSpendingRestrictionsUpdateRequestBodyInterval = "ANNUAL"
	ApiCardSpendingRestrictionsUpdateRequestBodyIntervalDAILY     ApiCardSpendingRestrictionsUpdateRequestBodyInterval = "DAILY"
	ApiCardSpendingRestrictionsUpdateRequestBodyIntervalMONTHLY   ApiCardSpendingRestrictionsUpdateRequestBodyInterval = "MONTHLY"
	ApiCardSpendingRestrictionsUpdateRequestBodyIntervalQUARTERLY ApiCardSpendingRestrictionsUpdateRequestBodyInterval = "QUARTERLY"
	ApiCardSpendingRestrictionsUpdateRequestBodyIntervalTERTIARY  ApiCardSpendingRestrictionsUpdateRequestBodyInterval = "TERTIARY"
	ApiCardSpendingRestrictionsUpdateRequestBodyIntervalTOTAL     ApiCardSpendingRestrictionsUpdateRequestBodyInterval = "TOTAL"
	ApiCardSpendingRestrictionsUpdateRequestBodyIntervalWEEKLY    ApiCardSpendingRestrictionsUpdateRequestBodyInterval = "WEEKLY"
	ApiCardSpendingRestrictionsUpdateRequestBodyIntervalYEARLY    ApiCardSpendingRestrictionsUpdateRequestBodyInterval = "YEARLY"
)

// Defines values for ApiReimbursementAccountingCategoryInfoType.
const (
	ApiReimbursementAccountingCategoryInfoTypeAMORTIZATIONTEMPLATE ApiReimbursementAccountingCategoryInfoType = "AMORTIZATION_TEMPLATE"
	ApiReimbursementAccountingCategoryInfoTypeBILLABLE             ApiReimbursementAccountingCategoryInfoType = "BILLABLE"
	ApiReimbursementAccountingCategoryInfoTypeCUSTOMERSJOBS        ApiReimbursementAccountingCategoryInfoType = "CUSTOMERS_JOBS"
	ApiReimbursementAccountingCategoryInfoTypeGLACCOUNT            ApiReimbursementAccountingCategoryInfoType = "GL_ACCOUNT"
	ApiReimbursementAccountingCategoryInfoTypeINVENTORYITEM        ApiReimbursementAccountingCategoryInfoType = "INVENTORY_ITEM"
	ApiReimbursementAccountingCategoryInfoTypeMERCHANT             ApiReimbursementAccountingCategoryInfoType = "MERCHANT"
	ApiReimbursementAccountingCategoryInfoTypeOTHER                ApiReimbursementAccountingCategoryInfoType = "OTHER"
	ApiReimbursementAccountingCategoryInfoTypeSUBSIDIARY           ApiReimbursementAccountingCategoryInfoType = "SUBSIDIARY"
	ApiReimbursementAccountingCategoryInfoTypeTAXCODE              ApiReimbursementAccountingCategoryInfoType = "TAX_CODE"
)

// Defines values for ApiReimbursementAccountingFieldSelectionType.
const (
	ApiReimbursementAccountingFieldSelectionTypeAMORTIZATIONTEMPLATE ApiReimbursementAccountingFieldSelectionType = "AMORTIZATION_TEMPLATE"
	ApiReimbursementAccountingFieldSelectionTypeBILLABLE             ApiReimbursementAccountingFieldSelectionType = "BILLABLE"
	ApiReimbursementAccountingFieldSelectionTypeCUSTOMERSJOBS        ApiReimbursementAccountingFieldSelectionType = "CUSTOMERS_JOBS"
	ApiReimbursementAccountingFieldSelectionTypeGLACCOUNT            ApiReimbursementAccountingFieldSelectionType = "GL_ACCOUNT"
	ApiReimbursementAccountingFieldSelectionTypeINVENTORYITEM        ApiReimbursementAccountingFieldSelectionType = "INVENTORY_ITEM"
	ApiReimbursementAccountingFieldSelectionTypeMERCHANT             ApiReimbursementAccountingFieldSelectionType = "MERCHANT"
	ApiReimbursementAccountingFieldSelectionTypeOTHER                ApiReimbursementAccountingFieldSelectionType = "OTHER"
	ApiReimbursementAccountingFieldSelectionTypeSUBSIDIARY           ApiReimbursementAccountingFieldSelectionType = "SUBSIDIARY"
	ApiReimbursementAccountingFieldSelectionTypeTAXCODE              ApiReimbursementAccountingFieldSelectionType = "TAX_CODE"
)

// Defines values for ApiSalesLeadBusinessDumpEntityType.
const (
	ApiSalesLeadBusinessDumpEntityTypeCOOPERATIVE        ApiSalesLeadBusinessDumpEntityType = "COOPERATIVE"
	ApiSalesLeadBusinessDumpEntityTypeCORPORATION        ApiSalesLeadBusinessDumpEntityType = "CORPORATION"
	ApiSalesLeadBusinessDumpEntityTypeLLC                ApiSalesLeadBusinessDumpEntityType = "LLC"
	ApiSalesLeadBusinessDumpEntityTypeOTHER              ApiSalesLeadBusinessDumpEntityType = "OTHER"
	ApiSalesLeadBusinessDumpEntityTypePARTNERSHIP        ApiSalesLeadBusinessDumpEntityType = "PARTNERSHIP"
	ApiSalesLeadBusinessDumpEntityTypeSOLEPROPRIETORSHIP ApiSalesLeadBusinessDumpEntityType = "SOLE_PROPRIETORSHIP"
)

// Defines values for ApiSalesLeadBusinessRequestBodyEntityType.
const (
	ApiSalesLeadBusinessRequestBodyEntityTypeCOOPERATIVE        ApiSalesLeadBusinessRequestBodyEntityType = "COOPERATIVE"
	ApiSalesLeadBusinessRequestBodyEntityTypeCORPORATION        ApiSalesLeadBusinessRequestBodyEntityType = "CORPORATION"
	ApiSalesLeadBusinessRequestBodyEntityTypeLLC                ApiSalesLeadBusinessRequestBodyEntityType = "LLC"
	ApiSalesLeadBusinessRequestBodyEntityTypeOTHER              ApiSalesLeadBusinessRequestBodyEntityType = "OTHER"
	ApiSalesLeadBusinessRequestBodyEntityTypePARTNERSHIP        ApiSalesLeadBusinessRequestBodyEntityType = "PARTNERSHIP"
	ApiSalesLeadBusinessRequestBodyEntityTypeSOLEPROPRIETORSHIP ApiSalesLeadBusinessRequestBodyEntityType = "SOLE_PROPRIETORSHIP"
)

// Defines values for ApiSalesLeadCreateRequestBodySource.
const (
	ApiSalesLeadCreateRequestBodySourceAngelList ApiSalesLeadCreateRequestBodySource = "AngelList"
)

// Defines values for ApiSpendProgramCreateRequestBodyIcon.
const (
	ApiSpendProgramCreateRequestBodyIconAdvertisingIcon      ApiSpendProgramCreateRequestBodyIcon = "AdvertisingIcon"
	ApiSpendProgramCreateRequestBodyIconCardIcon             ApiSpendProgramCreateRequestBodyIcon = "CardIcon"
	ApiSpendProgramCreateRequestBodyIconEducationStipendIcon ApiSpendProgramCreateRequestBodyIcon = "EducationStipendIcon"
	ApiSpendProgramCreateRequestBodyIconLunchOrderingIcon    ApiSpendProgramCreateRequestBodyIcon = "LunchOrderingIcon"
	ApiSpendProgramCreateRequestBodyIconOnboardingIcon       ApiSpendProgramCreateRequestBodyIcon = "OnboardingIcon"
	ApiSpendProgramCreateRequestBodyIconPerDiemCardIcon      ApiSpendProgramCreateRequestBodyIcon = "PerDiemCardIcon"
	ApiSpendProgramCreateRequestBodyIconSaasSubscriptionIcon ApiSpendProgramCreateRequestBodyIcon = "SaasSubscriptionIcon"
	ApiSpendProgramCreateRequestBodyIconSoftwareTrialIcon    ApiSpendProgramCreateRequestBodyIcon = "SoftwareTrialIcon"
	ApiSpendProgramCreateRequestBodyIconTravelExpensesIcon   ApiSpendProgramCreateRequestBodyIcon = "TravelExpensesIcon"
	ApiSpendProgramCreateRequestBodyIconWellnessIcon         ApiSpendProgramCreateRequestBodyIcon = "WellnessIcon"
)

// Defines values for ApiSpendProgramResourceIcon.
const (
	ApiSpendProgramResourceIconAdvertisingIcon      ApiSpendProgramResourceIcon = "AdvertisingIcon"
	ApiSpendProgramResourceIconCardIcon             ApiSpendProgramResourceIcon = "CardIcon"
	ApiSpendProgramResourceIconEducationStipendIcon ApiSpendProgramResourceIcon = "EducationStipendIcon"
	ApiSpendProgramResourceIconLunchOrderingIcon    ApiSpendProgramResourceIcon = "LunchOrderingIcon"
	ApiSpendProgramResourceIconOnboardingIcon       ApiSpendProgramResourceIcon = "OnboardingIcon"
	ApiSpendProgramResourceIconPerDiemCardIcon      ApiSpendProgramResourceIcon = "PerDiemCardIcon"
	ApiSpendProgramResourceIconSaasSubscriptionIcon ApiSpendProgramResourceIcon = "SaasSubscriptionIcon"
	ApiSpendProgramResourceIconSoftwareTrialIcon    ApiSpendProgramResourceIcon = "SoftwareTrialIcon"
	ApiSpendProgramResourceIconTravelExpensesIcon   ApiSpendProgramResourceIcon = "TravelExpensesIcon"
	ApiSpendProgramResourceIconWellnessIcon         ApiSpendProgramResourceIcon = "WellnessIcon"
)

// Defines values for ApiSpendingRestrictionsDumpInterval.
const (
	ApiSpendingRestrictionsDumpIntervalANNUAL    ApiSpendingRestrictionsDumpInterval = "ANNUAL"
	ApiSpendingRestrictionsDumpIntervalDAILY     ApiSpendingRestrictionsDumpInterval = "DAILY"
	ApiSpendingRestrictionsDumpIntervalMONTHLY   ApiSpendingRestrictionsDumpInterval = "MONTHLY"
	ApiSpendingRestrictionsDumpIntervalQUARTERLY ApiSpendingRestrictionsDumpInterval = "QUARTERLY"
	ApiSpendingRestrictionsDumpIntervalTERTIARY  ApiSpendingRestrictionsDumpInterval = "TERTIARY"
	ApiSpendingRestrictionsDumpIntervalTOTAL     ApiSpendingRestrictionsDumpInterval = "TOTAL"
	ApiSpendingRestrictionsDumpIntervalWEEKLY    ApiSpendingRestrictionsDumpInterval = "WEEKLY"
	ApiSpendingRestrictionsDumpIntervalYEARLY    ApiSpendingRestrictionsDumpInterval = "YEARLY"
)

// Defines values for ApiSpendingRestrictionsRequestBodyInterval.
const (
	ApiSpendingRestrictionsRequestBodyIntervalANNUAL    ApiSpendingRestrictionsRequestBodyInterval = "ANNUAL"
	ApiSpendingRestrictionsRequestBodyIntervalDAILY     ApiSpendingRestrictionsRequestBodyInterval = "DAILY"
	ApiSpendingRestrictionsRequestBodyIntervalMONTHLY   ApiSpendingRestrictionsRequestBodyInterval = "MONTHLY"
	ApiSpendingRestrictionsRequestBodyIntervalQUARTERLY ApiSpendingRestrictionsRequestBodyInterval = "QUARTERLY"
	ApiSpendingRestrictionsRequestBodyIntervalTERTIARY  ApiSpendingRestrictionsRequestBodyInterval = "TERTIARY"
	ApiSpendingRestrictionsRequestBodyIntervalTOTAL     ApiSpendingRestrictionsRequestBodyInterval = "TOTAL"
	ApiSpendingRestrictionsRequestBodyIntervalWEEKLY    ApiSpendingRestrictionsRequestBodyInterval = "WEEKLY"
	ApiSpendingRestrictionsRequestBodyIntervalYEARLY    ApiSpendingRestrictionsRequestBodyInterval = "YEARLY"
)

// Defines values for ApiStatementItemType.
const (
	CARDTRANSACTION ApiStatementItemType = "CARD_TRANSACTION"
	CASHBACK        ApiStatementItemType = "CASHBACK"
	TRANSFERPAYMENT ApiStatementItemType = "TRANSFER_PAYMENT"
)

// Defines values for ApiTransactionAccountingCategoryInfoType.
const (
	ApiTransactionAccountingCategoryInfoTypeAMORTIZATIONTEMPLATE ApiTransactionAccountingCategoryInfoType = "AMORTIZATION_TEMPLATE"
	ApiTransactionAccountingCategoryInfoTypeBILLABLE             ApiTransactionAccountingCategoryInfoType = "BILLABLE"
	ApiTransactionAccountingCategoryInfoTypeCUSTOMERSJOBS        ApiTransactionAccountingCategoryInfoType = "CUSTOMERS_JOBS"
	ApiTransactionAccountingCategoryInfoTypeGLACCOUNT            ApiTransactionAccountingCategoryInfoType = "GL_ACCOUNT"
	ApiTransactionAccountingCategoryInfoTypeINVENTORYITEM        ApiTransactionAccountingCategoryInfoType = "INVENTORY_ITEM"
	ApiTransactionAccountingCategoryInfoTypeMERCHANT             ApiTransactionAccountingCategoryInfoType = "MERCHANT"
	ApiTransactionAccountingCategoryInfoTypeOTHER                ApiTransactionAccountingCategoryInfoType = "OTHER"
	ApiTransactionAccountingCategoryInfoTypeSUBSIDIARY           ApiTransactionAccountingCategoryInfoType = "SUBSIDIARY"
	ApiTransactionAccountingCategoryInfoTypeTAXCODE              ApiTransactionAccountingCategoryInfoType = "TAX_CODE"
)

// Defines values for ApiTransactionAccountingFieldSelectionType.
const (
	ApiTransactionAccountingFieldSelectionTypeAMORTIZATIONTEMPLATE ApiTransactionAccountingFieldSelectionType = "AMORTIZATION_TEMPLATE"
	ApiTransactionAccountingFieldSelectionTypeBILLABLE             ApiTransactionAccountingFieldSelectionType = "BILLABLE"
	ApiTransactionAccountingFieldSelectionTypeCUSTOMERSJOBS        ApiTransactionAccountingFieldSelectionType = "CUSTOMERS_JOBS"
	ApiTransactionAccountingFieldSelectionTypeGLACCOUNT            ApiTransactionAccountingFieldSelectionType = "GL_ACCOUNT"
	ApiTransactionAccountingFieldSelectionTypeINVENTORYITEM        ApiTransactionAccountingFieldSelectionType = "INVENTORY_ITEM"
	ApiTransactionAccountingFieldSelectionTypeMERCHANT             ApiTransactionAccountingFieldSelectionType = "MERCHANT"
	ApiTransactionAccountingFieldSelectionTypeOTHER                ApiTransactionAccountingFieldSelectionType = "OTHER"
	ApiTransactionAccountingFieldSelectionTypeSUBSIDIARY           ApiTransactionAccountingFieldSelectionType = "SUBSIDIARY"
	ApiTransactionAccountingFieldSelectionTypeTAXCODE              ApiTransactionAccountingFieldSelectionType = "TAX_CODE"
)

// Defines values for ApiTransactionDeclineDetailsReason.
const (
	AUTHORIZER                        ApiTransactionDeclineDetailsReason = "AUTHORIZER"
	AUTHORIZERAPCARDVELOCITYLIMIT     ApiTransactionDeclineDetailsReason = "AUTHORIZER_AP_CARD_VELOCITY_LIMIT"
	AUTHORIZERBUSINESSLIMIT           ApiTransactionDeclineDetailsReason = "AUTHORIZER_BUSINESS_LIMIT"
	AUTHORIZERBUSINESSVENDORBLACKLIST ApiTransactionDeclineDetailsReason = "AUTHORIZER_BUSINESS_VENDOR_BLACKLIST"
	AUTHORIZERCARDAUTOLOCKDATE        ApiTransactionDeclineDetailsReason = "AUTHORIZER_CARD_AUTO_LOCK_DATE"
	AUTHORIZERCARDCATEGORYBLACKLIST   ApiTransactionDeclineDetailsReason = "AUTHORIZER_CARD_CATEGORY_BLACKLIST"
	AUTHORIZERCARDCATEGORYWHITELIST   ApiTransactionDeclineDetailsReason = "AUTHORIZER_CARD_CATEGORY_WHITELIST"
	AUTHORIZERCARDLIMIT               ApiTransactionDeclineDetailsReason = "AUTHORIZER_CARD_LIMIT"
	AUTHORIZERCARDMCCBLACKLIST        ApiTransactionDeclineDetailsReason = "AUTHORIZER_CARD_MCC_BLACKLIST"
	AUTHORIZERCARDMISSINGPOLICYITEMS  ApiTransactionDeclineDetailsReason = "AUTHORIZER_CARD_MISSING_POLICY_ITEMS"
	AUTHORIZERCARDNOTACTIVATED        ApiTransactionDeclineDetailsReason = "AUTHORIZER_CARD_NOT_ACTIVATED"
	AUTHORIZERCARDSUSPENDED           ApiTransactionDeclineDetailsReason = "AUTHORIZER_CARD_SUSPENDED"
	AUTHORIZERCARDVENDORBLACKLIST     ApiTransactionDeclineDetailsReason = "AUTHORIZER_CARD_VENDOR_BLACKLIST"
	AUTHORIZERCARDVENDORWHITELIST     ApiTransactionDeclineDetailsReason = "AUTHORIZER_CARD_VENDOR_WHITELIST"
	AUTHORIZERCOMMANDOMODE            ApiTransactionDeclineDetailsReason = "AUTHORIZER_COMMANDO_MODE"
	AUTHORIZERFRAUD                   ApiTransactionDeclineDetailsReason = "AUTHORIZER_FRAUD"
	AUTHORIZERGLOBALMCCBLACKLIST      ApiTransactionDeclineDetailsReason = "AUTHORIZER_GLOBAL_MCC_BLACKLIST"
	AUTHORIZERNONAPCARDVELOCITYLIMIT  ApiTransactionDeclineDetailsReason = "AUTHORIZER_NON_AP_CARD_VELOCITY_LIMIT"
	AUTHORIZEROOBBLOCKEDMERCHANT      ApiTransactionDeclineDetailsReason = "AUTHORIZER_OOB_BLOCKED_MERCHANT"
	AUTHORIZEROOBDAILYBUSINESSBALANCE ApiTransactionDeclineDetailsReason = "AUTHORIZER_OOB_DAILY_BUSINESS_BALANCE"
	AUTHORIZEROOBDAILYCARDSPEND       ApiTransactionDeclineDetailsReason = "AUTHORIZER_OOB_DAILY_CARD_SPEND"
	AUTHORIZERTRANSACTIONAMOUNTLIMIT  ApiTransactionDeclineDetailsReason = "AUTHORIZER_TRANSACTION_AMOUNT_LIMIT"
	AUTHORIZERUSERLIMIT               ApiTransactionDeclineDetailsReason = "AUTHORIZER_USER_LIMIT"
	AUTHORIZERUSERSUSPENDED           ApiTransactionDeclineDetailsReason = "AUTHORIZER_USER_SUSPENDED"
	BLOCKEDCOUNTRY                    ApiTransactionDeclineDetailsReason = "BLOCKED_COUNTRY"
	CARDTERMINATED                    ApiTransactionDeclineDetailsReason = "CARD_TERMINATED"
	CHIPFAILLURE                      ApiTransactionDeclineDetailsReason = "CHIP_FAILLURE"
	FORBIDDENCATEGORY                 ApiTransactionDeclineDetailsReason = "FORBIDDEN_CATEGORY"
	MOBILEWALLETFAILURE               ApiTransactionDeclineDetailsReason = "MOBILE_WALLET_FAILURE"
	NOLINKEDSPENDALLOCATION           ApiTransactionDeclineDetailsReason = "NO_LINKED_SPEND_ALLOCATION"
	NOTACTIVE                         ApiTransactionDeclineDetailsReason = "NOT_ACTIVE"
	NOTALLOWED                        ApiTransactionDeclineDetailsReason = "NOT_ALLOWED"
	OFACVERIFICATIONNEEDED            ApiTransactionDeclineDetailsReason = "OFAC_VERIFICATION_NEEDED"
	OTHER                             ApiTransactionDeclineDetailsReason = "OTHER"
	PROCESSORCAP                      ApiTransactionDeclineDetailsReason = "PROCESSOR_CAP"
	QUASICASH                         ApiTransactionDeclineDetailsReason = "QUASI_CASH"
	STRIPEWEBHOOKTIMEOUT              ApiTransactionDeclineDetailsReason = "STRIPE_WEBHOOK_TIMEOUT"
	SUSPECTEDBINATTACK                ApiTransactionDeclineDetailsReason = "SUSPECTED_BIN_ATTACK"
	SUSPECTEDFRAUD                    ApiTransactionDeclineDetailsReason = "SUSPECTED_FRAUD"
	USERTERMINATED                    ApiTransactionDeclineDetailsReason = "USER_TERMINATED"
	WRONGADDRESS                      ApiTransactionDeclineDetailsReason = "WRONG_ADDRESS"
	WRONGCVV                          ApiTransactionDeclineDetailsReason = "WRONG_CVV"
	WRONGEXPIRATION                   ApiTransactionDeclineDetailsReason = "WRONG_EXPIRATION"
	WRONGPOSTALCODE                   ApiTransactionDeclineDetailsReason = "WRONG_POSTAL_CODE"
)

// Defines values for ApiUserCreateRequestBodyRole.
const (
	ApiUserCreateRequestBodyRoleBUSINESSADMIN      ApiUserCreateRequestBodyRole = "BUSINESS_ADMIN"
	ApiUserCreateRequestBodyRoleBUSINESSBOOKKEEPER ApiUserCreateRequestBodyRole = "BUSINESS_BOOKKEEPER"
	ApiUserCreateRequestBodyRoleBUSINESSUSER       ApiUserCreateRequestBodyRole = "BUSINESS_USER"
	ApiUserCreateRequestBodyRoleGUESTUSER          ApiUserCreateRequestBodyRole = "GUEST_USER"
)

// Defines values for ApiUserUpdateRequestBodyRole.
const (
	ApiUserUpdateRequestBodyRoleBUSINESSADMIN      ApiUserUpdateRequestBodyRole = "BUSINESS_ADMIN"
	ApiUserUpdateRequestBodyRoleBUSINESSBOOKKEEPER ApiUserUpdateRequestBodyRole = "BUSINESS_BOOKKEEPER"
	ApiUserUpdateRequestBodyRoleBUSINESSUSER       ApiUserUpdateRequestBodyRole = "BUSINESS_USER"
	ApiUserUpdateRequestBodyRoleGUESTUSER          ApiUserUpdateRequestBodyRole = "GUEST_USER"
)

// Defines values for CardState.
const (
	CardStateACTIVE      CardState = "ACTIVE"
	CardStateSUSPENDED   CardState = "SUSPENDED"
	CardStateTERMINATED  CardState = "TERMINATED"
	CardStateUNACTIVATED CardState = "UNACTIVATED"
)

// Defines values for CardShippingRecipientAddressVerificationState.
const (
	CardShippingRecipientAddressVerificationStateNOTVERIFIED CardShippingRecipientAddressVerificationState = "NOT_VERIFIED"
	CardShippingRecipientAddressVerificationStateOVERRIDEN   CardShippingRecipientAddressVerificationState = "OVERRIDEN"
	CardShippingRecipientAddressVerificationStateVERIFIED    CardShippingRecipientAddressVerificationState = "VERIFIED"
)

// Defines values for CardShippingRequestBodyRecipientAddressVerificationState.
const (
	CardShippingRequestBodyRecipientAddressVerificationStateNOTVERIFIED CardShippingRequestBodyRecipientAddressVerificationState = "NOT_VERIFIED"
	CardShippingRequestBodyRecipientAddressVerificationStateOVERRIDEN   CardShippingRequestBodyRecipientAddressVerificationState = "OVERRIDEN"
	CardShippingRequestBodyRecipientAddressVerificationStateVERIFIED    CardShippingRequestBodyRecipientAddressVerificationState = "VERIFIED"
)

// Defines values for GLAccountClassification.
const (
	GLAccountClassificationASSET     GLAccountClassification = "ASSET"
	GLAccountClassificationCREDCARD  GLAccountClassification = "CREDCARD"
	GLAccountClassificationEQUITY    GLAccountClassification = "EQUITY"
	GLAccountClassificationEXPENSE   GLAccountClassification = "EXPENSE"
	GLAccountClassificationLIABILITY GLAccountClassification = "LIABILITY"
	GLAccountClassificationREVENUE   GLAccountClassification = "REVENUE"
	GLAccountClassificationUNKNOWN   GLAccountClassification = "UNKNOWN"
)

// Defines values for GeneralLedgerAccountClassification.
const (
	GeneralLedgerAccountClassificationASSET     GeneralLedgerAccountClassification = "ASSET"
	GeneralLedgerAccountClassificationCREDCARD  GeneralLedgerAccountClassification = "CREDCARD"
	GeneralLedgerAccountClassificationEQUITY    GeneralLedgerAccountClassification = "EQUITY"
	GeneralLedgerAccountClassificationEXPENSE   GeneralLedgerAccountClassification = "EXPENSE"
	GeneralLedgerAccountClassificationLIABILITY GeneralLedgerAccountClassification = "LIABILITY"
	GeneralLedgerAccountClassificationREVENUE   GeneralLedgerAccountClassification = "REVENUE"
	GeneralLedgerAccountClassificationUNKNOWN   GeneralLedgerAccountClassification = "UNKNOWN"
)

// Defines values for LeadFinancingApplicationStatus.
const (
	ALLOYCOMPLETE      LeadFinancingApplicationStatus = "ALLOY_COMPLETE"
	AdminApproved      LeadFinancingApplicationStatus = "Admin Approved"
	DOCUMENTSREQUIRED  LeadFinancingApplicationStatus = "DOCUMENTS_REQUIRED"
	DOCUMENTSSUBMITTED LeadFinancingApplicationStatus = "DOCUMENTS_SUBMITTED"
	KYCApproved        LeadFinancingApplicationStatus = "KYC Approved"
	OPSREVIEW          LeadFinancingApplicationStatus = "OPS_REVIEW"
	Pending            LeadFinancingApplicationStatus = "Pending"
	Rejected           LeadFinancingApplicationStatus = "Rejected"
	Submitted          LeadFinancingApplicationStatus = "Submitted"
	Withdrawn          LeadFinancingApplicationStatus = "Withdrawn"
)

// Defines values for LeadSource.
const (
	LeadSourceAngelList LeadSource = "AngelList"
)

// Defines values for ReimbursementDirection.
const (
	BUSINESSTOUSER ReimbursementDirection = "BUSINESS_TO_USER"
	USERTOBUSINESS ReimbursementDirection = "USER_TO_BUSINESS"
)

// Defines values for ReimbursementType.
const (
	MILEAGE        ReimbursementType = "MILEAGE"
	OUTOFPOCKET    ReimbursementType = "OUT_OF_POCKET"
	PAYBACKFULL    ReimbursementType = "PAYBACK_FULL"
	PAYBACKPARTIAL ReimbursementType = "PAYBACK_PARTIAL"
)

// Defines values for SyncStatus.
const (
	CSVFAILURE     SyncStatus = "CSV_FAILURE"
	CSVSUCCESS     SyncStatus = "CSV_SUCCESS"
	INPROGRESS     SyncStatus = "IN_PROGRESS"
	MARKEDCANCELED SyncStatus = "MARKED_CANCELED"
	PARTIALFAILURE SyncStatus = "PARTIAL_FAILURE"
	SYNCFAILURE    SyncStatus = "SYNC_FAILURE"
	SYNCSUCCESS    SyncStatus = "SYNC_SUCCESS"
	TIMEOUTFAILURE SyncStatus = "TIMEOUT_FAILURE"
	UNKNOWNERROR   SyncStatus = "UNKNOWN_ERROR"
	VENDORFAIL     SyncStatus = "VENDOR_FAIL"
)

// Defines values for TransactionState.
const (
	TransactionStateALL               TransactionState = "ALL"
	TransactionStateCLEARED           TransactionState = "CLEARED"
	TransactionStateCOMPLETION        TransactionState = "COMPLETION"
	TransactionStateDECLINED          TransactionState = "DECLINED"
	TransactionStateERROR             TransactionState = "ERROR"
	TransactionStatePENDING           TransactionState = "PENDING"
	TransactionStatePENDINGINITIATION TransactionState = "PENDING_INITIATION"
)

// Defines values for TransferStatus.
const (
	TransferStatusACHCONFIRMED     TransferStatus = "ACH_CONFIRMED"
	TransferStatusCANCELED         TransferStatus = "CANCELED"
	TransferStatusCOMPLETED        TransferStatus = "COMPLETED"
	TransferStatusERROR            TransferStatus = "ERROR"
	TransferStatusINITIATED        TransferStatus = "INITIATED"
	TransferStatusNOTACKED         TransferStatus = "NOT_ACKED"
	TransferStatusNOTENOUGHFUNDS   TransferStatus = "NOT_ENOUGH_FUNDS"
	TransferStatusPROCESSINGBYODFI TransferStatus = "PROCESSING_BY_ODFI"
	TransferStatusREJECTEDBYODFI   TransferStatus = "REJECTED_BY_ODFI"
	TransferStatusRETURNEDBYRDFI   TransferStatus = "RETURNED_BY_RDFI"
	TransferStatusSUBMITTEDTOFED   TransferStatus = "SUBMITTED_TO_FED"
	TransferStatusSUBMITTEDTORDFI  TransferStatus = "SUBMITTED_TO_RDFI"
	TransferStatusUNNECESSARY      TransferStatus = "UNNECESSARY"
	TransferStatusUPLOADED         TransferStatus = "UPLOADED"
)

// Defines values for UserStatus.
const (
	INVITEDELETED  UserStatus = "INVITE_DELETED"
	INVITEEXPIRED  UserStatus = "INVITE_EXPIRED"
	INVITEPENDING  UserStatus = "INVITE_PENDING"
	USERACTIVE     UserStatus = "USER_ACTIVE"
	USERONBOARDING UserStatus = "USER_ONBOARDING"
	USERSUSPENDED  UserStatus = "USER_SUSPENDED"
)

// Defines values for LimitState.
const (
	LimitStateACTIVE         LimitState = "ACTIVE"
	LimitStateRAMPTERMINATED LimitState = "RAMP_TERMINATED"
	LimitStateSUSPENDED      LimitState = "SUSPENDED"
	LimitStateTERMINATED     LimitState = "TERMINATED"
)

// Defines values for GetTransactionsCanonicalListWithPaginationParamsState.
const (
	ALL               GetTransactionsCanonicalListWithPaginationParamsState = "ALL"
	CLEARED           GetTransactionsCanonicalListWithPaginationParamsState = "CLEARED"
	COMPLETION        GetTransactionsCanonicalListWithPaginationParamsState = "COMPLETION"
	DECLINED          GetTransactionsCanonicalListWithPaginationParamsState = "DECLINED"
	ERROR             GetTransactionsCanonicalListWithPaginationParamsState = "ERROR"
	PENDING           GetTransactionsCanonicalListWithPaginationParamsState = "PENDING"
	PENDINGINITIATION GetTransactionsCanonicalListWithPaginationParamsState = "PENDING_INITIATION"
)

// AccountingProvider defines model for AccountingProvider.
type AccountingProvider struct {
	CreatedAt          *time.Time          `json:"created_at,omitempty"`
	Id                 *openapi_types.UUID `json:"id,omitempty"`
	RemoteProviderName *interface{}        `json:"remote_provider_name,omitempty"`
}

// ApiAccountingCategory defines model for ApiAccountingCategory.
type ApiAccountingCategory struct {
	// CategoryId User-selected category id for transaction.
	CategoryId *string `json:"category_id,omitempty"`

	// CategoryName User-selected category name for transaction.
	CategoryName               *string `json:"category_name,omitempty"`
	TrackingCategoryRemoteId   *string `json:"tracking_category_remote_id,omitempty"`
	TrackingCategoryRemoteName *string `json:"tracking_category_remote_name,omitempty"`
	TrackingCategoryRemoteType *string `json:"tracking_category_remote_type,omitempty"`
}

// ApiAccountingCustomFieldCreateRequestBody defines model for ApiAccountingCustomFieldCreateRequestBody.
type ApiAccountingCustomFieldCreateRequestBody struct {
	// Id id of the custom accounting field.
	Id string `json:"id"`

	// InputType The input type could be SINGLE_CHOICE, BOOLEAN or FREE_FORM_TEXT.
	InputType ApiAccountingCustomFieldCreateRequestBodyInputType `json:"input_type"`

	// IsSplittable If set to True, the accounting field can be used to annotate split line items.
	IsSplittable *bool `json:"is_splittable,omitempty"`

	// Name name of the custom accounting field.
	Name string `json:"name"`
}

// ApiAccountingCustomFieldCreateRequestBodyInputType The input type could be SINGLE_CHOICE, BOOLEAN or FREE_FORM_TEXT.
type ApiAccountingCustomFieldCreateRequestBodyInputType string

// ApiAccountingCustomFieldOptionUpdateRequestBody defines model for ApiAccountingCustomFieldOptionUpdateRequestBody.
type ApiAccountingCustomFieldOptionUpdateRequestBody struct {
	Value *string `json:"value,omitempty"`
}

// ApiAccountingCustomFieldOptionUploadRequestBody defines model for ApiAccountingCustomFieldOptionUploadRequestBody.
type ApiAccountingCustomFieldOptionUploadRequestBody struct {
	// FieldId id to uniquely identify a custom accounting field within Ramp system
	FieldId openapi_types.UUID `json:"field_id"`

	// Options A list of field options for a given custom accounting field.
	Options []FieldOption `json:"options"`
}

// ApiAccountingCustomFieldResource defines model for ApiAccountingCustomFieldResource.
type ApiAccountingCustomFieldResource struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`
	Id        *string    `json:"id,omitempty"`

	// InputType The input type could be SINGLE_CHOICE, BOOLEAN or FREE_FORM_TEXT.
	InputType    ApiAccountingCustomFieldResourceInputType `json:"input_type"`
	IsActive     *bool                                     `json:"is_active,omitempty"`
	IsSplittable *bool                                     `json:"is_splittable,omitempty"`

	// Name name of the custom accounting field.
	Name *string `json:"name,omitempty"`

	// RampId id to uniquely identify a custom accounting field within Ramp system
	RampId    *openapi_types.UUID `json:"ramp_id,omitempty"`
	UpdatedAt *time.Time          `json:"updated_at,omitempty"`
}

// ApiAccountingCustomFieldResourceInputType The input type could be SINGLE_CHOICE, BOOLEAN or FREE_FORM_TEXT.
type ApiAccountingCustomFieldResourceInputType string

// ApiAccountingCustomFieldUpdateRequestBody defines model for ApiAccountingCustomFieldUpdateRequestBody.
type ApiAccountingCustomFieldUpdateRequestBody struct {
	// IsSplittable If set to True, the accounting field can be used to annotate split line items.
	IsSplittable *bool `json:"is_splittable,omitempty"`

	// Name name of the custom accounting field.
	Name *string `json:"name,omitempty"`
}

// ApiAccountingFailedSyncRequestBody defines model for ApiAccountingFailedSyncRequestBody.
type ApiAccountingFailedSyncRequestBody struct {
	// Error describes the reason why the sync object failed to sync.
	Error ApiAccountingSyncErrorRequestBody `json:"error"`

	// Id ID that uniquely identifies a transaction/reimbursement in Ramp systems.
	Id openapi_types.UUID `json:"id"`
}

// ApiAccountingGLAccountUpdateRequestBody defines model for ApiAccountingGLAccountUpdateRequestBody.
type ApiAccountingGLAccountUpdateRequestBody struct {
	// Code code of the general ledger account; you could provide an empty string if you want to reset the remote code.
	Code *string `json:"code,omitempty"`

	// Name name of the general ledger account
	Name *string `json:"name,omitempty"`

	// Subsidiaries IDs of a list of subsidiaries which a general ledger account can be used with. The Ramp-assigned IDs should be used here. you could provide an empty list if you want to reset the subsidiaries list for this general ledger account.
	Subsidiaries *[]string `json:"subsidiaries,omitempty"`
}

// ApiAccountingGLAccountUploadRequestBody defines model for ApiAccountingGLAccountUploadRequestBody.
type ApiAccountingGLAccountUploadRequestBody struct {
	// GlAccounts A list of general ledger accounts that you want to use to classify your Ramp transactions.
	GlAccounts *[]GLAccount `json:"gl_accounts,omitempty"`
}

// ApiAccountingProviderAccessCreateRequestBody defines model for ApiAccountingProviderAccessCreateRequestBody.
type ApiAccountingProviderAccessCreateRequestBody struct {
	// Reactivate Set reactivate=True to try to find an existing deleted accounting connection instead of creating a new one.
	Reactivate         *bool                                                           `json:"reactivate,omitempty"`
	RemoteProviderName *ApiAccountingProviderAccessCreateRequestBodyRemoteProviderName `json:"remote_provider_name"`
}

// ApiAccountingProviderAccessCreateRequestBodyRemoteProviderName defines model for ApiAccountingProviderAccessCreateRequestBody.RemoteProviderName.
type ApiAccountingProviderAccessCreateRequestBodyRemoteProviderName string

// ApiAccountingSubsidiaryCreateRequestBody defines model for ApiAccountingSubsidiaryCreateRequestBody.
type ApiAccountingSubsidiaryCreateRequestBody struct {
	// Id id of the subsidiary.
	Id string `json:"id"`

	// Name name of the subsidiary company; e.g. Ramp LP. In the corporate world, a subsidiary is a company that belongs to another company, which is usually referred to as the parent company or the holding company.
	Name string `json:"name"`
}

// ApiAccountingSubsidiaryUpdateRequestBody defines model for ApiAccountingSubsidiaryUpdateRequestBody.
type ApiAccountingSubsidiaryUpdateRequestBody struct {
	// Name Name of a subsidiary
	Name string `json:"name"`
}

// ApiAccountingSubsidiaryUploadRequestBody defines model for ApiAccountingSubsidiaryUploadRequestBody.
type ApiAccountingSubsidiaryUploadRequestBody struct {
	// Subsidiaries A list of subsidiaries that you want to use to classify your Ramp transactions.
	Subsidiaries *[]ApiAccountingSubsidiaryCreateRequestBody `json:"subsidiaries,omitempty"`
}

// ApiAccountingSuccessfulSyncRequestBody defines model for ApiAccountingSuccessfulSyncRequestBody.
type ApiAccountingSuccessfulSyncRequestBody struct {
	// Id ID that uniquely identifies the object to sync in Ramp systems.
	Id openapi_types.UUID `json:"id"`

	// ReferenceId ID that uniquely identifies the object to sync in remote ERP systems.
	ReferenceId string `json:"reference_id"`
}

// ApiAccountingSyncCreateRequestBody defines model for ApiAccountingSyncCreateRequestBody.
type ApiAccountingSyncCreateRequestBody struct {
	// FailedSyncs A list of objects that failed to be synced.
	FailedSyncs *[]ApiAccountingFailedSyncRequestBody `json:"failed_syncs,omitempty"`

	// IdempotencyKey An idempotency key is a unique value generated by the client which the server uses to recognize subsequent retries of the same request. To avoid collisions, we encourage clients to use random generated UUIDs.
	IdempotencyKey string `json:"idempotency_key"`

	// SuccessfulSyncs A list of successfully synced objects.
	SuccessfulSyncs *[]ApiAccountingSuccessfulSyncRequestBody `json:"successful_syncs,omitempty"`

	// SyncType The type of object to sync.
	SyncType ApiAccountingSyncCreateRequestBodySyncType `json:"sync_type"`
}

// ApiAccountingSyncCreateRequestBodySyncType The type of object to sync.
type ApiAccountingSyncCreateRequestBodySyncType string

// ApiAccountingSyncErrorRequestBody defines model for ApiAccountingSyncErrorRequestBody.
type ApiAccountingSyncErrorRequestBody struct {
	// Message an error message that explains the reason of the sync failure.
	Message string `json:"message"`
}

// ApiAccountingTrackingCategoryUploadResponse defines model for ApiAccountingTrackingCategoryUploadResponse.
type ApiAccountingTrackingCategoryUploadResponse struct {
	// Uploaded A list of uuids from the uploaded objects.
	Uploaded *[]openapi_types.UUID `json:"uploaded,omitempty"`
}

// ApiAccountingVendorUpdateRequestBody defines model for ApiAccountingVendorUpdateRequestBody.
type ApiAccountingVendorUpdateRequestBody struct {
	// Code Code of the vendor; you could provide an empty string to reset the remote code.
	Code *string `json:"code,omitempty"`

	// Name Name of a vendor
	Name *string `json:"name,omitempty"`

	// Subsidiaries IDs of a list of subsidiaries associated with the vendor. The Ramp-assigned IDs should be used here. You could provide an empty list to reset the subsidiaries list.
	Subsidiaries *[]string `json:"subsidiaries,omitempty"`
}

// ApiAccountingVendorUploadRequestBody defines model for ApiAccountingVendorUploadRequestBody.
type ApiAccountingVendorUploadRequestBody struct {
	// Vendors A list of vendors that you want to use to classify your Ramp transactions.
	Vendors *[]Vendor `json:"vendors,omitempty"`
}

// ApiCardAccountingRulesDataRequestBody defines model for ApiCardAccountingRulesDataRequestBody.
type ApiCardAccountingRulesDataRequestBody struct {
	AccountingProviderAccessUuid     *string `json:"accounting_provider_access_uuid,omitempty"`
	TrackingCategoryId               int     `json:"tracking_category_id"`
	TrackingCategoryOptionId         int     `json:"tracking_category_option_id"`
	TrackingCategoryOptionRemoteName string  `json:"tracking_category_option_remote_name"`
}

// ApiCardDeferredTaskData defines model for ApiCardDeferredTaskData.
type ApiCardDeferredTaskData struct {
	// CardId Unique identifier of the subject card in the deferred task.
	CardId *openapi_types.UUID `json:"card_id,omitempty"`

	// Error An error message if the deferred task fails.
	Error *string `json:"error,omitempty"`
}

// ApiCardDeferredUpdateRequestBody defines model for ApiCardDeferredUpdateRequestBody.
type ApiCardDeferredUpdateRequestBody struct {
	// IdempotencyKey An idempotency key is a unique value generated by the client which the server uses to recognize subsequent retries of the same request. To avoid collisions, we encourage clients to use random generated UUIDs.
	IdempotencyKey string `json:"idempotency_key"`
}

// ApiCardFulfillment defines model for ApiCardFulfillment.
type ApiCardFulfillment struct {
	CardPersonalization *CardPersonalization `json:"card_personalization,omitempty"`

	// FulfillmentStatus Fulfillment status of the card
	FulfillmentStatus *ApiCardFulfillmentFulfillmentStatus `json:"fulfillment_status,omitempty"`
	Shipping          *CardShipping                        `json:"shipping,omitempty"`

	// ShippingDate Date on which the card is shipped out, presented in ISO8601 format
	ShippingDate *time.Time `json:"shipping_date,omitempty"`

	// ShippingEta Estimated arrival time, presented in ISO8601 format
	ShippingEta *time.Time `json:"shipping_eta,omitempty"`

	// ShippingTrackingUrl Tracking url
	ShippingTrackingUrl *string `json:"shipping_tracking_url,omitempty"`
}

// ApiCardFulfillmentFulfillmentStatus Fulfillment status of the card
type ApiCardFulfillmentFulfillmentStatus string

// ApiCardProgramCreateRequestBody defines model for ApiCardProgramCreateRequestBody.
type ApiCardProgramCreateRequestBody struct {
	ActingUserId int `json:"acting_user_id"`
	BusinessId   int `json:"business_id"`

	// Description Description of the card program.
	Description string `json:"description"`

	// DisplayName Display name of the card program.
	DisplayName string                               `json:"display_name"`
	Icon        *ApiCardProgramCreateRequestBodyIcon `json:"icon,omitempty"`

	// IsDefault Whether this card program is used as default card program.
	IsDefault bool `json:"is_default"`

	// IsPhysical Whether this card program is used for physical cards.
	IsPhysical bool `json:"is_physical"`
	PolicyId   int  `json:"policy_id"`

	// SpendingRestrictions Spending restrictions associated with the card program.
	SpendingRestrictions ApiCardSpendingRestrictionsRequestBody `json:"spending_restrictions"`
}

// ApiCardProgramCreateRequestBodyIcon defines model for ApiCardProgramCreateRequestBody.Icon.
type ApiCardProgramCreateRequestBodyIcon string

// ApiCardProgramResource defines model for ApiCardProgramResource.
type ApiCardProgramResource struct {
	// Description Card program description.
	Description *string `json:"description,omitempty"`

	// DisplayName Display name of the card program.
	DisplayName *string                    `json:"display_name,omitempty"`
	Icon        ApiCardProgramResourceIcon `json:"icon"`

	// Id Unique identifer of the card program.
	Id *openapi_types.UUID `json:"id,omitempty"`

	// IsDefault Whether this card program is used as default card program.
	IsDefault *bool `json:"is_default,omitempty"`

	// IsPhysical Whether this card program is used for physical cards.
	IsPhysical *bool `json:"is_physical,omitempty"`

	// SpendingRestrictions Spending restrictions associated with the card program.
	SpendingRestrictions *ApiCardProgramSpendingRestrictions `json:"spending_restrictions,omitempty"`
}

// ApiCardProgramResourceIcon defines model for ApiCardProgramResource.Icon.
type ApiCardProgramResourceIcon string

// ApiCardProgramSpendingRestrictions defines model for ApiCardProgramSpendingRestrictions.
type ApiCardProgramSpendingRestrictions struct {
	// Amount Amount limit total per interval.
	Amount *float32 `json:"amount,omitempty"`

	// Categories List of Ramp Category Codes this card is restricted to.
	Categories *[]int `json:"categories,omitempty"`

	// Interval Time interval to apply limit to.
	Interval *ApiCardProgramSpendingRestrictionsInterval `json:"interval,omitempty"`

	// LockDate Date to automatically lock the card.
	LockDate *time.Time `json:"lock_date,omitempty"`

	// TransactionAmountLimit Max amount limit per transaction.
	TransactionAmountLimit *float32 `json:"transaction_amount_limit,omitempty"`
}

// ApiCardProgramSpendingRestrictionsInterval Time interval to apply limit to.
type ApiCardProgramSpendingRestrictionsInterval string

// ApiCardRequestBody defines model for ApiCardRequestBody.
type ApiCardRequestBody struct {
	// CardProgramId Alternative method to create a card using a card program. If this value is given, no other attributes (other than idempotency_key) may be given.
	CardProgramId *openapi_types.UUID `json:"card_program_id,omitempty"`

	// DisplayName Cosmetic display name of the card.
	DisplayName *string `json:"display_name,omitempty"`

	// Fulfillment Details for shipping physical cards.
	Fulfillment *CardFulfillmentRequestBody `json:"fulfillment,omitempty"`

	// IdempotencyKey An idempotency key is a unique value generated by the client which the server uses to recognize subsequent retries of the same request. To avoid collisions, we encourage clients to use random generated UUIDs.
	IdempotencyKey string `json:"idempotency_key"`

	// IsPhysical Set to true to create a physical card
	IsPhysical *bool `json:"is_physical,omitempty"`

	// IsTemporary Set to true to create a temporary card
	IsTemporary *bool `json:"is_temporary,omitempty"`

	// SpendingRestrictions Specifies the spend restrictions on a Ramp card.
	SpendingRestrictions *ApiCardSpendingRestrictionsRequestBody `json:"spending_restrictions,omitempty"`

	// UserId Unique identifier of the card owner.
	UserId openapi_types.UUID `json:"user_id"`
}

// ApiCardSpendingRestrictionsDump defines model for ApiCardSpendingRestrictionsDump.
type ApiCardSpendingRestrictionsDump struct {
	// Amount Amount limit total per interval.
	Amount *float32 `json:"amount,omitempty"`

	// AutoLockDate Date to automatically lock the card.
	AutoLockDate *time.Time `json:"auto_lock_date,omitempty"`

	// BlockedCategories List of Ramp Category Codes blocked for this card.
	BlockedCategories *[]int `json:"blocked_categories,omitempty"`

	// Categories List of Ramp Category Codes this card is restricted to.
	Categories *[]int `json:"categories,omitempty"`

	// Interval Time interval to apply limit to.
	Interval  *ApiCardSpendingRestrictionsDumpInterval `json:"interval,omitempty"`
	Suspended *bool                                    `json:"suspended,omitempty"`

	// TransactionAmountLimit Max amount limit per transaction.
	TransactionAmountLimit *float32 `json:"transaction_amount_limit,omitempty"`
}

// ApiCardSpendingRestrictionsDumpInterval Time interval to apply limit to.
type ApiCardSpendingRestrictionsDumpInterval string

// ApiCardSpendingRestrictionsRequestBody defines model for ApiCardSpendingRestrictionsRequestBody.
type ApiCardSpendingRestrictionsRequestBody struct {
	// Amount Amount limit total per interval.
	Amount              ApiCardSpendingRestrictionsRequestBody_Amount `json:"amount"`
	BlockedMccCodes     *[]string                                     `json:"blocked_mcc_codes,omitempty"`
	CardAccountingRules *[]ApiCardAccountingRulesDataRequestBody      `json:"card_accounting_rules,omitempty"`

	// Categories List of Ramp Category Codes this card is restricted to.
	Categories          *[]int `json:"categories,omitempty"`
	CategoriesBlacklist *[]int `json:"categories_blacklist,omitempty"`
	CategoriesWhitelist *[]int `json:"categories_whitelist,omitempty"`

	// Currency Currency in which the amount is specified.
	Currency *string `json:"currency,omitempty"`

	// Interval Time interval to apply limit to.
	Interval ApiCardSpendingRestrictionsRequestBodyInterval `json:"interval"`

	// LockDate Date to automatically lock the card. If lock date has passed, set to a future date or to null to unlock the card.
	LockDate *time.Time `json:"lock_date,omitempty"`
	PolicyId *string    `json:"policy_id,omitempty"`

	// TransactionAmountLimit Max amount limit per transaction.
	TransactionAmountLimit *ApiCardSpendingRestrictionsRequestBody_TransactionAmountLimit `json:"transaction_amount_limit,omitempty"`
	VendorBlacklist        *[]openapi_types.UUID                                          `json:"vendor_blacklist,omitempty"`
	VendorWhitelist        *[]openapi_types.UUID                                          `json:"vendor_whitelist,omitempty"`
}

// ApiCardSpendingRestrictionsRequestBodyAmount0 defines model for .
type ApiCardSpendingRestrictionsRequestBodyAmount0 = string

// ApiCardSpendingRestrictionsRequestBodyAmount1 defines model for .
type ApiCardSpendingRestrictionsRequestBodyAmount1 = float32

// ApiCardSpendingRestrictionsRequestBody_Amount Amount limit total per interval.
type ApiCardSpendingRestrictionsRequestBody_Amount struct {
	union json.RawMessage
}

// ApiCardSpendingRestrictionsRequestBodyInterval Time interval to apply limit to.
type ApiCardSpendingRestrictionsRequestBodyInterval string

// ApiCardSpendingRestrictionsRequestBodyTransactionAmountLimit0 defines model for .
type ApiCardSpendingRestrictionsRequestBodyTransactionAmountLimit0 = string

// ApiCardSpendingRestrictionsRequestBodyTransactionAmountLimit1 defines model for .
type ApiCardSpendingRestrictionsRequestBodyTransactionAmountLimit1 = float32

// ApiCardSpendingRestrictionsRequestBody_TransactionAmountLimit Max amount limit per transaction.
type ApiCardSpendingRestrictionsRequestBody_TransactionAmountLimit struct {
	union json.RawMessage
}

// ApiCardSpendingRestrictionsUpdateRequestBody defines model for ApiCardSpendingRestrictionsUpdateRequestBody.
type ApiCardSpendingRestrictionsUpdateRequestBody struct {
	// Amount Amount limit total per interval.
	Amount              *ApiCardSpendingRestrictionsUpdateRequestBody_Amount `json:"amount,omitempty"`
	BlockedMccCodes     *[]string                                            `json:"blocked_mcc_codes,omitempty"`
	CardAccountingRules *[]ApiCardAccountingRulesDataRequestBody             `json:"card_accounting_rules,omitempty"`

	// Categories List of Ramp Category Codes this card is restricted to.
	Categories          *[]int `json:"categories,omitempty"`
	CategoriesBlacklist *[]int `json:"categories_blacklist,omitempty"`
	CategoriesWhitelist *[]int `json:"categories_whitelist,omitempty"`

	// Currency Currency in which the amount is specified.
	Currency *string `json:"currency,omitempty"`

	// Interval Time interval to apply limit to.
	Interval *ApiCardSpendingRestrictionsUpdateRequestBodyInterval `json:"interval,omitempty"`

	// LockDate Date to automatically lock the card. If lock date has passed, set to a future date or to null to unlock the card.
	LockDate *time.Time `json:"lock_date"`
	PolicyId *string    `json:"policy_id,omitempty"`

	// TransactionAmountLimit Max amount limit per transaction.
	TransactionAmountLimit *ApiCardSpendingRestrictionsUpdateRequestBody_TransactionAmountLimit `json:"transaction_amount_limit,omitempty"`
	VendorBlacklist        *[]openapi_types.UUID                                                `json:"vendor_blacklist,omitempty"`
	VendorWhitelist        *[]openapi_types.UUID                                                `json:"vendor_whitelist,omitempty"`
}

// ApiCardSpendingRestrictionsUpdateRequestBodyAmount0 defines model for .
type ApiCardSpendingRestrictionsUpdateRequestBodyAmount0 = string

// ApiCardSpendingRestrictionsUpdateRequestBodyAmount1 defines model for .
type ApiCardSpendingRestrictionsUpdateRequestBodyAmount1 = float32

// ApiCardSpendingRestrictionsUpdateRequestBody_Amount Amount limit total per interval.
type ApiCardSpendingRestrictionsUpdateRequestBody_Amount struct {
	union json.RawMessage
}

// ApiCardSpendingRestrictionsUpdateRequestBodyInterval Time interval to apply limit to.
type ApiCardSpendingRestrictionsUpdateRequestBodyInterval string

// ApiCardSpendingRestrictionsUpdateRequestBodyTransactionAmountLimit0 defines model for .
type ApiCardSpendingRestrictionsUpdateRequestBodyTransactionAmountLimit0 = string

// ApiCardSpendingRestrictionsUpdateRequestBodyTransactionAmountLimit1 defines model for .
type ApiCardSpendingRestrictionsUpdateRequestBodyTransactionAmountLimit1 = float32

// ApiCardSpendingRestrictionsUpdateRequestBody_TransactionAmountLimit Max amount limit per transaction.
type ApiCardSpendingRestrictionsUpdateRequestBody_TransactionAmountLimit struct {
	union json.RawMessage
}

// ApiCardUpdateRequestBody defines model for ApiCardUpdateRequestBody.
type ApiCardUpdateRequestBody struct {
	// CardProgramId Specify a card program to link with.
	//             This will override the card's spending restrictions with those of the card program.
	//             Pass card_program_id = None to detach the card's current card program.
	//
	//             If the card_program_id field is specified, then the card program's changes will override any other changes.
	//             For example, if both spending_restrictions and card_program_id are passed, then the new spending restrictions
	//             will match those of the card program (not the passed spending restrictions).
	//
	CardProgramId *openapi_types.UUID `json:"card_program_id"`

	// DisplayName Cosmetic display name of the card.
	DisplayName *string `json:"display_name,omitempty"`

	// HasNotificationsEnabled Flag to set to enable or disable notifications.
	HasNotificationsEnabled *bool `json:"has_notifications_enabled,omitempty"`

	// NewUserId Specify id for new card owner.
	NewUserId *openapi_types.UUID `json:"new_user_id"`

	// SpendingRestrictions Modify spending restrictions. Only the fields to be modified need to be passed (so fields that will stay the same do not have to be passed).
	SpendingRestrictions *ApiCardSpendingRestrictionsUpdateRequestBody `json:"spending_restrictions,omitempty"`
}

// ApiDepartmentCreateRequestBody defines model for ApiDepartmentCreateRequestBody.
type ApiDepartmentCreateRequestBody struct {
	Name string `json:"name"`
}

// ApiDepartmentUpdateRequestBody defines model for ApiDepartmentUpdateRequestBody.
type ApiDepartmentUpdateRequestBody struct {
	Id   openapi_types.UUID `json:"id"`
	Name string             `json:"name"`
}

// ApiLocationCreateRequestBody defines model for ApiLocationCreateRequestBody.
type ApiLocationCreateRequestBody struct {
	Name string `json:"name"`
}

// ApiLocationUpdateRequestBody defines model for ApiLocationUpdateRequestBody.
type ApiLocationUpdateRequestBody struct {
	Name string `json:"name"`
}

// ApiPermittedSpendTypesDump defines model for ApiPermittedSpendTypesDump.
type ApiPermittedSpendTypesDump struct {
	// PrimaryCardEnabled Indicates whether the user's physical card can be linked to this limit.
	PrimaryCardEnabled bool `json:"primary_card_enabled"`

	// ReimbursementsEnabled Indicates whether reimbursements can be submitted against this limit.
	ReimbursementsEnabled bool `json:"reimbursements_enabled"`
}

// ApiPermittedSpendTypesRequestBody defines model for ApiPermittedSpendTypesRequestBody.
type ApiPermittedSpendTypesRequestBody struct {
	// PrimaryCardEnabled Dictates whether the user's physical card can be linked to this limit.
	PrimaryCardEnabled bool `json:"primary_card_enabled"`

	// ReimbursementsEnabled Dictates whether reimbursements can be submitted against this limit.
	ReimbursementsEnabled bool `json:"reimbursements_enabled"`
}

// ApiReceiptIntegrationOptedOutEmailCreateRequestBody defines model for ApiReceiptIntegrationOptedOutEmailCreateRequestBody.
type ApiReceiptIntegrationOptedOutEmailCreateRequestBody struct {
	BusinessId int    `json:"business_id"`
	Email      string `json:"email"`
}

// ApiReceiptIntegrationOptedOutEmailResource defines model for ApiReceiptIntegrationOptedOutEmailResource.
type ApiReceiptIntegrationOptedOutEmailResource struct {
	Email *openapi_types.Email `json:"email,omitempty"`
	Id    *openapi_types.UUID  `json:"id,omitempty"`
}

// ApiReceiptIntegrationOptedOutEmailResourceRequestBody defines model for ApiReceiptIntegrationOptedOutEmailResourceRequestBody.
type ApiReceiptIntegrationOptedOutEmailResourceRequestBody struct {
	Email *openapi_types.Email `json:"email,omitempty"`
	Id    *openapi_types.UUID  `json:"id,omitempty"`
}

// ApiReimbursementAccountingCategoryInfo defines model for ApiReimbursementAccountingCategoryInfo.
type ApiReimbursementAccountingCategoryInfo struct {
	// ExternalId external id of accounting field; It should uniquely identify an accounting field on the client end.
	ExternalId *string `json:"external_id,omitempty"`

	// Id ID that uniquely identifies an accounting field within Ramp
	Id *string `json:"id,omitempty"`

	// Name name of accounting field
	Name *string `json:"name,omitempty"`

	// Type accounting field type
	Type *ApiReimbursementAccountingCategoryInfoType `json:"type,omitempty"`
}

// ApiReimbursementAccountingCategoryInfoType accounting field type
type ApiReimbursementAccountingCategoryInfoType string

// ApiReimbursementAccountingFieldSelection defines model for ApiReimbursementAccountingFieldSelection.
type ApiReimbursementAccountingFieldSelection struct {
	// CategoryInfo information about the accounting category (or accounting field).
	CategoryInfo *ApiReimbursementAccountingCategoryInfo `json:"category_info,omitempty"`

	// ExternalId external id of accounting field option; It should uniquely identify an accounting field option on the client end.
	ExternalId *string `json:"external_id,omitempty"`

	// Id ID that uniquely identifies an accounting field option within Ramp
	Id *string `json:"id,omitempty"`

	// Name name of accounting field option
	Name *string `json:"name,omitempty"`

	// Type Accounting field type
	Type *ApiReimbursementAccountingFieldSelectionType `json:"type,omitempty"`
}

// ApiReimbursementAccountingFieldSelectionType Accounting field type
type ApiReimbursementAccountingFieldSelectionType string

// ApiReimbursementLineItem defines model for ApiReimbursementLineItem.
type ApiReimbursementLineItem struct {
	// AccountingFieldSelections List of accounting field options selected to code the line item.
	AccountingFieldSelections *[]ApiReimbursementAccountingFieldSelection `json:"accounting_field_selections,omitempty"`

	// Amount Amount of the line item
	Amount *CurrencyAmount `json:"amount"`
}

// ApiSalesLeadBusinessDump defines model for ApiSalesLeadBusinessDump.
type ApiSalesLeadBusinessDump struct {
	// BusinessDescription A short description of the business.
	BusinessDescription *string `json:"business_description,omitempty"`

	// BusinessNameDba Doing business as (DBA)
	BusinessNameDba *string `json:"business_name_dba,omitempty"`

	// BusinessNameLegal Legal name of the business.
	BusinessNameLegal *string `json:"business_name_legal,omitempty"`

	// BusinessNameWebsite Business's website.
	BusinessNameWebsite *string `json:"business_name_website,omitempty"`

	// DateOfIncorporation Business's incorporation date.
	DateOfIncorporation *openapi_types.Date `json:"date_of_incorporation,omitempty"`

	// EinNumber Employer Identification Number (EIN).
	EinNumber *string `json:"ein_number,omitempty"`

	// EntityType Type of incorporation.
	EntityType *ApiSalesLeadBusinessDumpEntityType `json:"entity_type,omitempty"`

	// EstimatedMonthlySpend Estimated monthly spend.
	EstimatedMonthlySpend *string `json:"estimated_monthly_spend,omitempty"`

	// Industry Business's industry
	Industry *string `json:"industry,omitempty"`

	// IndustryGroup Business's industry group
	IndustryGroup *string `json:"industry_group,omitempty"`

	// OfficeAddress Office's address.
	OfficeAddress *ApiSalesLeadOfficeAddress `json:"office_address,omitempty"`

	// OfficePhoneNumber Office phone number. Must include country code.
	OfficePhoneNumber *string `json:"office_phone_number,omitempty"`

	// Sector Business's sector
	Sector *string `json:"sector,omitempty"`

	// StateOfIncorporation The state in which the business is incorporated.
	StateOfIncorporation *string `json:"state_of_incorporation,omitempty"`
	SubIndustry          *string `json:"sub_industry,omitempty"`
}

// ApiSalesLeadBusinessDumpEntityType Type of incorporation.
type ApiSalesLeadBusinessDumpEntityType string

// ApiSalesLeadBusinessRequestBody defines model for ApiSalesLeadBusinessRequestBody.
type ApiSalesLeadBusinessRequestBody struct {
	// BusinessDescription A short description of the business.
	BusinessDescription *string `json:"business_description,omitempty"`

	// BusinessNameDba Doing business as (DBA)
	BusinessNameDba string `json:"business_name_dba"`

	// BusinessNameLegal Legal name of the business.
	BusinessNameLegal string `json:"business_name_legal"`

	// BusinessNameWebsite Business's website.
	BusinessNameWebsite *string `json:"business_name_website,omitempty"`

	// DateOfIncorporation Business's incorporation date.
	DateOfIncorporation *openapi_types.Date `json:"date_of_incorporation,omitempty"`

	// EinNumber Employer Identification Number (EIN).
	EinNumber *string `json:"ein_number,omitempty"`

	// EntityType Type of incorporation.
	EntityType *ApiSalesLeadBusinessRequestBodyEntityType `json:"entity_type,omitempty"`

	// EstimatedMonthlySpend Estimated monthly spend.
	EstimatedMonthlySpend *string `json:"estimated_monthly_spend,omitempty"`

	// Industry Business's industry
	Industry *string `json:"industry,omitempty"`

	// IndustryGroup Business's industry group
	IndustryGroup *string `json:"industry_group,omitempty"`

	// OfficeAddress Office's address.
	OfficeAddress *ApiSalesLeadOfficeAddressRequestBody `json:"office_address,omitempty"`

	// OfficePhoneNumber Office phone number. Must include country code.
	OfficePhoneNumber *string `json:"office_phone_number,omitempty"`

	// Sector Business's sector
	Sector *string `json:"sector,omitempty"`

	// StateOfIncorporation The state in which the business is incorporated.
	StateOfIncorporation *string `json:"state_of_incorporation,omitempty"`

	// SubIndustry Business's subindustry
	SubIndustry *string `json:"sub_industry,omitempty"`
}

// ApiSalesLeadBusinessRequestBodyEntityType Type of incorporation.
type ApiSalesLeadBusinessRequestBodyEntityType string

// ApiSalesLeadCreateRequestBody defines model for ApiSalesLeadCreateRequestBody.
type ApiSalesLeadCreateRequestBody struct {
	BusinessInfo *ApiSalesLeadBusinessRequestBody    `json:"business_info,omitempty"`
	Email        string                              `json:"email"`
	ExternalId   string                              `json:"external_id"`
	FirstName    string                              `json:"first_name"`
	LastName     string                              `json:"last_name"`
	Phone        *string                             `json:"phone,omitempty"`
	RedirectUri  string                              `json:"redirect_uri"`
	Source       ApiSalesLeadCreateRequestBodySource `json:"source"`
	State        string                              `json:"state"`
}

// ApiSalesLeadCreateRequestBodySource defines model for ApiSalesLeadCreateRequestBody.Source.
type ApiSalesLeadCreateRequestBodySource string

// ApiSalesLeadOfficeAddress defines model for ApiSalesLeadOfficeAddress.
type ApiSalesLeadOfficeAddress struct {
	OfficeAptSuite      *string `json:"office_apt_suite,omitempty"`
	OfficeCity          *string `json:"office_city,omitempty"`
	OfficeCountry       *string `json:"office_country,omitempty"`
	OfficePostalCode    *string `json:"office_postal_code,omitempty"`
	OfficeState         *string `json:"office_state,omitempty"`
	OfficeStreetAddress *string `json:"office_street_address,omitempty"`
}

// ApiSalesLeadOfficeAddressRequestBody defines model for ApiSalesLeadOfficeAddressRequestBody.
type ApiSalesLeadOfficeAddressRequestBody struct {
	OfficeAptSuite      *string `json:"office_apt_suite,omitempty"`
	OfficeCity          *string `json:"office_city,omitempty"`
	OfficeCountry       *string `json:"office_country,omitempty"`
	OfficePostalCode    *string `json:"office_postal_code,omitempty"`
	OfficeState         *string `json:"office_state,omitempty"`
	OfficeStreetAddress *string `json:"office_street_address,omitempty"`
}

// ApiSpendAllocationBalance defines model for ApiSpendAllocationBalance.
type ApiSpendAllocationBalance struct {
	// Cleared Cleared amount on this limit.
	Cleared *CurrencyAmount `json:"cleared,omitempty"`

	// Pending Pending amount towards this limit.
	Pending *CurrencyAmount `json:"pending,omitempty"`

	// Total Total amount spent on this limit.
	Total *CurrencyAmount `json:"total,omitempty"`
}

// ApiSpendLimitCardResource defines model for ApiSpendLimitCardResource.
type ApiSpendLimitCardResource struct {
	// CardId Unique identifier of the card.
	CardId *openapi_types.UUID `json:"card_id,omitempty"`

	// IsApCard Card created manually by Ramp for high velocity spend
	IsApCard bool `json:"is_ap_card"`

	// ViaNewProductOrService Card created by 'New Product or Service' option
	ViaNewProductOrService bool `json:"via_new_product_or_service"`
}

// ApiSpendLimitCreateRequestBody defines model for ApiSpendLimitCreateRequestBody.
type ApiSpendLimitCreateRequestBody struct {
	// DisplayName Cosmetic display name of the limit.
	DisplayName *string `json:"display_name,omitempty"`

	// Fulfillment Fulfillment details of the limit's card.
	Fulfillment *CardFulfillmentRequestBody `json:"fulfillment,omitempty"`

	// IdempotencyKey An idempotency key is a unique value generated by the client which the server uses to recognize subsequent retries of the same request. To avoid collisions, we encourage clients to use random generated UUIDs.
	IdempotencyKey string `json:"idempotency_key"`

	// PermittedSpendTypes Specifies the permitted spend types.
	PermittedSpendTypes *ApiPermittedSpendTypesRequestBody `json:"permitted_spend_types,omitempty"`

	// SpendProgramId The id of the associated spend program.
	SpendProgramId *openapi_types.UUID `json:"spend_program_id,omitempty"`

	// SpendingRestrictions Specifies the spending restrictions.
	SpendingRestrictions *ApiSpendingRestrictionsRequestBody `json:"spending_restrictions,omitempty"`

	// UserId Unique identifier of the limit owner.
	UserId openapi_types.UUID `json:"user_id"`
}

// ApiSpendLimitDeferredTaskData defines model for ApiSpendLimitDeferredTaskData.
type ApiSpendLimitDeferredTaskData struct {
	// Error An error message if the deferred task fails.
	Error *string `json:"error,omitempty"`

	// SpendLimitId Unique identifier of the subject limit in the deferred task.
	SpendLimitId *openapi_types.UUID `json:"spend_limit_id,omitempty"`
}

// ApiSpendLimitDeferredUpdateRequestBody defines model for ApiSpendLimitDeferredUpdateRequestBody.
type ApiSpendLimitDeferredUpdateRequestBody struct {
	// IdempotencyKey An idempotency key is a unique value generated by the client which the server uses to recognize subsequent retries of the same request. To avoid collisions, we encourage clients to use random generated UUIDs.
	IdempotencyKey string `json:"idempotency_key"`
}

// ApiSpendLimitMember defines model for ApiSpendLimitMember.
type ApiSpendLimitMember struct {
	// UserId The unique identifier of the limit owner.
	UserId *openapi_types.UUID `json:"user_id,omitempty"`
}

// ApiSpendProgramCreateIssuanceRulesRequestBody defines model for ApiSpendProgramCreateIssuanceRulesRequestBody.
type ApiSpendProgramCreateIssuanceRulesRequestBody struct {
	// Automatic Set of rules for having spend programs issued by default to users
	Automatic *ApiSpendProgramIssuanceRulesRequestBody `json:"automatic"`

	// Requestable Set of rules for users requesting spend programs.
	Requestable *ApiSpendProgramIssuanceRulesRequestBody `json:"requestable"`
}

// ApiSpendProgramCreateRequestBody defines model for ApiSpendProgramCreateRequestBody.
type ApiSpendProgramCreateRequestBody struct {
	// Description Description of the spend program.
	Description string `json:"description"`

	// DisplayName Display name of the spend program.
	DisplayName string `json:"display_name"`

	// Icon The template icon for the spend program.
	Icon ApiSpendProgramCreateRequestBodyIcon `json:"icon"`

	// IssuanceRules Spend Program Issuance Rules can be set for requests or default issuance of Limits from a program. Set whether a program is requestable or issued by default for a given set of users and their attributes (department, locations, and custom fields). If you'd like to give these permissions to all employees, you can set `applies_to_all` to `True`. Feel free to ignore this if you don't want any custom requestability or issuance logic. Spend Program Issuance Rules can be set for requests or default issuance of Limits from a program. Set whether a program is requestable or issued by default for a given set of users and their attributes (department, locations, and custom fields). If you'd like to give these permissions to all employees, you can set `applies_to_all` to `True`. Feel free to ignore this if you don't want any custom requestability or issuance logic.
	IssuanceRules *ApiSpendProgramCreateIssuanceRulesRequestBody `json:"issuance_rules"`

	// IssuePhysicalCardIfNeeded Dictates whether the spend program should issue a physical card if the user does not have one.
	IssuePhysicalCardIfNeeded *bool `json:"issue_physical_card_if_needed,omitempty"`

	// PermittedSpendTypes Specifies the permitted spend types for the spend program.
	PermittedSpendTypes ApiPermittedSpendTypesRequestBody `json:"permitted_spend_types"`

	// SpendingRestrictions A set of restrictions imposed on the spend program.
	SpendingRestrictions ApiSpendingRestrictionsRequestBody `json:"spending_restrictions"`
}

// ApiSpendProgramCreateRequestBodyIcon The template icon for the spend program.
type ApiSpendProgramCreateRequestBodyIcon string

// ApiSpendProgramIssuanceRulesRequestBody defines model for ApiSpendProgramIssuanceRulesRequestBody.
type ApiSpendProgramIssuanceRulesRequestBody struct {
	// AppliesToAll Dictates whether this rule should apply to all employees or not (if True, location_ids, department_ids, and user_custom_field_ids should be null).
	AppliesToAll *bool `json:"applies_to_all,omitempty"`

	// DepartmentIds List of departments whose users are able to request or be issued this spend program.
	DepartmentIds *[]openapi_types.UUID `json:"department_ids,omitempty"`

	// LocationIds List of locations whose users are able to request or be issued this spend program.
	LocationIds        *[]openapi_types.UUID `json:"location_ids,omitempty"`
	UserCustomFieldIds *[]openapi_types.UUID `json:"user_custom_field_ids,omitempty"`
}

// ApiSpendProgramResource defines model for ApiSpendProgramResource.
type ApiSpendProgramResource struct {
	// Description Description of the spend program.
	Description *string `json:"description,omitempty"`

	// DisplayName Display name of the spend program.
	DisplayName *string `json:"display_name,omitempty"`

	// Icon The template icon for the spend program.
	Icon *ApiSpendProgramResourceIcon `json:"icon,omitempty"`

	// Id Unique identifier of the spend program.
	Id openapi_types.UUID `json:"id"`

	// IssuePhysicalCardIfNeeded Indicates whether the spend program should issue a physical card if the user does not have one.
	IssuePhysicalCardIfNeeded *bool `json:"issue_physical_card_if_needed,omitempty"`

	// PermittedSpendTypes Permitted spend types for the spend program.
	PermittedSpendTypes *ApiPermittedSpendTypesDump `json:"permitted_spend_types,omitempty"`

	// Restrictions A set of restrictions imposed on the spend program.
	Restrictions *ApiSpendingRestrictionsDump `json:"restrictions,omitempty"`
}

// ApiSpendProgramResourceIcon The template icon for the spend program.
type ApiSpendProgramResourceIcon string

// ApiSpendingRestrictionsDump defines model for ApiSpendingRestrictionsDump.
type ApiSpendingRestrictionsDump struct {
	// AllowedCategories  List of Ramp category codes allowed for the limit.
	AllowedCategories *[]int `json:"allowed_categories,omitempty"`

	// AllowedVendors List of merchants allowed for the limit.
	AllowedVendors *[]openapi_types.UUID `json:"allowed_vendors,omitempty"`

	// AutoLockDate Date to automatically to lock the limit.
	AutoLockDate *time.Time `json:"auto_lock_date,omitempty"`

	// BlockedCategories List of Ramp category codes blocked for the limit.
	BlockedCategories *[]int `json:"blocked_categories,omitempty"`

	// BlockedVendors List of merchants  blocked for the limit.
	BlockedVendors *[]openapi_types.UUID `json:"blocked_vendors,omitempty"`

	// Interval Time interval the limit is applied on.
	Interval *ApiSpendingRestrictionsDumpInterval `json:"interval,omitempty"`

	// Limit Amount limit total per interval denominated in cents. Currency is USD.
	Limit *CurrencyAmount `json:"limit,omitempty"`

	// NextIntervalReset Date and time for the next interval reset.
	NextIntervalReset *time.Time `json:"next_interval_reset,omitempty"`

	// StartOfInterval Date and time for the start of the current interval.
	StartOfInterval *time.Time `json:"start_of_interval,omitempty"`

	// TemporaryLimit Temporary limit total per interval.
	TemporaryLimit *CurrencyAmount `json:"temporary_limit,omitempty"`

	// TransactionAmountLimit Max amount allowed on a single transaction.
	TransactionAmountLimit *CurrencyAmount `json:"transaction_amount_limit,omitempty"`
}

// ApiSpendingRestrictionsDumpInterval Time interval the limit is applied on.
type ApiSpendingRestrictionsDumpInterval string

// ApiSpendingRestrictionsRequestBody defines model for ApiSpendingRestrictionsRequestBody.
type ApiSpendingRestrictionsRequestBody struct {
	// AllowedCategories  List of Ramp category codes allowed for the limit.
	AllowedCategories *[]int `json:"allowed_categories,omitempty"`

	// AllowedVendors List of merchants allowed for the limit.
	AllowedVendors *[]openapi_types.UUID `json:"allowed_vendors,omitempty"`

	// BlockedCategories List of Ramp category codes blocked for the limit.
	BlockedCategories *[]int    `json:"blocked_categories,omitempty"`
	BlockedMccCodes   *[]string `json:"blocked_mcc_codes,omitempty"`

	// BlockedVendors List of merchants  blocked for the limit.
	BlockedVendors *[]openapi_types.UUID `json:"blocked_vendors,omitempty"`

	// Interval Time interval to apply limit to.
	Interval ApiSpendingRestrictionsRequestBodyInterval `json:"interval"`

	// Limit Total amount limit per interval. Currently we expect the currency to be USD and the amount need to be denominated in cents.
	Limit CurrencyAmountRequestBody `json:"limit"`

	// LockDate Date to automatically lock the card. If lock date has passed, set to a future date or to null to unlock the card.
	LockDate *time.Time `json:"lock_date,omitempty"`

	// TransactionAmountLimit Max amount per transaction. Currently we expect the currency to be USD and the amount need to be denominated in cents.
	TransactionAmountLimit *CurrencyAmountRequestBody `json:"transaction_amount_limit,omitempty"`
}

// ApiSpendingRestrictionsRequestBodyInterval Time interval to apply limit to.
type ApiSpendingRestrictionsRequestBodyInterval string

// ApiStatementItem defines model for ApiStatementItem.
type ApiStatementItem struct {
	Id   *openapi_types.UUID   `json:"id,omitempty"`
	Type *ApiStatementItemType `json:"type,omitempty"`
}

// ApiStatementItemType defines model for ApiStatementItem.Type.
type ApiStatementItemType string

// ApiSuspensionDump defines model for ApiSuspensionDump.
type ApiSuspensionDump struct {
	// ActingUserId Unique identifier of the user who placed the suspension.
	ActingUserId *openapi_types.UUID `json:"acting_user_id,omitempty"`

	// InsertedAt Date and time at which suspension was placed.
	InsertedAt *time.Time `json:"inserted_at,omitempty"`

	// SuspendedByRamp Whether the suspension is placed by Ramp.
	SuspendedByRamp *bool `json:"suspended_by_ramp,omitempty"`
}

// ApiTransactionAccountingCategoryInfo defines model for ApiTransactionAccountingCategoryInfo.
type ApiTransactionAccountingCategoryInfo struct {
	// ExternalId external id of accounting field; It should uniquely identify an accounting field on the client end.
	ExternalId *string `json:"external_id,omitempty"`

	// Id ID that uniquely identifies an accounting field within Ramp
	Id *string `json:"id,omitempty"`

	// Name name of accounting field
	Name *string `json:"name,omitempty"`

	// Type accounting field type
	Type *ApiTransactionAccountingCategoryInfoType `json:"type,omitempty"`
}

// ApiTransactionAccountingCategoryInfoType accounting field type
type ApiTransactionAccountingCategoryInfoType string

// ApiTransactionAccountingFieldSelection defines model for ApiTransactionAccountingFieldSelection.
type ApiTransactionAccountingFieldSelection struct {
	// CategoryInfo information about the accounting category (or accounting field).
	CategoryInfo *ApiTransactionAccountingCategoryInfo `json:"category_info,omitempty"`

	// ExternalId external id of accounting field option; It should uniquely identify an accounting field option on the client end.
	ExternalId *string `json:"external_id,omitempty"`

	// Id ID that uniquely identifies an accounting field option within Ramp
	Id *string `json:"id,omitempty"`

	// Name name of accounting field option
	Name *string `json:"name,omitempty"`

	// Type Accounting field type
	Type *ApiTransactionAccountingFieldSelectionType `json:"type,omitempty"`
}

// ApiTransactionAccountingFieldSelectionType Accounting field type
type ApiTransactionAccountingFieldSelectionType string

// ApiTransactionCardHolder defines model for ApiTransactionCardHolder.
type ApiTransactionCardHolder struct {
	// DepartmentId ID of the card holder's department.
	DepartmentId *string `json:"department_id,omitempty"`

	// DepartmentName Name of the card holder's deparment.
	DepartmentName *string `json:"department_name,omitempty"`

	// FirstName Card holder's first name.
	FirstName *string `json:"first_name,omitempty"`

	// LastName Card holder's last name.
	LastName *string `json:"last_name,omitempty"`

	// LocationId ID of the card holder's location.
	LocationId *string `json:"location_id,omitempty"`

	// LocationName Name of the card holder's location.
	LocationName *string `json:"location_name,omitempty"`

	// UserId Card holder's ID.
	UserId *string `json:"user_id,omitempty"`
}

// ApiTransactionDeclineDetails defines model for ApiTransactionDeclineDetails.
type ApiTransactionDeclineDetails struct {
	Amount *float32                            `json:"amount,omitempty"`
	Reason *ApiTransactionDeclineDetailsReason `json:"reason,omitempty"`
}

// ApiTransactionDeclineDetailsReason defines model for ApiTransactionDeclineDetails.Reason.
type ApiTransactionDeclineDetailsReason string

// ApiTransactionDispute defines model for ApiTransactionDispute.
type ApiTransactionDispute struct {
	// CreatedAt Time at which the dispute is created, presented in ISO8601 format.
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Id Uniquely identifies a transaction dispute.
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Memo Free form text regarding the dispute.
	Memo *string `json:"memo,omitempty"`

	// Type The dispute type; It could be one of the following values: RESOLVED_BY_RAMP, CANCELLED_BY_CUSTOMER, CREATED_MERCHANT_ERROR and CREATED_UNRECOGNIZED_CHARGE.
	Type *string `json:"type,omitempty"`
}

// ApiTransactionLineItem defines model for ApiTransactionLineItem.
type ApiTransactionLineItem struct {
	// AccountingFieldSelections List of accounting field options selected to code the line item.
	AccountingFieldSelections *[]ApiTransactionAccountingFieldSelection `json:"accounting_field_selections,omitempty"`

	// Amount Amount of the line item, denominated in the currency that the transaction was settled in.
	Amount *CurrencyAmount `json:"amount"`
}

// ApiTransactionPolicyViolation defines model for ApiTransactionPolicyViolation.
type ApiTransactionPolicyViolation struct {
	// CreatedAt Time at which the policy violation is created, presented in ISO8601 format.
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Id Uniquely identifies a policy violation.
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Memo Free form text regarding the policy violation.
	Memo *string `json:"memo,omitempty"`

	// Type Type of the policy violation.
	Type *string `json:"type,omitempty"`
}

// ApiUserCreateRequestBody defines model for ApiUserCreateRequestBody.
type ApiUserCreateRequestBody struct {
	// DepartmentId Unique identifier of the employee's department
	DepartmentId *openapi_types.UUID `json:"department_id,omitempty"`

	// DirectManagerId Unique identifier of the employee's direct manager
	DirectManagerId *openapi_types.UUID `json:"direct_manager_id,omitempty"`

	// Email The employee's email address
	Email openapi_types.Email `json:"email"`

	// FirstName First name of the employee
	FirstName string `json:"first_name"`

	// IdempotencyKey an idempotency key is a unique value generated by the client which the server uses to recognize subsequent retries of the same request. To avoid collisions, we encourage clients to use random generated UUIDs.
	IdempotencyKey *string `json:"idempotency_key,omitempty"`

	// LastName Last name of the employee
	LastName string `json:"last_name"`

	// LocationId Unique identifier of the employee's location
	LocationId *openapi_types.UUID `json:"location_id,omitempty"`

	// Role The employee's role; It could be one of the following values: Admin, Cardholder, Bookkeeper; Note that Owner is not a invitable role.
	Role ApiUserCreateRequestBodyRole `json:"role"`
}

// ApiUserCreateRequestBodyRole The employee's role; It could be one of the following values: Admin, Cardholder, Bookkeeper; Note that Owner is not a invitable role.
type ApiUserCreateRequestBodyRole string

// ApiUserDeferredTaskData defines model for ApiUserDeferredTaskData.
type ApiUserDeferredTaskData struct {
	// Error An error message if the deferred task fails
	Error *string `json:"error,omitempty"`

	// UserId The subject employee's ID of the deferred task.
	UserId *openapi_types.UUID `json:"user_id,omitempty"`
}

// ApiUserUpdateRequestBody defines model for ApiUserUpdateRequestBody.
type ApiUserUpdateRequestBody struct {
	// DepartmentId Unique identifier of the employee's department
	DepartmentId *openapi_types.UUID `json:"department_id,omitempty"`

	// DirectManagerId Unique identifier of the employee's direct manager
	DirectManagerId *openapi_types.UUID `json:"direct_manager_id,omitempty"`

	// LocationId Unique identifier of the employee's location
	LocationId *openapi_types.UUID `json:"location_id,omitempty"`

	// Role The employee's role; It could be one of the following values: Admin, Cardholder, Bookkeeper; Note that Owner is not a permissible value.
	Role *ApiUserUpdateRequestBodyRole `json:"role,omitempty"`
}

// ApiUserUpdateRequestBodyRole The employee's role; It could be one of the following values: Admin, Cardholder, Bookkeeper; Note that Owner is not a permissible value.
type ApiUserUpdateRequestBodyRole string

// Business defines model for Business.
type Business struct {
	Active                  *bool                   `json:"active,omitempty"`
	BillingAddress          *map[string]interface{} `json:"billing_address,omitempty"`
	BusinessNameLegal       *string                 `json:"business_name_legal,omitempty"`
	BusinessNameOnCard      *string                 `json:"business_name_on_card,omitempty"`
	CreatedTime             *time.Time              `json:"created_time,omitempty"`
	EnforceSso              *bool                   `json:"enforce_sso,omitempty"`
	Id                      *openapi_types.UUID     `json:"id,omitempty"`
	InitialApprovedLimit    *int                    `json:"initial_approved_limit,omitempty"`
	IsIntegratedWithSlack   *bool                   `json:"is_integrated_with_slack,omitempty"`
	IsReimbursementsEnabled *bool                   `json:"is_reimbursements_enabled,omitempty"`
	LimitLocked             *bool                   `json:"limit_locked,omitempty"`
	Phone                   *string                 `json:"phone,omitempty"`
	Website                 *string                 `json:"website,omitempty"`
}

// BusinessBalance defines model for BusinessBalance.
type BusinessBalance struct {
	AvailableCardLimit           *float32 `json:"available_card_limit,omitempty"`
	AvailableFlexLimit           *float32 `json:"available_flex_limit,omitempty"`
	BalanceIncludingPending      *float32 `json:"balance_including_pending,omitempty"`
	CardBalanceExcludingPending  *float32 `json:"card_balance_excluding_pending,omitempty"`
	CardBalanceIncludingPending  *float32 `json:"card_balance_including_pending,omitempty"`
	CardLimit                    *float32 `json:"card_limit,omitempty"`
	FlexBalance                  *float32 `json:"flex_balance,omitempty"`
	FlexLimit                    *float32 `json:"flex_limit,omitempty"`
	FloatBalanceExcludingPending *float32 `json:"float_balance_excluding_pending,omitempty"`
	GlobalLimit                  *float32 `json:"global_limit,omitempty"`
	MaxBalance                   *float32 `json:"max_balance,omitempty"`
	NextBillingDate              *string  `json:"next_billing_date,omitempty"`
	PrevBillingDate              *string  `json:"prev_billing_date,omitempty"`
	StatementBalance             *float32 `json:"statement_balance,omitempty"`
}

// Card defines model for Card.
type Card struct {
	// CardProgramId Unique identifier of the card program.
	CardProgramId *openapi_types.UUID `json:"card_program_id"`

	// CardholderId Unique identifier of the card holder.
	CardholderId *openapi_types.UUID `json:"cardholder_id,omitempty"`

	// CardholderName Card holder's full name.
	CardholderName *openapi_types.UUID `json:"cardholder_name,omitempty"`
	DisplayName    *string             `json:"display_name,omitempty"`

	// Fulfillment Fulfillment details of a physical Ramp card.
	Fulfillment *ApiCardFulfillment `json:"fulfillment,omitempty"`

	// HasProgramOverridden Whether the card has overridden the default settings from its card program.
	HasProgramOverridden *bool `json:"has_program_overridden,omitempty"`

	// Id Unique identifier of the card.
	Id         *openapi_types.UUID `json:"id,omitempty"`
	IsPhysical *bool               `json:"is_physical,omitempty"`
	LastFour   string              `json:"last_four"`

	// SpendingRestrictions Specifies the spend restrictions on a Ramp card.
	SpendingRestrictions *ApiCardSpendingRestrictionsDump `json:"spending_restrictions,omitempty"`

	// State State of the card
	State *CardState `json:"state,omitempty"`
}

// CardState State of the card
type CardState string

// CardDeferredTask defines model for CardDeferredTask.
type CardDeferredTask struct {
	// Data Detailed data of the deferred task.
	Data *ApiCardDeferredTaskData `json:"data,omitempty"`

	// Id Unique identifier of the deferred task.
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Status Status of the deferred task. It could be one of the following values: STARTED, IN_PROGRESS, ERROR, SUCCESS
	Status *string `json:"status,omitempty"`
}

// CardFulfillmentRequestBody defines model for CardFulfillmentRequestBody.
type CardFulfillmentRequestBody struct {
	CardPersonalization *CardPersonalizationRequestBody `json:"card_personalization,omitempty"`
	Shipping            *CardShippingRequestBody        `json:"shipping,omitempty"`
}

// CardPersonalization defines model for CardPersonalization.
type CardPersonalization struct {
	Text *CardPersonalizationText `json:"text,omitempty"`
}

// CardPersonalizationNameLine defines model for CardPersonalizationNameLine.
type CardPersonalizationNameLine struct {
	Value *string `json:"value,omitempty"`
}

// CardPersonalizationNameLineRequestBody defines model for CardPersonalizationNameLineRequestBody.
type CardPersonalizationNameLineRequestBody struct {
	Value *string `json:"value,omitempty"`
}

// CardPersonalizationRequestBody defines model for CardPersonalizationRequestBody.
type CardPersonalizationRequestBody struct {
	Text *CardPersonalizationTextRequestBody `json:"text,omitempty"`
}

// CardPersonalizationText defines model for CardPersonalizationText.
type CardPersonalizationText struct {
	NameLine1 *CardPersonalizationNameLine `json:"name_line_1,omitempty"`
	NameLine2 *CardPersonalizationNameLine `json:"name_line_2,omitempty"`
}

// CardPersonalizationTextRequestBody defines model for CardPersonalizationTextRequestBody.
type CardPersonalizationTextRequestBody struct {
	NameLine1 *CardPersonalizationNameLineRequestBody `json:"name_line_1,omitempty"`
	NameLine2 *CardPersonalizationNameLineRequestBody `json:"name_line_2,omitempty"`
}

// CardShipping defines model for CardShipping.
type CardShipping struct {
	Method                            *string                                        `json:"method,omitempty"`
	RecipientAddress                  *CardShippingAddress                           `json:"recipient_address,omitempty"`
	RecipientAddressVerificationState *CardShippingRecipientAddressVerificationState `json:"recipient_address_verification_state,omitempty"`
	ReturnAddress                     *CardShippingAddress                           `json:"return_address,omitempty"`
}

// CardShippingRecipientAddressVerificationState defines model for CardShipping.RecipientAddressVerificationState.
type CardShippingRecipientAddressVerificationState string

// CardShippingAddress defines model for CardShippingAddress.
type CardShippingAddress struct {
	Address1   string  `json:"address1"`
	Address2   *string `json:"address2,omitempty"`
	City       string  `json:"city"`
	Country    string  `json:"country"`
	FirstName  string  `json:"first_name"`
	LastName   string  `json:"last_name"`
	Phone      *string `json:"phone,omitempty"`
	PostalCode string  `json:"postal_code"`
	State      *string `json:"state,omitempty"`
}

// CardShippingAddressRequestBody defines model for CardShippingAddressRequestBody.
type CardShippingAddressRequestBody struct {
	Address1   string  `json:"address1"`
	Address2   *string `json:"address2,omitempty"`
	City       string  `json:"city"`
	Country    string  `json:"country"`
	FirstName  string  `json:"first_name"`
	LastName   string  `json:"last_name"`
	Phone      *string `json:"phone,omitempty"`
	PostalCode string  `json:"postal_code"`
	State      *string `json:"state,omitempty"`
}

// CardShippingRequestBody defines model for CardShippingRequestBody.
type CardShippingRequestBody struct {
	Method                            *string                                                   `json:"method,omitempty"`
	RecipientAddress                  *CardShippingAddressRequestBody                           `json:"recipient_address,omitempty"`
	RecipientAddressVerificationState *CardShippingRequestBodyRecipientAddressVerificationState `json:"recipient_address_verification_state,omitempty"`
	ReturnAddress                     *CardShippingAddressRequestBody                           `json:"return_address,omitempty"`
}

// CardShippingRequestBodyRecipientAddressVerificationState defines model for CardShippingRequestBody.RecipientAddressVerificationState.
type CardShippingRequestBodyRecipientAddressVerificationState string

// Cashback defines model for Cashback.
type Cashback struct {
	// Amount Dollar amount of the cashback payment.
	Amount    *CurrencyAmount     `json:"amount,omitempty"`
	CreatedAt *time.Time          `json:"created_at,omitempty"`
	Id        *openapi_types.UUID `json:"id,omitempty"`
}

// CurrencyAmount defines model for CurrencyAmount.
type CurrencyAmount struct {
	// Amount the amount of money represented in the smallest denomination of the currency. For example, when the currency is USD, then the amount is expressed in cents.
	Amount int `json:"amount"`

	// CurrencyCode The type of currency, in ISO 4217 format. e.g. USD for US dollars
	CurrencyCode string `json:"currency_code"`
}

// CurrencyAmountRequestBody defines model for CurrencyAmountRequestBody.
type CurrencyAmountRequestBody struct {
	// Amount the amount of money represented in the smallest denomination of the currency. For example, when the currency is USD, then the amount is expressed in cents.
	Amount int `json:"amount"`

	// CurrencyCode The type of currency, in ISO 4217 format. e.g. USD for US dollars
	CurrencyCode *string `json:"currency_code,omitempty"`
}

// CustomFieldOption defines model for CustomFieldOption.
type CustomFieldOption struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`
	Id        *string    `json:"id,omitempty"`
	IsActive  *bool      `json:"is_active,omitempty"`

	// RampId id to uniquely identify a custom field option within Ramp system
	RampId    *openapi_types.UUID `json:"ramp_id,omitempty"`
	UpdatedAt *time.Time          `json:"updated_at,omitempty"`

	// Value A vendor is a person or business that provides goods or services
	Value *string `json:"value,omitempty"`
}

// DeferredTaskUUID defines model for DeferredTaskUUID.
type DeferredTaskUUID struct {
	// Id ID of the deferred task.
	Id openapi_types.UUID `json:"id"`
}

// Department defines model for Department.
type Department struct {
	Id   openapi_types.UUID `json:"id"`
	Name string             `json:"name"`
}

// DeveloperAPINestedPage defines model for DeveloperAPINestedPage.
type DeveloperAPINestedPage struct {
	// Next the query to get to the next page; it is in the format of <BASE_URL>?<new_params>
	Next *string `json:"next"`
}

// FieldOption defines model for FieldOption.
type FieldOption struct {
	Id string `json:"id"`

	// Value e.g. Employees:Salaries & Wages
	Value string `json:"value"`
}

// GLAccount defines model for GLAccount.
type GLAccount struct {
	Classification GLAccountClassification `json:"classification"`

	// Code e.g. 400-100.
	Code *string `json:"code,omitempty"`
	Id   string  `json:"id"`

	// Name e.g. Travel : Travel - Lodging.
	Name string `json:"name"`
}

// GLAccountClassification defines model for GLAccount.Classification.
type GLAccountClassification string

// GeneralLedgerAccount defines model for GeneralLedgerAccount.
type GeneralLedgerAccount struct {
	Classification *GeneralLedgerAccountClassification `json:"classification,omitempty"`

	// Code e.g. 400-100.
	Code      *string    `json:"code,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	Id        *string    `json:"id,omitempty"`
	IsActive  *bool      `json:"is_active,omitempty"`

	// Name e.g. Travel : Travel - Lodging.
	Name *string `json:"name,omitempty"`

	// RampId id to uniquely identify a general ledger account within Ramp system
	RampId    *openapi_types.UUID `json:"ramp_id,omitempty"`
	UpdatedAt *time.Time          `json:"updated_at,omitempty"`
}

// GeneralLedgerAccountClassification defines model for GeneralLedgerAccount.Classification.
type GeneralLedgerAccountClassification string

// Lead defines model for Lead.
type Lead struct {
	BusinessInfo               *ApiSalesLeadBusinessDump       `json:"business_info,omitempty"`
	CreatedAt                  *time.Time                      `json:"created_at,omitempty"`
	Email                      *string                         `json:"email,omitempty"`
	ExternalId                 string                          `json:"external_id"`
	FinancingApplicationStatus *LeadFinancingApplicationStatus `json:"financing_application_status,omitempty"`
	FirstName                  *string                         `json:"first_name,omitempty"`
	Id                         *openapi_types.UUID             `json:"id,omitempty"`
	LastName                   *string                         `json:"last_name,omitempty"`
	Phone                      *string                         `json:"phone,omitempty"`
	Source                     LeadSource                      `json:"source"`
	UpdatedAt                  *time.Time                      `json:"updated_at,omitempty"`
}

// LeadFinancingApplicationStatus defines model for Lead.FinancingApplicationStatus.
type LeadFinancingApplicationStatus string

// LeadSource defines model for Lead.Source.
type LeadSource string

// Location defines model for Location.
type Location struct {
	Id   openapi_types.UUID `json:"id"`
	Name string             `json:"name"`
}

// Memo defines model for Memo.
type Memo struct {
	Id   *openapi_types.UUID `json:"id,omitempty"`
	Memo *string             `json:"memo,omitempty"`
}

// Merchant defines model for Merchant.
type Merchant struct {
	Id             *openapi_types.UUID `json:"id,omitempty"`
	MerchantName   *string             `json:"merchant_name,omitempty"`
	SkCategoryName *string             `json:"sk_category_name"`
}

// PaginatedResponseApiAccountingCustomFieldOptionResourceSchema defines model for PaginatedResponseApiAccountingCustomFieldOptionResourceSchema.
type PaginatedResponseApiAccountingCustomFieldOptionResourceSchema struct {
	Data []CustomFieldOption    `json:"data"`
	Page DeveloperAPINestedPage `json:"page"`
}

// PaginatedResponseApiAccountingCustomFieldResourceSchema defines model for PaginatedResponseApiAccountingCustomFieldResourceSchema.
type PaginatedResponseApiAccountingCustomFieldResourceSchema struct {
	Data []ApiAccountingCustomFieldResource `json:"data"`
	Page DeveloperAPINestedPage             `json:"page"`
}

// PaginatedResponseApiAccountingGLAccountResourceSchema defines model for PaginatedResponseApiAccountingGLAccountResourceSchema.
type PaginatedResponseApiAccountingGLAccountResourceSchema struct {
	Data []GeneralLedgerAccount `json:"data"`
	Page DeveloperAPINestedPage `json:"page"`
}

// PaginatedResponseApiAccountingSubsidiaryResourceSchema defines model for PaginatedResponseApiAccountingSubsidiaryResourceSchema.
type PaginatedResponseApiAccountingSubsidiaryResourceSchema struct {
	Data []Subsidiary           `json:"data"`
	Page DeveloperAPINestedPage `json:"page"`
}

// PaginatedResponseApiAccountingVendorResourceSchema defines model for PaginatedResponseApiAccountingVendorResourceSchema.
type PaginatedResponseApiAccountingVendorResourceSchema struct {
	Data []VendorAccount        `json:"data"`
	Page DeveloperAPINestedPage `json:"page"`
}

// PaginatedResponseApiCardProgramResourceSchema defines model for PaginatedResponseApiCardProgramResourceSchema.
type PaginatedResponseApiCardProgramResourceSchema struct {
	Data []ApiCardProgramResource `json:"data"`
	Page DeveloperAPINestedPage   `json:"page"`
}

// PaginatedResponseApiCardResourceSchema defines model for PaginatedResponseApiCardResourceSchema.
type PaginatedResponseApiCardResourceSchema struct {
	Data []Card                 `json:"data"`
	Page DeveloperAPINestedPage `json:"page"`
}

// PaginatedResponseApiCashbackResourceSchema defines model for PaginatedResponseApiCashbackResourceSchema.
type PaginatedResponseApiCashbackResourceSchema struct {
	Data []Cashback             `json:"data"`
	Page DeveloperAPINestedPage `json:"page"`
}

// PaginatedResponseApiDepartmentResourceSchema defines model for PaginatedResponseApiDepartmentResourceSchema.
type PaginatedResponseApiDepartmentResourceSchema struct {
	Data []Department           `json:"data"`
	Page DeveloperAPINestedPage `json:"page"`
}

// PaginatedResponseApiLocationResourceSchema defines model for PaginatedResponseApiLocationResourceSchema.
type PaginatedResponseApiLocationResourceSchema struct {
	Data []Location             `json:"data"`
	Page DeveloperAPINestedPage `json:"page"`
}

// PaginatedResponseApiMemoResourceSchema defines model for PaginatedResponseApiMemoResourceSchema.
type PaginatedResponseApiMemoResourceSchema struct {
	Data []Memo                 `json:"data"`
	Page DeveloperAPINestedPage `json:"page"`
}

// PaginatedResponseApiMerchantResourceSchema defines model for PaginatedResponseApiMerchantResourceSchema.
type PaginatedResponseApiMerchantResourceSchema struct {
	Data []Merchant             `json:"data"`
	Page DeveloperAPINestedPage `json:"page"`
}

// PaginatedResponseApiReceiptResourceSchema defines model for PaginatedResponseApiReceiptResourceSchema.
type PaginatedResponseApiReceiptResourceSchema struct {
	Data []Receipt              `json:"data"`
	Page DeveloperAPINestedPage `json:"page"`
}

// PaginatedResponseApiReimbursementResourceSchema defines model for PaginatedResponseApiReimbursementResourceSchema.
type PaginatedResponseApiReimbursementResourceSchema struct {
	Data []Reimbursement        `json:"data"`
	Page DeveloperAPINestedPage `json:"page"`
}

// PaginatedResponseApiSpendLimitResourceSchema defines model for PaginatedResponseApiSpendLimitResourceSchema.
type PaginatedResponseApiSpendLimitResourceSchema struct {
	Data []Limit                `json:"data"`
	Page DeveloperAPINestedPage `json:"page"`
}

// PaginatedResponseApiSpendProgramResourceSchema defines model for PaginatedResponseApiSpendProgramResourceSchema.
type PaginatedResponseApiSpendProgramResourceSchema struct {
	Data []ApiSpendProgramResource `json:"data"`
	Page DeveloperAPINestedPage    `json:"page"`
}

// PaginatedResponseApiStatementResourceSchema defines model for PaginatedResponseApiStatementResourceSchema.
type PaginatedResponseApiStatementResourceSchema struct {
	Data []Statement            `json:"data"`
	Page DeveloperAPINestedPage `json:"page"`
}

// PaginatedResponseApiTransactionCanonicalSchema defines model for PaginatedResponseApiTransactionCanonicalSchema.
type PaginatedResponseApiTransactionCanonicalSchema struct {
	Data []Transaction          `json:"data"`
	Page DeveloperAPINestedPage `json:"page"`
}

// PaginatedResponseApiTransferResourceSchema defines model for PaginatedResponseApiTransferResourceSchema.
type PaginatedResponseApiTransferResourceSchema struct {
	Data []Transfer             `json:"data"`
	Page DeveloperAPINestedPage `json:"page"`
}

// PaginatedResponseApiUserResourceSchema defines model for PaginatedResponseApiUserResourceSchema.
type PaginatedResponseApiUserResourceSchema struct {
	Data []User                 `json:"data"`
	Page DeveloperAPINestedPage `json:"page"`
}

// Receipt defines model for Receipt.
type Receipt struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Id Unique identifier of the receipt.
	Id *openapi_types.UUID `json:"id,omitempty"`

	// ReceiptUrl Pre-signed url to download receipt image.
	ReceiptUrl *string `json:"receipt_url,omitempty"`

	// TransactionId Unique identifier of the associated transaction.
	TransactionId *openapi_types.UUID `json:"transaction_id,omitempty"`

	// UserId Unique identifier of the person who made the transaction.
	UserId *openapi_types.UUID `json:"user_id,omitempty"`
}

// Reimbursement defines model for Reimbursement.
type Reimbursement struct {
	// AccountingFieldSelections List of accounting fields selected to code the reimbursement.
	AccountingFieldSelections *[]ApiReimbursementAccountingFieldSelection `json:"accounting_field_selections,omitempty"`

	// Amount The amount that the payor pays.
	Amount *float32 `json:"amount,omitempty"`

	// CreatedAt Time at which the reimbursement is created. Presented in ISO8601 format.
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Currency The currency that the payor pays with.
	Currency *string `json:"currency,omitempty"`

	// Direction The direction of the reimbursement. It could be either BUSINESS_TO_USER or USER_TO_BUSINESS.
	Direction *ReimbursementDirection `json:"direction,omitempty"`

	// Id Unique identifier of the reimbursement.
	Id *openapi_types.UUID `json:"id,omitempty"`

	// LineItems List of line items related to the reimbursement.
	LineItems *[]ApiReimbursementLineItem `json:"line_items,omitempty"`
	Merchant  *string                     `json:"merchant,omitempty"`

	// OriginalReimbursementAmount Original reimbursement amount before the currency conversion.
	OriginalReimbursementAmount *CurrencyAmount       `json:"original_reimbursement_amount"`
	Receipts                    *[]openapi_types.UUID `json:"receipts,omitempty"`
	TransactionDate             *openapi_types.Date   `json:"transaction_date,omitempty"`

	// Type The type of the reimbursement.
	Type *ReimbursementType `json:"type,omitempty"`

	// UserId Unique identifier of the person who made the reimbursement.
	UserId *openapi_types.UUID `json:"user_id,omitempty"`
}

// ReimbursementDirection The direction of the reimbursement. It could be either BUSINESS_TO_USER or USER_TO_BUSINESS.
type ReimbursementDirection string

// ReimbursementType The type of the reimbursement.
type ReimbursementType string

// SpendLimitDeferredTask defines model for SpendLimitDeferredTask.
type SpendLimitDeferredTask struct {
	// Data Detailed data of the deferred task.
	Data *ApiSpendLimitDeferredTaskData `json:"data,omitempty"`

	// Id Unique identifier of the deferred task.
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Status Status of the deferred task. It could be one of the following values: STARTED, IN_PROGRESS, ERROR, SUCCESS
	Status *string `json:"status,omitempty"`
}

// Statement defines model for Statement.
type Statement struct {
	// Charges Total charges incurred during the statement period
	Charges CurrencyAmount `json:"charges"`

	// Credits Total credits accumulated during the statement period
	Credits CurrencyAmount `json:"credits"`
	EndDate time.Time      `json:"end_date"`

	// EndingBalance Balance at the end of the statement period
	EndingBalance CurrencyAmount     `json:"ending_balance"`
	Id            openapi_types.UUID `json:"id"`

	// OpeningBalance Balance at the beginning of the statement period
	OpeningBalance CurrencyAmount `json:"opening_balance"`

	// Payments Total payments made during the statement period
	Payments             CurrencyAmount      `json:"payments"`
	PrecedingStatementId *openapi_types.UUID `json:"preceding_statement_id,omitempty"`
	StartDate            time.Time           `json:"start_date"`

	// StatementLines Statement lines encompass all the financial activities, including card transactions, transfers, and other charges or credits that have taken place within a specific period.
	StatementLines []ApiStatementItem `json:"statement_lines"`
}

// Subsidiary defines model for Subsidiary.
type Subsidiary struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Id id of the subsidiary company.
	Id       *string `json:"id,omitempty"`
	IsActive *bool   `json:"is_active,omitempty"`

	// Name name of the subsidiary company; e.g. Ramp LP. In the corporate world, a subsidiary is a company that belongs to another company, which is usually referred to as the parent company or the holding company.
	Name *string `json:"name,omitempty"`

	// RampId id to uniquely identify a subsidiary within Ramp system
	RampId    *openapi_types.UUID `json:"ramp_id,omitempty"`
	UpdatedAt *time.Time          `json:"updated_at,omitempty"`
}

// Sync defines model for Sync.
type Sync struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Id id of the sync.
	Id *string `json:"id,omitempty"`

	// Status status of the sync.
	Status SyncStatus `json:"status"`
}

// SyncStatus status of the sync.
type SyncStatus string

// Transaction defines model for Transaction.
type Transaction struct {
	// AccountingCategories Accounting categories related to the transaction.
	AccountingCategories *[]ApiAccountingCategory `json:"accounting_categories,omitempty"`

	// AccountingFieldSelections List of accounting fields selected to code the transaction.
	AccountingFieldSelections *[]ApiTransactionAccountingFieldSelection `json:"accounting_field_selections,omitempty"`

	// Amount Settled amount of the transaction.
	Amount *float32 `json:"amount,omitempty"`

	// CardHolder Information about the card holder.
	CardHolder *ApiTransactionCardHolder `json:"card_holder,omitempty"`
	CardId     *string                   `json:"card_id,omitempty"`

	// CurrencyCode Currency that the transaction is settled in.
	CurrencyCode *string `json:"currency_code,omitempty"`

	// DeclineDetails Details about a transaction decline.
	DeclineDetails *ApiTransactionDeclineDetails `json:"decline_details,omitempty"`

	// Disputes A list of disputes sorted in descending order by their creation time.
	Disputes *[]ApiTransactionDispute `json:"disputes,omitempty"`
	Id       *openapi_types.UUID      `json:"id,omitempty"`

	// LineItems List of line items related to the transaction.
	LineItems *[]ApiTransactionLineItem `json:"line_items,omitempty"`
	Memo      *string                   `json:"memo"`

	// MerchantCategoryCode Merchant category code is a four-digit number in ISP 18245 used to classify a business by the types of goods and services it provides.
	MerchantCategoryCode *string `json:"merchant_category_code,omitempty"`

	// MerchantCategoryCodeDescription Description about the merchant category code.
	MerchantCategoryCodeDescription *string `json:"merchant_category_code_description,omitempty"`

	// MerchantDescriptor A merchant descriptor is the name that appears on a customer's bank statement when they make a purchase from that merchant.
	MerchantDescriptor *string             `json:"merchant_descriptor,omitempty"`
	MerchantId         *openapi_types.UUID `json:"merchant_id"`
	MerchantName       *string             `json:"merchant_name"`

	// OriginalTransactionAmount the original transaction amount before the currency conversion.
	OriginalTransactionAmount *CurrencyAmount `json:"original_transaction_amount"`

	// PolicyViolations A list of policy violations sorted in descending order by their creation time.
	PolicyViolations *[]ApiTransactionPolicyViolation `json:"policy_violations,omitempty"`

	// Receipts Receipts listed in ascending order by their creation time, related to the transaction.
	Receipts *[]openapi_types.UUID `json:"receipts,omitempty"`

	// SkCategoryId Ramp-internal category id.
	SkCategoryId *int `json:"sk_category_id"`

	// SkCategoryName Ramp-internal category name.
	SkCategoryName *string `json:"sk_category_name"`

	// State transaction state.
	State               *TransactionState `json:"state,omitempty"`
	UserTransactionTime *time.Time        `json:"user_transaction_time,omitempty"`
}

// TransactionState transaction state.
type TransactionState string

// Transfer defines model for Transfer.
type Transfer struct {
	// Amount Amount of the transfer payment.
	Amount    *CurrencyAmount     `json:"amount,omitempty"`
	CreatedAt *time.Time          `json:"created_at,omitempty"`
	Id        *openapi_types.UUID `json:"id,omitempty"`
	Status    *TransferStatus     `json:"status,omitempty"`
}

// TransferStatus defines model for Transfer.Status.
type TransferStatus string

// Upload defines model for Upload.
type Upload struct {
	CreatedAt    *time.Time          `json:"created_at,omitempty"`
	DocumentType *string             `json:"document_type,omitempty"`
	SalesLeadId  *openapi_types.UUID `json:"sales_lead_id,omitempty"`
	UpdatedAt    *time.Time          `json:"updated_at,omitempty"`
}

// User defines model for User.
type User struct {
	// BusinessId Unique identifier of the company that the employee's working for.
	BusinessId *openapi_types.UUID `json:"business_id"`

	// DepartmentId Unique identifier of the employee's department
	DepartmentId *openapi_types.UUID `json:"department_id"`

	// Email The employee's email address
	Email *string `json:"email,omitempty"`

	// FirstName First name of the employee
	FirstName *string `json:"first_name,omitempty"`

	// Id Unique employee identifier
	Id *openapi_types.UUID `json:"id,omitempty"`

	// IsManager Whether the employee is a manager
	IsManager *bool `json:"is_manager,omitempty"`

	// LastName Last name of the employee
	LastName *string `json:"last_name,omitempty"`

	// LocationId Unique identifier of the employee's location
	LocationId *openapi_types.UUID `json:"location_id"`

	// ManagerId Unique identifier of the employee's manager
	ManagerId *openapi_types.UUID `json:"manager_id"`

	// Phone The employee's phone number
	Phone *string `json:"phone,omitempty"`

	// Role The employee's role; It could be one of the following values: Admin, Cardholder, Owner, Bookkeeper
	Role *string `json:"role,omitempty"`

	// Status The employee's status; It could be one of the following values: INVITE_PENDING, INVITE_DELETED, INVITE_EXPIRED, USER_ONBOARDING, USER_ACTIVE and USER_SUSPENDED
	Status *UserStatus `json:"status,omitempty"`
}

// UserStatus The employee's status; It could be one of the following values: INVITE_PENDING, INVITE_DELETED, INVITE_EXPIRED, USER_ONBOARDING, USER_ACTIVE and USER_SUSPENDED
type UserStatus string

// UserDeferredTask defines model for UserDeferredTask.
type UserDeferredTask struct {
	// Data Detailed data of the deferred task.
	Data *ApiUserDeferredTaskData `json:"data,omitempty"`

	// Id Unique identifier of the deferred task.
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Status Status of the deferred task. It could be one of the following values: STARTED, IN_PROGRESS, ERROR, SUCCESS
	Status *string `json:"status,omitempty"`
}

// Vendor defines model for Vendor.
type Vendor struct {
	// Id id of the vendor.
	Id string `json:"id"`

	// Name name of the vendor
	Name string `json:"name"`
}

// VendorAccount defines model for VendorAccount.
type VendorAccount struct {
	// Code e.g. 19566
	Code      *string    `json:"code,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	Id        *string    `json:"id,omitempty"`
	IsActive  *bool      `json:"is_active,omitempty"`
	IsSynced  *bool      `json:"is_synced,omitempty"`

	// Name A vendor is a person or business that provides goods or services
	Name *string `json:"name,omitempty"`

	// RampId id to uniquely identify a vendor account within Ramp system
	RampId    *openapi_types.UUID `json:"ramp_id,omitempty"`
	UpdatedAt *time.Time          `json:"updated_at,omitempty"`
}

// Limit defines model for limit.
type Limit struct {
	// Balance  Details about the current balance of the limit.
	Balance *ApiSpendAllocationBalance `json:"balance,omitempty"`

	// Cards List of cards linked to this limit.
	Cards *[]ApiSpendLimitCardResource `json:"cards,omitempty"`

	// DisplayName Display name of the limit.
	DisplayName *string `json:"display_name,omitempty"`

	// HasProgramOverridden Indicates if the limit's settings override those of its Spend Program.
	HasProgramOverridden *bool `json:"has_program_overridden,omitempty"`

	// Id Unique identifier of the limit.
	Id *openapi_types.UUID `json:"id,omitempty"`

	// PermittedSpendTypes Specifies the permitted spend types of the limit.
	PermittedSpendTypes *ApiPermittedSpendTypesDump `json:"permitted_spend_types,omitempty"`

	// Restrictions Restrictions imposed on this limit.
	Restrictions *ApiSpendingRestrictionsDump `json:"restrictions,omitempty"`

	// SpendProgramId Unique identifier of the associated Spend Program.
	SpendProgramId *openapi_types.UUID `json:"spend_program_id,omitempty"`

	// State Current state of the limit.
	State *LimitState `json:"state,omitempty"`

	// Suspension Suspension (lock) on the limit.
	Suspension *ApiSuspensionDump `json:"suspension"`

	// Users Members who can spend from the limit.
	Users *[]ApiSpendLimitMember `json:"users,omitempty"`
}

// LimitState Current state of the limit.
type LimitState string

// GetGlAccountListResourceParams defines parameters for GetGlAccountListResource.
type GetGlAccountListResourceParams struct {
	// Start The ID of the last entity of the previous page, used for pagination to get the next page.
	Start *openapi_types.UUID `form:"start,omitempty" json:"start,omitempty"`

	// PageSize The number of results to be returned in each page. The value must be between 2 and 10,000. If not specified, the default value 1,000 will be used.
	PageSize *int  `form:"page_size,omitempty" json:"page_size,omitempty"`
	IsActive *bool `form:"is_active,omitempty" json:"is_active,omitempty"`
	IsSynced *bool `form:"is_synced,omitempty" json:"is_synced,omitempty"`
}

// GetCustomFieldOptionListResourceParams defines parameters for GetCustomFieldOptionListResource.
type GetCustomFieldOptionListResourceParams struct {
	// Start The ID of the last entity of the previous page, used for pagination to get the next page.
	Start *openapi_types.UUID `form:"start,omitempty" json:"start,omitempty"`

	// PageSize The number of results to be returned in each page. The value must be between 2 and 10,000. If not specified, the default value 1,000 will be used.
	PageSize *int               `form:"page_size,omitempty" json:"page_size,omitempty"`
	FieldId  openapi_types.UUID `form:"field_id" json:"field_id"`
	IsActive *bool              `form:"is_active,omitempty" json:"is_active,omitempty"`
}

// GetCustomFieldListResourceParams defines parameters for GetCustomFieldListResource.
type GetCustomFieldListResourceParams struct {
	// Start The ID of the last entity of the previous page, used for pagination to get the next page.
	Start *openapi_types.UUID `form:"start,omitempty" json:"start,omitempty"`

	// PageSize The number of results to be returned in each page. The value must be between 2 and 10,000. If not specified, the default value 1,000 will be used.
	PageSize *int  `form:"page_size,omitempty" json:"page_size,omitempty"`
	IsActive *bool `form:"is_active,omitempty" json:"is_active,omitempty"`
}

// GetSubsidiaryListResourceParams defines parameters for GetSubsidiaryListResource.
type GetSubsidiaryListResourceParams struct {
	// Start The ID of the last entity of the previous page, used for pagination to get the next page.
	Start *openapi_types.UUID `form:"start,omitempty" json:"start,omitempty"`

	// PageSize The number of results to be returned in each page. The value must be between 2 and 10,000. If not specified, the default value 1,000 will be used.
	PageSize *int  `form:"page_size,omitempty" json:"page_size,omitempty"`
	IsActive *bool `form:"is_active,omitempty" json:"is_active,omitempty"`
	IsSynced *bool `form:"is_synced,omitempty" json:"is_synced,omitempty"`
}

// GetVendorListResourceParams defines parameters for GetVendorListResource.
type GetVendorListResourceParams struct {
	// Start The ID of the last entity of the previous page, used for pagination to get the next page.
	Start *openapi_types.UUID `form:"start,omitempty" json:"start,omitempty"`

	// PageSize The number of results to be returned in each page. The value must be between 2 and 10,000. If not specified, the default value 1,000 will be used.
	PageSize *int  `form:"page_size,omitempty" json:"page_size,omitempty"`
	IsActive *bool `form:"is_active,omitempty" json:"is_active,omitempty"`
	IsSynced *bool `form:"is_synced,omitempty" json:"is_synced,omitempty"`
}

// GetCardProgramListDeprecatedParams defines parameters for GetCardProgramListDeprecated.
type GetCardProgramListDeprecatedParams struct {
	// Start The ID of the last entity of the previous page, used for pagination to get the next page.
	Start *openapi_types.UUID `form:"start,omitempty" json:"start,omitempty"`

	// PageSize The number of results to be returned in each page. The value must be between 2 and 10,000. If not specified, the default value 1,000 will be used.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// GetCardListWithPaginationParams defines parameters for GetCardListWithPagination.
type GetCardListWithPaginationParams struct {
	// UserId Filter by card owner.
	UserId *openapi_types.UUID `form:"user_id,omitempty" json:"user_id,omitempty"`

	// CardProgramId Filter by card program.
	CardProgramId *openapi_types.UUID `form:"card_program_id,omitempty" json:"card_program_id,omitempty"`

	// IsActivated Filter only for activated cards. Defaults to True if not specified
	IsActivated *bool `form:"is_activated,omitempty" json:"is_activated,omitempty"`

	// Start The ID of the last entity of the previous page, used for pagination to get the next page.
	Start *openapi_types.UUID `form:"start,omitempty" json:"start,omitempty"`

	// PageSize The number of results to be returned in each page. The value must be between 2 and 10,000. If not specified, the default value 1,000 will be used.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// GetCashbackListWithPaginationParams defines parameters for GetCashbackListWithPagination.
type GetCashbackListWithPaginationParams struct {
	// FromDate Filter for cashback payments that occurred after the specified date. Input need to be presented in ISO8601 format, e.g. 2020-12-02T00:00:00
	FromDate *time.Time `form:"from_date,omitempty" json:"from_date,omitempty"`

	// ToDate Filter for cashback payments that occurred before the specified date. Input need to be presented in ISO8601 format, e.g. 2020-12-02T00:00:00
	ToDate *time.Time `form:"to_date,omitempty" json:"to_date,omitempty"`

	// Start The ID of the last entity of the previous page, used for pagination to get the next page.
	Start *openapi_types.UUID `form:"start,omitempty" json:"start,omitempty"`

	// PageSize The number of results to be returned in each page. The value must be between 2 and 10,000. If not specified, the default value 1,000 will be used.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// GetDepartmentListWithPaginationParams defines parameters for GetDepartmentListWithPagination.
type GetDepartmentListWithPaginationParams struct {
	// Start The ID of the last entity of the previous page, used for pagination to get the next page.
	Start *openapi_types.UUID `form:"start,omitempty" json:"start,omitempty"`

	// PageSize The number of results to be returned in each page. The value must be between 2 and 10,000. If not specified, the default value 1,000 will be used.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// GetSpendLimitListWithPaginationParams defines parameters for GetSpendLimitListWithPagination.
type GetSpendLimitListWithPaginationParams struct {
	// Start The ID of the last entity of the previous page, used for pagination to get the next page.
	Start *openapi_types.UUID `form:"start,omitempty" json:"start,omitempty"`

	// PageSize The number of results to be returned in each page. The value must be between 2 and 10,000. If not specified, the default value 1,000 will be used.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// GetLocationListResourceParams defines parameters for GetLocationListResource.
type GetLocationListResourceParams struct {
	// Start The ID of the last entity of the previous page, used for pagination to get the next page.
	Start *openapi_types.UUID `form:"start,omitempty" json:"start,omitempty"`

	// PageSize The number of results to be returned in each page. The value must be between 2 and 10,000. If not specified, the default value 1,000 will be used.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// GetMemoListWithPaginationParams defines parameters for GetMemoListWithPagination.
type GetMemoListWithPaginationParams struct {
	// Start The ID of the last entity of the previous page, used for pagination to get the next page.
	Start *openapi_types.UUID `form:"start,omitempty" json:"start,omitempty"`

	// PageSize The number of results to be returned in each page. The value must be between 2 and 10,000. If not specified, the default value 1,000 will be used.
	PageSize     *int       `form:"page_size,omitempty" json:"page_size,omitempty"`
	CardId       *string    `form:"card_id,omitempty" json:"card_id,omitempty"`
	DepartmentId *string    `form:"department_id,omitempty" json:"department_id,omitempty"`
	FromDate     *time.Time `form:"from_date,omitempty" json:"from_date,omitempty"`
	LocationId   *string    `form:"location_id,omitempty" json:"location_id,omitempty"`
	ManagerId    *string    `form:"manager_id,omitempty" json:"manager_id,omitempty"`
	MerchantId   *string    `form:"merchant_id,omitempty" json:"merchant_id,omitempty"`
	ToDate       *time.Time `form:"to_date,omitempty" json:"to_date,omitempty"`
	UserId       *string    `form:"user_id,omitempty" json:"user_id,omitempty"`
}

// GetMerchantListWithPaginationParams defines parameters for GetMerchantListWithPagination.
type GetMerchantListWithPaginationParams struct {
	// Start The ID of the last entity of the previous page, used for pagination to get the next page.
	Start *openapi_types.UUID `form:"start,omitempty" json:"start,omitempty"`

	// PageSize The number of results to be returned in each page. The value must be between 2 and 10,000. If not specified, the default value 1,000 will be used.
	PageSize            *int       `form:"page_size,omitempty" json:"page_size,omitempty"`
	TransactionFromDate *time.Time `form:"transaction_from_date,omitempty" json:"transaction_from_date,omitempty"`
	TransactionToDate   *time.Time `form:"transaction_to_date,omitempty" json:"transaction_to_date,omitempty"`
}

// GetReceiptListWithPaginationParams defines parameters for GetReceiptListWithPagination.
type GetReceiptListWithPaginationParams struct {
	// FromDate Filter for receipts related to transactions which occurred after the specified date. Input need to be presented in ISO8601 format, e.g. 2020-12-02T00:00:00
	FromDate *time.Time `form:"from_date,omitempty" json:"from_date,omitempty"`

	// ToDate Filter for receipts related to transactions which occurred before the specified date. Input need to be presented in ISO8601 format, e.g. 2020-12-02T00:00:00
	ToDate *time.Time `form:"to_date,omitempty" json:"to_date,omitempty"`

	// CreatedAfter Filter for receipts that were created after the specified date. Input need to be presented in ISO8601 format, e.g. 2020-12-02T00:00:00
	CreatedAfter *time.Time `form:"created_after,omitempty" json:"created_after,omitempty"`

	// CreatedBefore Filter for receipts that were created before the specified date. Input need to be presented in ISO8601 format, e.g. 2020-12-02T00:00:00
	CreatedBefore *time.Time `form:"created_before,omitempty" json:"created_before,omitempty"`

	// Start The ID of the last entity of the previous page, used for pagination to get the next page.
	Start *openapi_types.UUID `form:"start,omitempty" json:"start,omitempty"`

	// PageSize The number of results to be returned in each page. The value must be between 2 and 10,000. If not specified, the default value 1,000 will be used.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// GetReimbursementListWithPaginationParams defines parameters for GetReimbursementListWithPagination.
type GetReimbursementListWithPaginationParams struct {
	// SyncReady Filter for reimbursements that are coded with accounting fields and ready to sync to ERP systems.
	SyncReady *bool `form:"sync_ready,omitempty" json:"sync_ready,omitempty"`

	// HasNoSyncCommits Filter for reimbursements that have not been synced to ERP systems yet.
	HasNoSyncCommits *bool `form:"has_no_sync_commits,omitempty" json:"has_no_sync_commits,omitempty"`

	// Start The ID of the last entity of the previous page, used for pagination to get the next page.
	Start *openapi_types.UUID `form:"start,omitempty" json:"start,omitempty"`

	// PageSize The number of results to be returned in each page. The value must be between 2 and 10,000. If not specified, the default value 1,000 will be used.
	PageSize *int                `form:"page_size,omitempty" json:"page_size,omitempty"`
	UserId   *openapi_types.UUID `form:"user_id,omitempty" json:"user_id,omitempty"`
}

// GetSpendProgramResourceParams defines parameters for GetSpendProgramResource.
type GetSpendProgramResourceParams struct {
	// Start The ID of the last entity of the previous page, used for pagination to get the next page.
	Start *openapi_types.UUID `form:"start,omitempty" json:"start,omitempty"`

	// PageSize The number of results to be returned in each page. The value must be between 2 and 10,000. If not specified, the default value 1,000 will be used.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// GetStatementListWithPaginationParams defines parameters for GetStatementListWithPagination.
type GetStatementListWithPaginationParams struct {
	// FromDate Shows only statements with an end_date on or after this date. This parameter should be provided as a datetime string that conforms to ISO 8601
	FromDate *time.Time `form:"from_date,omitempty" json:"from_date,omitempty"`

	// ToDate Shows only statements with an end_date on or before this date. This parameter should be provided as a datetime string that conforms to ISO 8601
	ToDate *time.Time `form:"to_date,omitempty" json:"to_date,omitempty"`

	// Start The ID of the last entity of the previous page, used for pagination to get the next page.
	Start *openapi_types.UUID `form:"start,omitempty" json:"start,omitempty"`

	// PageSize The number of results to be returned in each page. The value must be between 2 and 10,000. If not specified, the default value 1,000 will be used.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// GetTransactionsCanonicalListWithPaginationParams defines parameters for GetTransactionsCanonicalListWithPagination.
type GetTransactionsCanonicalListWithPaginationParams struct {
	// CardId Filter by card.
	CardId *string `form:"card_id,omitempty" json:"card_id,omitempty"`

	// DepartmentId Filter by department.
	DepartmentId *string `form:"department_id,omitempty" json:"department_id,omitempty"`

	// LocationId Filter by location.
	LocationId *string `form:"location_id,omitempty" json:"location_id,omitempty"`

	// MerchantId Filter by merchant.
	MerchantId *string `form:"merchant_id,omitempty" json:"merchant_id,omitempty"`

	// SkCategoryId Filter by sk category.
	SkCategoryId *string `form:"sk_category_id,omitempty" json:"sk_category_id,omitempty"`

	// StatementId Filter by statement.
	StatementId *string `form:"statement_id,omitempty" json:"statement_id,omitempty"`

	// State Filter by transaction state.
	State *GetTransactionsCanonicalListWithPaginationParamsState `form:"state,omitempty" json:"state,omitempty"`

	// UserId Filter by user.
	UserId *string `form:"user_id,omitempty" json:"user_id,omitempty"`

	// SyncReady Filter for transactions that are coded with accounting fields and ready to sync to ERP systems.
	SyncReady *bool `form:"sync_ready,omitempty" json:"sync_ready,omitempty"`

	// FromDate Filter for transactions that happens after the given date.
	FromDate *time.Time `form:"from_date,omitempty" json:"from_date,omitempty"`

	// ToDate Filter for transactions that happens before the given date.
	ToDate *time.Time `form:"to_date,omitempty" json:"to_date,omitempty"`

	// ExpensePolicyInteractionHasAlert Filter for transactions that have expense policy alert.
	ExpensePolicyInteractionHasAlert *bool `form:"expense_policy_interaction_has_alert,omitempty" json:"expense_policy_interaction_has_alert,omitempty"`

	// MinAmount Filter for transactions that have larger amount that the given amount. This is a U.S. Dollar denominated amount.
	MinAmount *struct {
		union json.RawMessage
	} `form:"min_amount,omitempty" json:"min_amount,omitempty"`

	// HasNoSyncCommits Filter for transactions that have not been synced to ERP systems yet.
	HasNoSyncCommits *bool `form:"has_no_sync_commits,omitempty" json:"has_no_sync_commits,omitempty"`

	// MaxAmount Filter for transactions that have smaller amount that the given amount. This is a U.S. Dollar denominated amount.
	MaxAmount *struct {
		union json.RawMessage
	} `form:"max_amount,omitempty" json:"max_amount,omitempty"`

	// ExpensePolicyInteractionNeedsReview Filter for transactions that require expense policy review.
	ExpensePolicyInteractionNeedsReview *bool `form:"expense_policy_interaction_needs_review,omitempty" json:"expense_policy_interaction_needs_review,omitempty"`

	// RequiresMemo Filters for transactions which require a memo, but do not have one. This can only be set to true.
	RequiresMemo *bool `form:"requires_memo,omitempty" json:"requires_memo,omitempty"`

	// OrderByAmountAsc Sort transactions by amount in ascending order.
	OrderByAmountAsc *bool `form:"order_by_amount_asc,omitempty" json:"order_by_amount_asc,omitempty"`

	// OrderByAmountDesc Sort transactions by amount in descending order.
	OrderByAmountDesc *bool `form:"order_by_amount_desc,omitempty" json:"order_by_amount_desc,omitempty"`

	// OrderByDateAsc Sort transactions by date in ascending order.
	OrderByDateAsc *bool `form:"order_by_date_asc,omitempty" json:"order_by_date_asc,omitempty"`

	// OrderByDateDesc Sort transactions by date in descending order.
	OrderByDateDesc *bool `form:"order_by_date_desc,omitempty" json:"order_by_date_desc,omitempty"`

	// Start The ID of the last entity of the previous page, used for pagination to get the next page.
	Start *openapi_types.UUID `form:"start,omitempty" json:"start,omitempty"`

	// PageSize The number of results to be returned in each page. The value must be between 2 and 10,000. If not specified, the default value 1,000 will be used.
	PageSize  *int         `form:"page_size,omitempty" json:"page_size,omitempty"`
	ManagerId *interface{} `form:"manager_id,omitempty" json:"manager_id,omitempty"`
}

// GetTransactionsCanonicalListWithPaginationParamsState defines parameters for GetTransactionsCanonicalListWithPagination.
type GetTransactionsCanonicalListWithPaginationParamsState string

// GetTransactionsCanonicalListWithPaginationParamsMinAmount0 defines parameters for GetTransactionsCanonicalListWithPagination.
type GetTransactionsCanonicalListWithPaginationParamsMinAmount0 = string

// GetTransactionsCanonicalListWithPaginationParamsMinAmount1 defines parameters for GetTransactionsCanonicalListWithPagination.
type GetTransactionsCanonicalListWithPaginationParamsMinAmount1 = float32

// GetTransactionsCanonicalListWithPaginationParamsMaxAmount0 defines parameters for GetTransactionsCanonicalListWithPagination.
type GetTransactionsCanonicalListWithPaginationParamsMaxAmount0 = string

// GetTransactionsCanonicalListWithPaginationParamsMaxAmount1 defines parameters for GetTransactionsCanonicalListWithPagination.
type GetTransactionsCanonicalListWithPaginationParamsMaxAmount1 = float32

// GetTransferListWithPaginationParams defines parameters for GetTransferListWithPagination.
type GetTransferListWithPaginationParams struct {
	// FromDate Filter for transfers that occurred after the specified date. Input need to be presented in ISO8601 format, e.g. 2020-12-02T00:00:00
	FromDate *time.Time `form:"from_date,omitempty" json:"from_date,omitempty"`

	// ToDate Filter for transfers that occurred before the specified date. Input need to be presented in ISO8601 format, e.g. 2020-12-02T00:00:00
	ToDate *time.Time `form:"to_date,omitempty" json:"to_date,omitempty"`

	// StatementId Filter for transfers that shows up in the specified statement
	StatementId *openapi_types.UUID `form:"statement_id,omitempty" json:"statement_id,omitempty"`

	// Start The ID of the last entity of the previous page, used for pagination to get the next page.
	Start *openapi_types.UUID `form:"start,omitempty" json:"start,omitempty"`

	// PageSize The number of results to be returned in each page. The value must be between 2 and 10,000. If not specified, the default value 1,000 will be used.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// GetUserListWithPaginationParams defines parameters for GetUserListWithPagination.
type GetUserListWithPaginationParams struct {
	// Start The ID of the last entity of the previous page, used for pagination to get the next page.
	Start *openapi_types.UUID `form:"start,omitempty" json:"start,omitempty"`

	// PageSize The number of results to be returned in each page. The value must be between 2 and 10,000. If not specified, the default value 1,000 will be used.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// DepartmentId filter by department
	DepartmentId *openapi_types.UUID `form:"department_id,omitempty" json:"department_id,omitempty"`

	// Email filter by email
	Email *openapi_types.Email `form:"email,omitempty" json:"email,omitempty"`

	// LocationId filter by location
	LocationId *openapi_types.UUID `form:"location_id,omitempty" json:"location_id,omitempty"`
}

// PostGlAccountListResourceJSONRequestBody defines body for PostGlAccountListResource for application/json ContentType.
type PostGlAccountListResourceJSONRequestBody = ApiAccountingGLAccountUploadRequestBody

// PatchGlAccountResourceJSONRequestBody defines body for PatchGlAccountResource for application/json ContentType.
type PatchGlAccountResourceJSONRequestBody = ApiAccountingGLAccountUpdateRequestBody

// PostAccountingConnectionResouceJSONRequestBody defines body for PostAccountingConnectionResouce for application/json ContentType.
type PostAccountingConnectionResouceJSONRequestBody = ApiAccountingProviderAccessCreateRequestBody

// PostCustomFieldOptionListResourceJSONRequestBody defines body for PostCustomFieldOptionListResource for application/json ContentType.
type PostCustomFieldOptionListResourceJSONRequestBody = ApiAccountingCustomFieldOptionUploadRequestBody

// PatchCustomFieldOptionResourceJSONRequestBody defines body for PatchCustomFieldOptionResource for application/json ContentType.
type PatchCustomFieldOptionResourceJSONRequestBody = ApiAccountingCustomFieldOptionUpdateRequestBody

// PostCustomFieldListResourceJSONRequestBody defines body for PostCustomFieldListResource for application/json ContentType.
type PostCustomFieldListResourceJSONRequestBody = ApiAccountingCustomFieldCreateRequestBody

// PatchCustomFieldResourceJSONRequestBody defines body for PatchCustomFieldResource for application/json ContentType.
type PatchCustomFieldResourceJSONRequestBody = ApiAccountingCustomFieldUpdateRequestBody

// PostSubsidiaryListResourceJSONRequestBody defines body for PostSubsidiaryListResource for application/json ContentType.
type PostSubsidiaryListResourceJSONRequestBody = ApiAccountingSubsidiaryUploadRequestBody

// PatchSubsidiaryResourceJSONRequestBody defines body for PatchSubsidiaryResource for application/json ContentType.
type PatchSubsidiaryResourceJSONRequestBody = ApiAccountingSubsidiaryUpdateRequestBody

// PostSyncListResourceJSONRequestBody defines body for PostSyncListResource for application/json ContentType.
type PostSyncListResourceJSONRequestBody = ApiAccountingSyncCreateRequestBody

// PostVendorListResourceJSONRequestBody defines body for PostVendorListResource for application/json ContentType.
type PostVendorListResourceJSONRequestBody = ApiAccountingVendorUploadRequestBody

// PatchVendorResourceJSONRequestBody defines body for PatchVendorResource for application/json ContentType.
type PatchVendorResourceJSONRequestBody = ApiAccountingVendorUpdateRequestBody

// PostCardProgramListDeprecatedJSONRequestBody defines body for PostCardProgramListDeprecated for application/json ContentType.
type PostCardProgramListDeprecatedJSONRequestBody = ApiCardProgramCreateRequestBody

// PostPhysicalCardJSONRequestBody defines body for PostPhysicalCard for application/json ContentType.
type PostPhysicalCardJSONRequestBody = ApiCardRequestBody

// PostVirtualCardJSONRequestBody defines body for PostVirtualCard for application/json ContentType.
type PostVirtualCardJSONRequestBody = ApiCardRequestBody

// PatchCardResourceJSONRequestBody defines body for PatchCardResource for application/json ContentType.
type PatchCardResourceJSONRequestBody = ApiCardUpdateRequestBody

// PostCardSuspensionResourceJSONRequestBody defines body for PostCardSuspensionResource for application/json ContentType.
type PostCardSuspensionResourceJSONRequestBody = ApiCardDeferredUpdateRequestBody

// PostCardTerminationResourceJSONRequestBody defines body for PostCardTerminationResource for application/json ContentType.
type PostCardTerminationResourceJSONRequestBody = ApiCardDeferredUpdateRequestBody

// PostCardUnsuspensionResourceJSONRequestBody defines body for PostCardUnsuspensionResource for application/json ContentType.
type PostCardUnsuspensionResourceJSONRequestBody = ApiCardDeferredUpdateRequestBody

// PostDepartmentListWithPaginationJSONRequestBody defines body for PostDepartmentListWithPagination for application/json ContentType.
type PostDepartmentListWithPaginationJSONRequestBody = ApiDepartmentCreateRequestBody

// PatchDepartmentResourceJSONRequestBody defines body for PatchDepartmentResource for application/json ContentType.
type PatchDepartmentResourceJSONRequestBody = ApiDepartmentUpdateRequestBody

// PostSalesLeadCreationJSONRequestBody defines body for PostSalesLeadCreation for application/json ContentType.
type PostSalesLeadCreationJSONRequestBody = ApiSalesLeadCreateRequestBody

// PostSpendLimitCreationJSONRequestBody defines body for PostSpendLimitCreation for application/json ContentType.
type PostSpendLimitCreationJSONRequestBody = ApiSpendLimitCreateRequestBody

// PostSpendLimitTerminationResourceJSONRequestBody defines body for PostSpendLimitTerminationResource for application/json ContentType.
type PostSpendLimitTerminationResourceJSONRequestBody = ApiSpendLimitDeferredUpdateRequestBody

// PostLocationListResourceJSONRequestBody defines body for PostLocationListResource for application/json ContentType.
type PostLocationListResourceJSONRequestBody = ApiLocationCreateRequestBody

// PatchLocationSingleResourceJSONRequestBody defines body for PatchLocationSingleResource for application/json ContentType.
type PatchLocationSingleResourceJSONRequestBody = ApiLocationUpdateRequestBody

// GetReceiptIntegrationOptedOutEmailsListResourceJSONRequestBody defines body for GetReceiptIntegrationOptedOutEmailsListResource for application/json ContentType.
type GetReceiptIntegrationOptedOutEmailsListResourceJSONRequestBody = ApiReceiptIntegrationOptedOutEmailResourceRequestBody

// PostReceiptIntegrationOptedOutEmailsListResourceJSONRequestBody defines body for PostReceiptIntegrationOptedOutEmailsListResource for application/json ContentType.
type PostReceiptIntegrationOptedOutEmailsListResourceJSONRequestBody = ApiReceiptIntegrationOptedOutEmailCreateRequestBody

// PostSpendProgramResourceJSONRequestBody defines body for PostSpendProgramResource for application/json ContentType.
type PostSpendProgramResourceJSONRequestBody = ApiSpendProgramCreateRequestBody

// PostUserCreationDeferredTaskJSONRequestBody defines body for PostUserCreationDeferredTask for application/json ContentType.
type PostUserCreationDeferredTaskJSONRequestBody = ApiUserCreateRequestBody

// PatchUserResourceJSONRequestBody defines body for PatchUserResource for application/json ContentType.
type PatchUserResourceJSONRequestBody = ApiUserUpdateRequestBody

// AsApiCardSpendingRestrictionsRequestBodyAmount0 returns the union data inside the ApiCardSpendingRestrictionsRequestBody_Amount as a ApiCardSpendingRestrictionsRequestBodyAmount0
func (t ApiCardSpendingRestrictionsRequestBody_Amount) AsApiCardSpendingRestrictionsRequestBodyAmount0() (ApiCardSpendingRestrictionsRequestBodyAmount0, error) {
	var body ApiCardSpendingRestrictionsRequestBodyAmount0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromApiCardSpendingRestrictionsRequestBodyAmount0 overwrites any union data inside the ApiCardSpendingRestrictionsRequestBody_Amount as the provided ApiCardSpendingRestrictionsRequestBodyAmount0
func (t *ApiCardSpendingRestrictionsRequestBody_Amount) FromApiCardSpendingRestrictionsRequestBodyAmount0(v ApiCardSpendingRestrictionsRequestBodyAmount0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeApiCardSpendingRestrictionsRequestBodyAmount0 performs a merge with any union data inside the ApiCardSpendingRestrictionsRequestBody_Amount, using the provided ApiCardSpendingRestrictionsRequestBodyAmount0
func (t *ApiCardSpendingRestrictionsRequestBody_Amount) MergeApiCardSpendingRestrictionsRequestBodyAmount0(v ApiCardSpendingRestrictionsRequestBodyAmount0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsApiCardSpendingRestrictionsRequestBodyAmount1 returns the union data inside the ApiCardSpendingRestrictionsRequestBody_Amount as a ApiCardSpendingRestrictionsRequestBodyAmount1
func (t ApiCardSpendingRestrictionsRequestBody_Amount) AsApiCardSpendingRestrictionsRequestBodyAmount1() (ApiCardSpendingRestrictionsRequestBodyAmount1, error) {
	var body ApiCardSpendingRestrictionsRequestBodyAmount1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromApiCardSpendingRestrictionsRequestBodyAmount1 overwrites any union data inside the ApiCardSpendingRestrictionsRequestBody_Amount as the provided ApiCardSpendingRestrictionsRequestBodyAmount1
func (t *ApiCardSpendingRestrictionsRequestBody_Amount) FromApiCardSpendingRestrictionsRequestBodyAmount1(v ApiCardSpendingRestrictionsRequestBodyAmount1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeApiCardSpendingRestrictionsRequestBodyAmount1 performs a merge with any union data inside the ApiCardSpendingRestrictionsRequestBody_Amount, using the provided ApiCardSpendingRestrictionsRequestBodyAmount1
func (t *ApiCardSpendingRestrictionsRequestBody_Amount) MergeApiCardSpendingRestrictionsRequestBodyAmount1(v ApiCardSpendingRestrictionsRequestBodyAmount1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t ApiCardSpendingRestrictionsRequestBody_Amount) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ApiCardSpendingRestrictionsRequestBody_Amount) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsApiCardSpendingRestrictionsRequestBodyTransactionAmountLimit0 returns the union data inside the ApiCardSpendingRestrictionsRequestBody_TransactionAmountLimit as a ApiCardSpendingRestrictionsRequestBodyTransactionAmountLimit0
func (t ApiCardSpendingRestrictionsRequestBody_TransactionAmountLimit) AsApiCardSpendingRestrictionsRequestBodyTransactionAmountLimit0() (ApiCardSpendingRestrictionsRequestBodyTransactionAmountLimit0, error) {
	var body ApiCardSpendingRestrictionsRequestBodyTransactionAmountLimit0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromApiCardSpendingRestrictionsRequestBodyTransactionAmountLimit0 overwrites any union data inside the ApiCardSpendingRestrictionsRequestBody_TransactionAmountLimit as the provided ApiCardSpendingRestrictionsRequestBodyTransactionAmountLimit0
func (t *ApiCardSpendingRestrictionsRequestBody_TransactionAmountLimit) FromApiCardSpendingRestrictionsRequestBodyTransactionAmountLimit0(v ApiCardSpendingRestrictionsRequestBodyTransactionAmountLimit0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeApiCardSpendingRestrictionsRequestBodyTransactionAmountLimit0 performs a merge with any union data inside the ApiCardSpendingRestrictionsRequestBody_TransactionAmountLimit, using the provided ApiCardSpendingRestrictionsRequestBodyTransactionAmountLimit0
func (t *ApiCardSpendingRestrictionsRequestBody_TransactionAmountLimit) MergeApiCardSpendingRestrictionsRequestBodyTransactionAmountLimit0(v ApiCardSpendingRestrictionsRequestBodyTransactionAmountLimit0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsApiCardSpendingRestrictionsRequestBodyTransactionAmountLimit1 returns the union data inside the ApiCardSpendingRestrictionsRequestBody_TransactionAmountLimit as a ApiCardSpendingRestrictionsRequestBodyTransactionAmountLimit1
func (t ApiCardSpendingRestrictionsRequestBody_TransactionAmountLimit) AsApiCardSpendingRestrictionsRequestBodyTransactionAmountLimit1() (ApiCardSpendingRestrictionsRequestBodyTransactionAmountLimit1, error) {
	var body ApiCardSpendingRestrictionsRequestBodyTransactionAmountLimit1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromApiCardSpendingRestrictionsRequestBodyTransactionAmountLimit1 overwrites any union data inside the ApiCardSpendingRestrictionsRequestBody_TransactionAmountLimit as the provided ApiCardSpendingRestrictionsRequestBodyTransactionAmountLimit1
func (t *ApiCardSpendingRestrictionsRequestBody_TransactionAmountLimit) FromApiCardSpendingRestrictionsRequestBodyTransactionAmountLimit1(v ApiCardSpendingRestrictionsRequestBodyTransactionAmountLimit1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeApiCardSpendingRestrictionsRequestBodyTransactionAmountLimit1 performs a merge with any union data inside the ApiCardSpendingRestrictionsRequestBody_TransactionAmountLimit, using the provided ApiCardSpendingRestrictionsRequestBodyTransactionAmountLimit1
func (t *ApiCardSpendingRestrictionsRequestBody_TransactionAmountLimit) MergeApiCardSpendingRestrictionsRequestBodyTransactionAmountLimit1(v ApiCardSpendingRestrictionsRequestBodyTransactionAmountLimit1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t ApiCardSpendingRestrictionsRequestBody_TransactionAmountLimit) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ApiCardSpendingRestrictionsRequestBody_TransactionAmountLimit) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsApiCardSpendingRestrictionsUpdateRequestBodyAmount0 returns the union data inside the ApiCardSpendingRestrictionsUpdateRequestBody_Amount as a ApiCardSpendingRestrictionsUpdateRequestBodyAmount0
func (t ApiCardSpendingRestrictionsUpdateRequestBody_Amount) AsApiCardSpendingRestrictionsUpdateRequestBodyAmount0() (ApiCardSpendingRestrictionsUpdateRequestBodyAmount0, error) {
	var body ApiCardSpendingRestrictionsUpdateRequestBodyAmount0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromApiCardSpendingRestrictionsUpdateRequestBodyAmount0 overwrites any union data inside the ApiCardSpendingRestrictionsUpdateRequestBody_Amount as the provided ApiCardSpendingRestrictionsUpdateRequestBodyAmount0
func (t *ApiCardSpendingRestrictionsUpdateRequestBody_Amount) FromApiCardSpendingRestrictionsUpdateRequestBodyAmount0(v ApiCardSpendingRestrictionsUpdateRequestBodyAmount0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeApiCardSpendingRestrictionsUpdateRequestBodyAmount0 performs a merge with any union data inside the ApiCardSpendingRestrictionsUpdateRequestBody_Amount, using the provided ApiCardSpendingRestrictionsUpdateRequestBodyAmount0
func (t *ApiCardSpendingRestrictionsUpdateRequestBody_Amount) MergeApiCardSpendingRestrictionsUpdateRequestBodyAmount0(v ApiCardSpendingRestrictionsUpdateRequestBodyAmount0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsApiCardSpendingRestrictionsUpdateRequestBodyAmount1 returns the union data inside the ApiCardSpendingRestrictionsUpdateRequestBody_Amount as a ApiCardSpendingRestrictionsUpdateRequestBodyAmount1
func (t ApiCardSpendingRestrictionsUpdateRequestBody_Amount) AsApiCardSpendingRestrictionsUpdateRequestBodyAmount1() (ApiCardSpendingRestrictionsUpdateRequestBodyAmount1, error) {
	var body ApiCardSpendingRestrictionsUpdateRequestBodyAmount1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromApiCardSpendingRestrictionsUpdateRequestBodyAmount1 overwrites any union data inside the ApiCardSpendingRestrictionsUpdateRequestBody_Amount as the provided ApiCardSpendingRestrictionsUpdateRequestBodyAmount1
func (t *ApiCardSpendingRestrictionsUpdateRequestBody_Amount) FromApiCardSpendingRestrictionsUpdateRequestBodyAmount1(v ApiCardSpendingRestrictionsUpdateRequestBodyAmount1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeApiCardSpendingRestrictionsUpdateRequestBodyAmount1 performs a merge with any union data inside the ApiCardSpendingRestrictionsUpdateRequestBody_Amount, using the provided ApiCardSpendingRestrictionsUpdateRequestBodyAmount1
func (t *ApiCardSpendingRestrictionsUpdateRequestBody_Amount) MergeApiCardSpendingRestrictionsUpdateRequestBodyAmount1(v ApiCardSpendingRestrictionsUpdateRequestBodyAmount1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t ApiCardSpendingRestrictionsUpdateRequestBody_Amount) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ApiCardSpendingRestrictionsUpdateRequestBody_Amount) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsApiCardSpendingRestrictionsUpdateRequestBodyTransactionAmountLimit0 returns the union data inside the ApiCardSpendingRestrictionsUpdateRequestBody_TransactionAmountLimit as a ApiCardSpendingRestrictionsUpdateRequestBodyTransactionAmountLimit0
func (t ApiCardSpendingRestrictionsUpdateRequestBody_TransactionAmountLimit) AsApiCardSpendingRestrictionsUpdateRequestBodyTransactionAmountLimit0() (ApiCardSpendingRestrictionsUpdateRequestBodyTransactionAmountLimit0, error) {
	var body ApiCardSpendingRestrictionsUpdateRequestBodyTransactionAmountLimit0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromApiCardSpendingRestrictionsUpdateRequestBodyTransactionAmountLimit0 overwrites any union data inside the ApiCardSpendingRestrictionsUpdateRequestBody_TransactionAmountLimit as the provided ApiCardSpendingRestrictionsUpdateRequestBodyTransactionAmountLimit0
func (t *ApiCardSpendingRestrictionsUpdateRequestBody_TransactionAmountLimit) FromApiCardSpendingRestrictionsUpdateRequestBodyTransactionAmountLimit0(v ApiCardSpendingRestrictionsUpdateRequestBodyTransactionAmountLimit0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeApiCardSpendingRestrictionsUpdateRequestBodyTransactionAmountLimit0 performs a merge with any union data inside the ApiCardSpendingRestrictionsUpdateRequestBody_TransactionAmountLimit, using the provided ApiCardSpendingRestrictionsUpdateRequestBodyTransactionAmountLimit0
func (t *ApiCardSpendingRestrictionsUpdateRequestBody_TransactionAmountLimit) MergeApiCardSpendingRestrictionsUpdateRequestBodyTransactionAmountLimit0(v ApiCardSpendingRestrictionsUpdateRequestBodyTransactionAmountLimit0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsApiCardSpendingRestrictionsUpdateRequestBodyTransactionAmountLimit1 returns the union data inside the ApiCardSpendingRestrictionsUpdateRequestBody_TransactionAmountLimit as a ApiCardSpendingRestrictionsUpdateRequestBodyTransactionAmountLimit1
func (t ApiCardSpendingRestrictionsUpdateRequestBody_TransactionAmountLimit) AsApiCardSpendingRestrictionsUpdateRequestBodyTransactionAmountLimit1() (ApiCardSpendingRestrictionsUpdateRequestBodyTransactionAmountLimit1, error) {
	var body ApiCardSpendingRestrictionsUpdateRequestBodyTransactionAmountLimit1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromApiCardSpendingRestrictionsUpdateRequestBodyTransactionAmountLimit1 overwrites any union data inside the ApiCardSpendingRestrictionsUpdateRequestBody_TransactionAmountLimit as the provided ApiCardSpendingRestrictionsUpdateRequestBodyTransactionAmountLimit1
func (t *ApiCardSpendingRestrictionsUpdateRequestBody_TransactionAmountLimit) FromApiCardSpendingRestrictionsUpdateRequestBodyTransactionAmountLimit1(v ApiCardSpendingRestrictionsUpdateRequestBodyTransactionAmountLimit1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeApiCardSpendingRestrictionsUpdateRequestBodyTransactionAmountLimit1 performs a merge with any union data inside the ApiCardSpendingRestrictionsUpdateRequestBody_TransactionAmountLimit, using the provided ApiCardSpendingRestrictionsUpdateRequestBodyTransactionAmountLimit1
func (t *ApiCardSpendingRestrictionsUpdateRequestBody_TransactionAmountLimit) MergeApiCardSpendingRestrictionsUpdateRequestBodyTransactionAmountLimit1(v ApiCardSpendingRestrictionsUpdateRequestBodyTransactionAmountLimit1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t ApiCardSpendingRestrictionsUpdateRequestBody_TransactionAmountLimit) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ApiCardSpendingRestrictionsUpdateRequestBody_TransactionAmountLimit) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetGlAccountListResource request
	GetGlAccountListResource(ctx context.Context, params *GetGlAccountListResourceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGlAccountListResource request with any body
	PostGlAccountListResourceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGlAccountListResource(ctx context.Context, body PostGlAccountListResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteGlAccountResource request
	DeleteGlAccountResource(ctx context.Context, glAccountId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGlAccountResource request
	GetGlAccountResource(ctx context.Context, glAccountId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchGlAccountResource request with any body
	PatchGlAccountResourceWithBody(ctx context.Context, glAccountId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchGlAccountResource(ctx context.Context, glAccountId string, body PatchGlAccountResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAccountingConnectionResouce request
	DeleteAccountingConnectionResouce(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAccountingConnectionResouce request
	GetAccountingConnectionResouce(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAccountingConnectionResouce request with any body
	PostAccountingConnectionResouceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAccountingConnectionResouce(ctx context.Context, body PostAccountingConnectionResouceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCustomFieldOptionListResource request
	GetCustomFieldOptionListResource(ctx context.Context, params *GetCustomFieldOptionListResourceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCustomFieldOptionListResource request with any body
	PostCustomFieldOptionListResourceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCustomFieldOptionListResource(ctx context.Context, body PostCustomFieldOptionListResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCustomFieldOptionResource request
	DeleteCustomFieldOptionResource(ctx context.Context, fieldOptionId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCustomFieldOptionResource request
	GetCustomFieldOptionResource(ctx context.Context, fieldOptionId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchCustomFieldOptionResource request with any body
	PatchCustomFieldOptionResourceWithBody(ctx context.Context, fieldOptionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchCustomFieldOptionResource(ctx context.Context, fieldOptionId string, body PatchCustomFieldOptionResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCustomFieldListResource request
	GetCustomFieldListResource(ctx context.Context, params *GetCustomFieldListResourceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCustomFieldListResource request with any body
	PostCustomFieldListResourceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCustomFieldListResource(ctx context.Context, body PostCustomFieldListResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCustomFieldResource request
	DeleteCustomFieldResource(ctx context.Context, fieldId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCustomFieldResource request
	GetCustomFieldResource(ctx context.Context, fieldId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchCustomFieldResource request with any body
	PatchCustomFieldResourceWithBody(ctx context.Context, fieldId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchCustomFieldResource(ctx context.Context, fieldId string, body PatchCustomFieldResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSubsidiaryListResource request
	GetSubsidiaryListResource(ctx context.Context, params *GetSubsidiaryListResourceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSubsidiaryListResource request with any body
	PostSubsidiaryListResourceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSubsidiaryListResource(ctx context.Context, body PostSubsidiaryListResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSubsidiaryResource request
	DeleteSubsidiaryResource(ctx context.Context, subsidiaryId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSubsidiaryResource request
	GetSubsidiaryResource(ctx context.Context, subsidiaryId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchSubsidiaryResource request with any body
	PatchSubsidiaryResourceWithBody(ctx context.Context, subsidiaryId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchSubsidiaryResource(ctx context.Context, subsidiaryId string, body PatchSubsidiaryResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSyncListResource request with any body
	PostSyncListResourceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSyncListResource(ctx context.Context, body PostSyncListResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSyncResource request
	GetSyncResource(ctx context.Context, syncId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVendorListResource request
	GetVendorListResource(ctx context.Context, params *GetVendorListResourceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostVendorListResource request with any body
	PostVendorListResourceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostVendorListResource(ctx context.Context, body PostVendorListResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteVendorResource request
	DeleteVendorResource(ctx context.Context, vendorId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVendorResource request
	GetVendorResource(ctx context.Context, vendorId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchVendorResource request with any body
	PatchVendorResourceWithBody(ctx context.Context, vendorId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchVendorResource(ctx context.Context, vendorId string, body PatchVendorResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBusinessResource request
	GetBusinessResource(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBusinessBalanceResource request
	GetBusinessBalanceResource(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCardProgramListDeprecated request
	GetCardProgramListDeprecated(ctx context.Context, params *GetCardProgramListDeprecatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCardProgramListDeprecated request with any body
	PostCardProgramListDeprecatedWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCardProgramListDeprecated(ctx context.Context, body PostCardProgramListDeprecatedJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCardProgramResourceDeprecated request
	GetCardProgramResourceDeprecated(ctx context.Context, cardProgramId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCardListWithPagination request
	GetCardListWithPagination(ctx context.Context, params *GetCardListWithPaginationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPhysicalCard request with any body
	PostPhysicalCardWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPhysicalCard(ctx context.Context, body PostPhysicalCardJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCardDeferredTaskResource request
	GetCardDeferredTaskResource(ctx context.Context, taskUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostVirtualCard request with any body
	PostVirtualCardWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostVirtualCard(ctx context.Context, body PostVirtualCardJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCardResource request
	GetCardResource(ctx context.Context, cardId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchCardResource request with any body
	PatchCardResourceWithBody(ctx context.Context, cardId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchCardResource(ctx context.Context, cardId string, body PatchCardResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCardSuspensionResource request with any body
	PostCardSuspensionResourceWithBody(ctx context.Context, cardId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCardSuspensionResource(ctx context.Context, cardId string, body PostCardSuspensionResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCardTerminationResource request with any body
	PostCardTerminationResourceWithBody(ctx context.Context, cardId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCardTerminationResource(ctx context.Context, cardId string, body PostCardTerminationResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCardUnsuspensionResource request with any body
	PostCardUnsuspensionResourceWithBody(ctx context.Context, cardId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCardUnsuspensionResource(ctx context.Context, cardId string, body PostCardUnsuspensionResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCashbackListWithPagination request
	GetCashbackListWithPagination(ctx context.Context, params *GetCashbackListWithPaginationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCashbackResource request
	GetCashbackResource(ctx context.Context, cashbackId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDepartmentListWithPagination request
	GetDepartmentListWithPagination(ctx context.Context, params *GetDepartmentListWithPaginationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDepartmentListWithPagination request with any body
	PostDepartmentListWithPaginationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDepartmentListWithPagination(ctx context.Context, body PostDepartmentListWithPaginationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDepartmentResource request
	GetDepartmentResource(ctx context.Context, departmentUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchDepartmentResource request with any body
	PatchDepartmentResourceWithBody(ctx context.Context, departmentUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchDepartmentResource(ctx context.Context, departmentUuid string, body PatchDepartmentResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSalesLeadCreation request with any body
	PostSalesLeadCreationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSalesLeadCreation(ctx context.Context, body PostSalesLeadCreationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSalesLeadResource request
	GetSalesLeadResource(ctx context.Context, salesLeadId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSalesLeadDocumentUpload request
	PostSalesLeadDocumentUpload(ctx context.Context, salesLeadId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSpendLimitListWithPagination request
	GetSpendLimitListWithPagination(ctx context.Context, params *GetSpendLimitListWithPaginationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSpendLimitCreation request with any body
	PostSpendLimitCreationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSpendLimitCreation(ctx context.Context, body PostSpendLimitCreationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSpendLimitDeferredTaskStatus request
	GetSpendLimitDeferredTaskStatus(ctx context.Context, taskUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSpendLimitResource request
	GetSpendLimitResource(ctx context.Context, spendLimitId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchSpendLimitResource request
	PatchSpendLimitResource(ctx context.Context, spendLimitId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSpendLimitTerminationResource request with any body
	PostSpendLimitTerminationResourceWithBody(ctx context.Context, spendLimitId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSpendLimitTerminationResource(ctx context.Context, spendLimitId string, body PostSpendLimitTerminationResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSpendLimitSuspensionResource request
	PostSpendLimitSuspensionResource(ctx context.Context, spendLimitId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSpendLimitUnsuspensionResource request
	PostSpendLimitUnsuspensionResource(ctx context.Context, spendLimitId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLocationListResource request
	GetLocationListResource(ctx context.Context, params *GetLocationListResourceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostLocationListResource request with any body
	PostLocationListResourceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostLocationListResource(ctx context.Context, body PostLocationListResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLocationSingleResource request
	GetLocationSingleResource(ctx context.Context, locationUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchLocationSingleResource request with any body
	PatchLocationSingleResourceWithBody(ctx context.Context, locationUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchLocationSingleResource(ctx context.Context, locationUuid string, body PatchLocationSingleResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMemoListWithPagination request
	GetMemoListWithPagination(ctx context.Context, params *GetMemoListWithPaginationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMemoSingleResource request
	GetMemoSingleResource(ctx context.Context, transactionId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMerchantListWithPagination request
	GetMerchantListWithPagination(ctx context.Context, params *GetMerchantListWithPaginationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetReceiptIntegrationOptedOutEmailsListResource request with any body
	GetReceiptIntegrationOptedOutEmailsListResourceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetReceiptIntegrationOptedOutEmailsListResource(ctx context.Context, body GetReceiptIntegrationOptedOutEmailsListResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostReceiptIntegrationOptedOutEmailsListResource request with any body
	PostReceiptIntegrationOptedOutEmailsListResourceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostReceiptIntegrationOptedOutEmailsListResource(ctx context.Context, body PostReceiptIntegrationOptedOutEmailsListResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteReceiptIntegrationOptedOutEmailsDeleteResource request
	DeleteReceiptIntegrationOptedOutEmailsDeleteResource(ctx context.Context, mailboxOptedOutEmailUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetReceiptListWithPagination request
	GetReceiptListWithPagination(ctx context.Context, params *GetReceiptListWithPaginationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetReceiptSingleResource request
	GetReceiptSingleResource(ctx context.Context, receiptId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetReimbursementListWithPagination request
	GetReimbursementListWithPagination(ctx context.Context, params *GetReimbursementListWithPaginationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetReimbursementResource request
	GetReimbursementResource(ctx context.Context, reimbursementId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSpendProgramResource request
	GetSpendProgramResource(ctx context.Context, params *GetSpendProgramResourceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSpendProgramResource request with any body
	PostSpendProgramResourceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSpendProgramResource(ctx context.Context, body PostSpendProgramResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSpendProgramSingleResource request
	GetSpendProgramSingleResource(ctx context.Context, spendProgramId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatementListWithPagination request
	GetStatementListWithPagination(ctx context.Context, params *GetStatementListWithPaginationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatementResource request
	GetStatementResource(ctx context.Context, statementId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTransactionsCanonicalListWithPagination request
	GetTransactionsCanonicalListWithPagination(ctx context.Context, params *GetTransactionsCanonicalListWithPaginationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTransactionCanonicalResource request
	GetTransactionCanonicalResource(ctx context.Context, transactionId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTransferListWithPagination request
	GetTransferListWithPagination(ctx context.Context, params *GetTransferListWithPaginationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTransferResource request
	GetTransferResource(ctx context.Context, transferId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserListWithPagination request
	GetUserListWithPagination(ctx context.Context, params *GetUserListWithPaginationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUserCreationDeferredTask request with any body
	PostUserCreationDeferredTaskWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUserCreationDeferredTask(ctx context.Context, body PostUserCreationDeferredTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserDeferredTaskResource request
	GetUserDeferredTaskResource(ctx context.Context, taskUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUserResource request
	DeleteUserResource(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserResource request
	GetUserResource(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchUserResource request with any body
	PatchUserResourceWithBody(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchUserResource(ctx context.Context, userId string, body PatchUserResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetGlAccountListResource(ctx context.Context, params *GetGlAccountListResourceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGlAccountListResourceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGlAccountListResourceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGlAccountListResourceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGlAccountListResource(ctx context.Context, body PostGlAccountListResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGlAccountListResourceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteGlAccountResource(ctx context.Context, glAccountId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteGlAccountResourceRequest(c.Server, glAccountId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGlAccountResource(ctx context.Context, glAccountId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGlAccountResourceRequest(c.Server, glAccountId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchGlAccountResourceWithBody(ctx context.Context, glAccountId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchGlAccountResourceRequestWithBody(c.Server, glAccountId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchGlAccountResource(ctx context.Context, glAccountId string, body PatchGlAccountResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchGlAccountResourceRequest(c.Server, glAccountId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAccountingConnectionResouce(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAccountingConnectionResouceRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAccountingConnectionResouce(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAccountingConnectionResouceRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAccountingConnectionResouceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAccountingConnectionResouceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAccountingConnectionResouce(ctx context.Context, body PostAccountingConnectionResouceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAccountingConnectionResouceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCustomFieldOptionListResource(ctx context.Context, params *GetCustomFieldOptionListResourceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCustomFieldOptionListResourceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCustomFieldOptionListResourceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCustomFieldOptionListResourceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCustomFieldOptionListResource(ctx context.Context, body PostCustomFieldOptionListResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCustomFieldOptionListResourceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCustomFieldOptionResource(ctx context.Context, fieldOptionId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCustomFieldOptionResourceRequest(c.Server, fieldOptionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCustomFieldOptionResource(ctx context.Context, fieldOptionId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCustomFieldOptionResourceRequest(c.Server, fieldOptionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchCustomFieldOptionResourceWithBody(ctx context.Context, fieldOptionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchCustomFieldOptionResourceRequestWithBody(c.Server, fieldOptionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchCustomFieldOptionResource(ctx context.Context, fieldOptionId string, body PatchCustomFieldOptionResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchCustomFieldOptionResourceRequest(c.Server, fieldOptionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCustomFieldListResource(ctx context.Context, params *GetCustomFieldListResourceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCustomFieldListResourceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCustomFieldListResourceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCustomFieldListResourceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCustomFieldListResource(ctx context.Context, body PostCustomFieldListResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCustomFieldListResourceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCustomFieldResource(ctx context.Context, fieldId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCustomFieldResourceRequest(c.Server, fieldId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCustomFieldResource(ctx context.Context, fieldId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCustomFieldResourceRequest(c.Server, fieldId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchCustomFieldResourceWithBody(ctx context.Context, fieldId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchCustomFieldResourceRequestWithBody(c.Server, fieldId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchCustomFieldResource(ctx context.Context, fieldId string, body PatchCustomFieldResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchCustomFieldResourceRequest(c.Server, fieldId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSubsidiaryListResource(ctx context.Context, params *GetSubsidiaryListResourceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSubsidiaryListResourceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSubsidiaryListResourceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSubsidiaryListResourceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSubsidiaryListResource(ctx context.Context, body PostSubsidiaryListResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSubsidiaryListResourceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSubsidiaryResource(ctx context.Context, subsidiaryId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSubsidiaryResourceRequest(c.Server, subsidiaryId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSubsidiaryResource(ctx context.Context, subsidiaryId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSubsidiaryResourceRequest(c.Server, subsidiaryId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchSubsidiaryResourceWithBody(ctx context.Context, subsidiaryId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchSubsidiaryResourceRequestWithBody(c.Server, subsidiaryId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchSubsidiaryResource(ctx context.Context, subsidiaryId string, body PatchSubsidiaryResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchSubsidiaryResourceRequest(c.Server, subsidiaryId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSyncListResourceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSyncListResourceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSyncListResource(ctx context.Context, body PostSyncListResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSyncListResourceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSyncResource(ctx context.Context, syncId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSyncResourceRequest(c.Server, syncId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVendorListResource(ctx context.Context, params *GetVendorListResourceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVendorListResourceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVendorListResourceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVendorListResourceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVendorListResource(ctx context.Context, body PostVendorListResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVendorListResourceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteVendorResource(ctx context.Context, vendorId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteVendorResourceRequest(c.Server, vendorId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVendorResource(ctx context.Context, vendorId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVendorResourceRequest(c.Server, vendorId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchVendorResourceWithBody(ctx context.Context, vendorId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchVendorResourceRequestWithBody(c.Server, vendorId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchVendorResource(ctx context.Context, vendorId string, body PatchVendorResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchVendorResourceRequest(c.Server, vendorId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBusinessResource(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBusinessResourceRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBusinessBalanceResource(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBusinessBalanceResourceRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCardProgramListDeprecated(ctx context.Context, params *GetCardProgramListDeprecatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCardProgramListDeprecatedRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCardProgramListDeprecatedWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCardProgramListDeprecatedRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCardProgramListDeprecated(ctx context.Context, body PostCardProgramListDeprecatedJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCardProgramListDeprecatedRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCardProgramResourceDeprecated(ctx context.Context, cardProgramId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCardProgramResourceDeprecatedRequest(c.Server, cardProgramId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCardListWithPagination(ctx context.Context, params *GetCardListWithPaginationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCardListWithPaginationRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPhysicalCardWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPhysicalCardRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPhysicalCard(ctx context.Context, body PostPhysicalCardJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPhysicalCardRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCardDeferredTaskResource(ctx context.Context, taskUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCardDeferredTaskResourceRequest(c.Server, taskUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVirtualCardWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVirtualCardRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVirtualCard(ctx context.Context, body PostVirtualCardJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVirtualCardRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCardResource(ctx context.Context, cardId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCardResourceRequest(c.Server, cardId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchCardResourceWithBody(ctx context.Context, cardId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchCardResourceRequestWithBody(c.Server, cardId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchCardResource(ctx context.Context, cardId string, body PatchCardResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchCardResourceRequest(c.Server, cardId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCardSuspensionResourceWithBody(ctx context.Context, cardId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCardSuspensionResourceRequestWithBody(c.Server, cardId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCardSuspensionResource(ctx context.Context, cardId string, body PostCardSuspensionResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCardSuspensionResourceRequest(c.Server, cardId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCardTerminationResourceWithBody(ctx context.Context, cardId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCardTerminationResourceRequestWithBody(c.Server, cardId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCardTerminationResource(ctx context.Context, cardId string, body PostCardTerminationResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCardTerminationResourceRequest(c.Server, cardId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCardUnsuspensionResourceWithBody(ctx context.Context, cardId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCardUnsuspensionResourceRequestWithBody(c.Server, cardId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCardUnsuspensionResource(ctx context.Context, cardId string, body PostCardUnsuspensionResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCardUnsuspensionResourceRequest(c.Server, cardId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCashbackListWithPagination(ctx context.Context, params *GetCashbackListWithPaginationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCashbackListWithPaginationRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCashbackResource(ctx context.Context, cashbackId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCashbackResourceRequest(c.Server, cashbackId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDepartmentListWithPagination(ctx context.Context, params *GetDepartmentListWithPaginationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDepartmentListWithPaginationRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDepartmentListWithPaginationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDepartmentListWithPaginationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDepartmentListWithPagination(ctx context.Context, body PostDepartmentListWithPaginationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDepartmentListWithPaginationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDepartmentResource(ctx context.Context, departmentUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDepartmentResourceRequest(c.Server, departmentUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchDepartmentResourceWithBody(ctx context.Context, departmentUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchDepartmentResourceRequestWithBody(c.Server, departmentUuid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchDepartmentResource(ctx context.Context, departmentUuid string, body PatchDepartmentResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchDepartmentResourceRequest(c.Server, departmentUuid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSalesLeadCreationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSalesLeadCreationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSalesLeadCreation(ctx context.Context, body PostSalesLeadCreationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSalesLeadCreationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSalesLeadResource(ctx context.Context, salesLeadId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSalesLeadResourceRequest(c.Server, salesLeadId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSalesLeadDocumentUpload(ctx context.Context, salesLeadId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSalesLeadDocumentUploadRequest(c.Server, salesLeadId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSpendLimitListWithPagination(ctx context.Context, params *GetSpendLimitListWithPaginationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSpendLimitListWithPaginationRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSpendLimitCreationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSpendLimitCreationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSpendLimitCreation(ctx context.Context, body PostSpendLimitCreationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSpendLimitCreationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSpendLimitDeferredTaskStatus(ctx context.Context, taskUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSpendLimitDeferredTaskStatusRequest(c.Server, taskUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSpendLimitResource(ctx context.Context, spendLimitId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSpendLimitResourceRequest(c.Server, spendLimitId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchSpendLimitResource(ctx context.Context, spendLimitId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchSpendLimitResourceRequest(c.Server, spendLimitId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSpendLimitTerminationResourceWithBody(ctx context.Context, spendLimitId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSpendLimitTerminationResourceRequestWithBody(c.Server, spendLimitId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSpendLimitTerminationResource(ctx context.Context, spendLimitId string, body PostSpendLimitTerminationResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSpendLimitTerminationResourceRequest(c.Server, spendLimitId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSpendLimitSuspensionResource(ctx context.Context, spendLimitId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSpendLimitSuspensionResourceRequest(c.Server, spendLimitId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSpendLimitUnsuspensionResource(ctx context.Context, spendLimitId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSpendLimitUnsuspensionResourceRequest(c.Server, spendLimitId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLocationListResource(ctx context.Context, params *GetLocationListResourceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLocationListResourceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLocationListResourceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLocationListResourceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLocationListResource(ctx context.Context, body PostLocationListResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLocationListResourceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLocationSingleResource(ctx context.Context, locationUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLocationSingleResourceRequest(c.Server, locationUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchLocationSingleResourceWithBody(ctx context.Context, locationUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchLocationSingleResourceRequestWithBody(c.Server, locationUuid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchLocationSingleResource(ctx context.Context, locationUuid string, body PatchLocationSingleResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchLocationSingleResourceRequest(c.Server, locationUuid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMemoListWithPagination(ctx context.Context, params *GetMemoListWithPaginationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMemoListWithPaginationRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMemoSingleResource(ctx context.Context, transactionId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMemoSingleResourceRequest(c.Server, transactionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMerchantListWithPagination(ctx context.Context, params *GetMerchantListWithPaginationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMerchantListWithPaginationRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReceiptIntegrationOptedOutEmailsListResourceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReceiptIntegrationOptedOutEmailsListResourceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReceiptIntegrationOptedOutEmailsListResource(ctx context.Context, body GetReceiptIntegrationOptedOutEmailsListResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReceiptIntegrationOptedOutEmailsListResourceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostReceiptIntegrationOptedOutEmailsListResourceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostReceiptIntegrationOptedOutEmailsListResourceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostReceiptIntegrationOptedOutEmailsListResource(ctx context.Context, body PostReceiptIntegrationOptedOutEmailsListResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostReceiptIntegrationOptedOutEmailsListResourceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteReceiptIntegrationOptedOutEmailsDeleteResource(ctx context.Context, mailboxOptedOutEmailUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteReceiptIntegrationOptedOutEmailsDeleteResourceRequest(c.Server, mailboxOptedOutEmailUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReceiptListWithPagination(ctx context.Context, params *GetReceiptListWithPaginationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReceiptListWithPaginationRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReceiptSingleResource(ctx context.Context, receiptId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReceiptSingleResourceRequest(c.Server, receiptId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReimbursementListWithPagination(ctx context.Context, params *GetReimbursementListWithPaginationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReimbursementListWithPaginationRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReimbursementResource(ctx context.Context, reimbursementId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReimbursementResourceRequest(c.Server, reimbursementId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSpendProgramResource(ctx context.Context, params *GetSpendProgramResourceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSpendProgramResourceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSpendProgramResourceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSpendProgramResourceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSpendProgramResource(ctx context.Context, body PostSpendProgramResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSpendProgramResourceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSpendProgramSingleResource(ctx context.Context, spendProgramId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSpendProgramSingleResourceRequest(c.Server, spendProgramId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatementListWithPagination(ctx context.Context, params *GetStatementListWithPaginationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatementListWithPaginationRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatementResource(ctx context.Context, statementId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatementResourceRequest(c.Server, statementId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTransactionsCanonicalListWithPagination(ctx context.Context, params *GetTransactionsCanonicalListWithPaginationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTransactionsCanonicalListWithPaginationRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTransactionCanonicalResource(ctx context.Context, transactionId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTransactionCanonicalResourceRequest(c.Server, transactionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTransferListWithPagination(ctx context.Context, params *GetTransferListWithPaginationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTransferListWithPaginationRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTransferResource(ctx context.Context, transferId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTransferResourceRequest(c.Server, transferId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserListWithPagination(ctx context.Context, params *GetUserListWithPaginationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserListWithPaginationRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserCreationDeferredTaskWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserCreationDeferredTaskRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserCreationDeferredTask(ctx context.Context, body PostUserCreationDeferredTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserCreationDeferredTaskRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserDeferredTaskResource(ctx context.Context, taskUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserDeferredTaskResourceRequest(c.Server, taskUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUserResource(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserResourceRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserResource(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserResourceRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchUserResourceWithBody(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchUserResourceRequestWithBody(c.Server, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchUserResource(ctx context.Context, userId string, body PatchUserResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchUserResourceRequest(c.Server, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetGlAccountListResourceRequest generates requests for GetGlAccountListResource
func NewGetGlAccountListResourceRequest(server string, params *GetGlAccountListResourceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/accounting/accounts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Start != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IsActive != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "is_active", runtime.ParamLocationQuery, *params.IsActive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IsSynced != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "is_synced", runtime.ParamLocationQuery, *params.IsSynced); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostGlAccountListResourceRequest calls the generic PostGlAccountListResource builder with application/json body
func NewPostGlAccountListResourceRequest(server string, body PostGlAccountListResourceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGlAccountListResourceRequestWithBody(server, "application/json", bodyReader)
}

// NewPostGlAccountListResourceRequestWithBody generates requests for PostGlAccountListResource with any type of body
func NewPostGlAccountListResourceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/accounting/accounts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteGlAccountResourceRequest generates requests for DeleteGlAccountResource
func NewDeleteGlAccountResourceRequest(server string, glAccountId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "gl_account_id", runtime.ParamLocationPath, glAccountId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/accounting/accounts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGlAccountResourceRequest generates requests for GetGlAccountResource
func NewGetGlAccountResourceRequest(server string, glAccountId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "gl_account_id", runtime.ParamLocationPath, glAccountId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/accounting/accounts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchGlAccountResourceRequest calls the generic PatchGlAccountResource builder with application/json body
func NewPatchGlAccountResourceRequest(server string, glAccountId string, body PatchGlAccountResourceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchGlAccountResourceRequestWithBody(server, glAccountId, "application/json", bodyReader)
}

// NewPatchGlAccountResourceRequestWithBody generates requests for PatchGlAccountResource with any type of body
func NewPatchGlAccountResourceRequestWithBody(server string, glAccountId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "gl_account_id", runtime.ParamLocationPath, glAccountId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/accounting/accounts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAccountingConnectionResouceRequest generates requests for DeleteAccountingConnectionResouce
func NewDeleteAccountingConnectionResouceRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/accounting/connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAccountingConnectionResouceRequest generates requests for GetAccountingConnectionResouce
func NewGetAccountingConnectionResouceRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/accounting/connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAccountingConnectionResouceRequest calls the generic PostAccountingConnectionResouce builder with application/json body
func NewPostAccountingConnectionResouceRequest(server string, body PostAccountingConnectionResouceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAccountingConnectionResouceRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAccountingConnectionResouceRequestWithBody generates requests for PostAccountingConnectionResouce with any type of body
func NewPostAccountingConnectionResouceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/accounting/connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCustomFieldOptionListResourceRequest generates requests for GetCustomFieldOptionListResource
func NewGetCustomFieldOptionListResourceRequest(server string, params *GetCustomFieldOptionListResourceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/accounting/field-options")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Start != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "field_id", runtime.ParamLocationQuery, params.FieldId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.IsActive != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "is_active", runtime.ParamLocationQuery, *params.IsActive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCustomFieldOptionListResourceRequest calls the generic PostCustomFieldOptionListResource builder with application/json body
func NewPostCustomFieldOptionListResourceRequest(server string, body PostCustomFieldOptionListResourceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCustomFieldOptionListResourceRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCustomFieldOptionListResourceRequestWithBody generates requests for PostCustomFieldOptionListResource with any type of body
func NewPostCustomFieldOptionListResourceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/accounting/field-options")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCustomFieldOptionResourceRequest generates requests for DeleteCustomFieldOptionResource
func NewDeleteCustomFieldOptionResourceRequest(server string, fieldOptionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "field_option_id", runtime.ParamLocationPath, fieldOptionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/accounting/field-options/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCustomFieldOptionResourceRequest generates requests for GetCustomFieldOptionResource
func NewGetCustomFieldOptionResourceRequest(server string, fieldOptionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "field_option_id", runtime.ParamLocationPath, fieldOptionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/accounting/field-options/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchCustomFieldOptionResourceRequest calls the generic PatchCustomFieldOptionResource builder with application/json body
func NewPatchCustomFieldOptionResourceRequest(server string, fieldOptionId string, body PatchCustomFieldOptionResourceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchCustomFieldOptionResourceRequestWithBody(server, fieldOptionId, "application/json", bodyReader)
}

// NewPatchCustomFieldOptionResourceRequestWithBody generates requests for PatchCustomFieldOptionResource with any type of body
func NewPatchCustomFieldOptionResourceRequestWithBody(server string, fieldOptionId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "field_option_id", runtime.ParamLocationPath, fieldOptionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/accounting/field-options/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCustomFieldListResourceRequest generates requests for GetCustomFieldListResource
func NewGetCustomFieldListResourceRequest(server string, params *GetCustomFieldListResourceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/accounting/fields")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Start != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IsActive != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "is_active", runtime.ParamLocationQuery, *params.IsActive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCustomFieldListResourceRequest calls the generic PostCustomFieldListResource builder with application/json body
func NewPostCustomFieldListResourceRequest(server string, body PostCustomFieldListResourceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCustomFieldListResourceRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCustomFieldListResourceRequestWithBody generates requests for PostCustomFieldListResource with any type of body
func NewPostCustomFieldListResourceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/accounting/fields")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCustomFieldResourceRequest generates requests for DeleteCustomFieldResource
func NewDeleteCustomFieldResourceRequest(server string, fieldId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "field_id", runtime.ParamLocationPath, fieldId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/accounting/fields/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCustomFieldResourceRequest generates requests for GetCustomFieldResource
func NewGetCustomFieldResourceRequest(server string, fieldId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "field_id", runtime.ParamLocationPath, fieldId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/accounting/fields/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchCustomFieldResourceRequest calls the generic PatchCustomFieldResource builder with application/json body
func NewPatchCustomFieldResourceRequest(server string, fieldId string, body PatchCustomFieldResourceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchCustomFieldResourceRequestWithBody(server, fieldId, "application/json", bodyReader)
}

// NewPatchCustomFieldResourceRequestWithBody generates requests for PatchCustomFieldResource with any type of body
func NewPatchCustomFieldResourceRequestWithBody(server string, fieldId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "field_id", runtime.ParamLocationPath, fieldId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/accounting/fields/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSubsidiaryListResourceRequest generates requests for GetSubsidiaryListResource
func NewGetSubsidiaryListResourceRequest(server string, params *GetSubsidiaryListResourceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/accounting/subsidiaries")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Start != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IsActive != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "is_active", runtime.ParamLocationQuery, *params.IsActive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IsSynced != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "is_synced", runtime.ParamLocationQuery, *params.IsSynced); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSubsidiaryListResourceRequest calls the generic PostSubsidiaryListResource builder with application/json body
func NewPostSubsidiaryListResourceRequest(server string, body PostSubsidiaryListResourceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSubsidiaryListResourceRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSubsidiaryListResourceRequestWithBody generates requests for PostSubsidiaryListResource with any type of body
func NewPostSubsidiaryListResourceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/accounting/subsidiaries")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSubsidiaryResourceRequest generates requests for DeleteSubsidiaryResource
func NewDeleteSubsidiaryResourceRequest(server string, subsidiaryId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subsidiary_id", runtime.ParamLocationPath, subsidiaryId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/accounting/subsidiaries/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSubsidiaryResourceRequest generates requests for GetSubsidiaryResource
func NewGetSubsidiaryResourceRequest(server string, subsidiaryId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subsidiary_id", runtime.ParamLocationPath, subsidiaryId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/accounting/subsidiaries/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchSubsidiaryResourceRequest calls the generic PatchSubsidiaryResource builder with application/json body
func NewPatchSubsidiaryResourceRequest(server string, subsidiaryId string, body PatchSubsidiaryResourceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchSubsidiaryResourceRequestWithBody(server, subsidiaryId, "application/json", bodyReader)
}

// NewPatchSubsidiaryResourceRequestWithBody generates requests for PatchSubsidiaryResource with any type of body
func NewPatchSubsidiaryResourceRequestWithBody(server string, subsidiaryId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subsidiary_id", runtime.ParamLocationPath, subsidiaryId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/accounting/subsidiaries/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSyncListResourceRequest calls the generic PostSyncListResource builder with application/json body
func NewPostSyncListResourceRequest(server string, body PostSyncListResourceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSyncListResourceRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSyncListResourceRequestWithBody generates requests for PostSyncListResource with any type of body
func NewPostSyncListResourceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/accounting/syncs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSyncResourceRequest generates requests for GetSyncResource
func NewGetSyncResourceRequest(server string, syncId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "sync_id", runtime.ParamLocationPath, syncId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/accounting/syncs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVendorListResourceRequest generates requests for GetVendorListResource
func NewGetVendorListResourceRequest(server string, params *GetVendorListResourceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/accounting/vendors")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Start != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IsActive != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "is_active", runtime.ParamLocationQuery, *params.IsActive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IsSynced != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "is_synced", runtime.ParamLocationQuery, *params.IsSynced); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostVendorListResourceRequest calls the generic PostVendorListResource builder with application/json body
func NewPostVendorListResourceRequest(server string, body PostVendorListResourceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostVendorListResourceRequestWithBody(server, "application/json", bodyReader)
}

// NewPostVendorListResourceRequestWithBody generates requests for PostVendorListResource with any type of body
func NewPostVendorListResourceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/accounting/vendors")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteVendorResourceRequest generates requests for DeleteVendorResource
func NewDeleteVendorResourceRequest(server string, vendorId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "vendor_id", runtime.ParamLocationPath, vendorId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/accounting/vendors/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVendorResourceRequest generates requests for GetVendorResource
func NewGetVendorResourceRequest(server string, vendorId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "vendor_id", runtime.ParamLocationPath, vendorId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/accounting/vendors/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchVendorResourceRequest calls the generic PatchVendorResource builder with application/json body
func NewPatchVendorResourceRequest(server string, vendorId string, body PatchVendorResourceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchVendorResourceRequestWithBody(server, vendorId, "application/json", bodyReader)
}

// NewPatchVendorResourceRequestWithBody generates requests for PatchVendorResource with any type of body
func NewPatchVendorResourceRequestWithBody(server string, vendorId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "vendor_id", runtime.ParamLocationPath, vendorId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/accounting/vendors/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetBusinessResourceRequest generates requests for GetBusinessResource
func NewGetBusinessResourceRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/business/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBusinessBalanceResourceRequest generates requests for GetBusinessBalanceResource
func NewGetBusinessBalanceResourceRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/business/balance")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCardProgramListDeprecatedRequest generates requests for GetCardProgramListDeprecated
func NewGetCardProgramListDeprecatedRequest(server string, params *GetCardProgramListDeprecatedParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/card-programs/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Start != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCardProgramListDeprecatedRequest calls the generic PostCardProgramListDeprecated builder with application/json body
func NewPostCardProgramListDeprecatedRequest(server string, body PostCardProgramListDeprecatedJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCardProgramListDeprecatedRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCardProgramListDeprecatedRequestWithBody generates requests for PostCardProgramListDeprecated with any type of body
func NewPostCardProgramListDeprecatedRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/card-programs/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCardProgramResourceDeprecatedRequest generates requests for GetCardProgramResourceDeprecated
func NewGetCardProgramResourceDeprecatedRequest(server string, cardProgramId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "card_program_id", runtime.ParamLocationPath, cardProgramId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/card-programs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCardListWithPaginationRequest generates requests for GetCardListWithPagination
func NewGetCardListWithPaginationRequest(server string, params *GetCardListWithPaginationParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/cards/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.UserId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user_id", runtime.ParamLocationQuery, *params.UserId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CardProgramId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "card_program_id", runtime.ParamLocationQuery, *params.CardProgramId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IsActivated != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "is_activated", runtime.ParamLocationQuery, *params.IsActivated); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Start != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPhysicalCardRequest calls the generic PostPhysicalCard builder with application/json body
func NewPostPhysicalCardRequest(server string, body PostPhysicalCardJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPhysicalCardRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPhysicalCardRequestWithBody generates requests for PostPhysicalCard with any type of body
func NewPostPhysicalCardRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/cards/deferred/physical")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCardDeferredTaskResourceRequest generates requests for GetCardDeferredTaskResource
func NewGetCardDeferredTaskResourceRequest(server string, taskUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "task_uuid", runtime.ParamLocationPath, taskUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/cards/deferred/status/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostVirtualCardRequest calls the generic PostVirtualCard builder with application/json body
func NewPostVirtualCardRequest(server string, body PostVirtualCardJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostVirtualCardRequestWithBody(server, "application/json", bodyReader)
}

// NewPostVirtualCardRequestWithBody generates requests for PostVirtualCard with any type of body
func NewPostVirtualCardRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/cards/deferred/virtual")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCardResourceRequest generates requests for GetCardResource
func NewGetCardResourceRequest(server string, cardId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "card_id", runtime.ParamLocationPath, cardId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/cards/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchCardResourceRequest calls the generic PatchCardResource builder with application/json body
func NewPatchCardResourceRequest(server string, cardId string, body PatchCardResourceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchCardResourceRequestWithBody(server, cardId, "application/json", bodyReader)
}

// NewPatchCardResourceRequestWithBody generates requests for PatchCardResource with any type of body
func NewPatchCardResourceRequestWithBody(server string, cardId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "card_id", runtime.ParamLocationPath, cardId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/cards/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCardSuspensionResourceRequest calls the generic PostCardSuspensionResource builder with application/json body
func NewPostCardSuspensionResourceRequest(server string, cardId string, body PostCardSuspensionResourceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCardSuspensionResourceRequestWithBody(server, cardId, "application/json", bodyReader)
}

// NewPostCardSuspensionResourceRequestWithBody generates requests for PostCardSuspensionResource with any type of body
func NewPostCardSuspensionResourceRequestWithBody(server string, cardId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "card_id", runtime.ParamLocationPath, cardId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/cards/%s/deferred/suspension", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCardTerminationResourceRequest calls the generic PostCardTerminationResource builder with application/json body
func NewPostCardTerminationResourceRequest(server string, cardId string, body PostCardTerminationResourceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCardTerminationResourceRequestWithBody(server, cardId, "application/json", bodyReader)
}

// NewPostCardTerminationResourceRequestWithBody generates requests for PostCardTerminationResource with any type of body
func NewPostCardTerminationResourceRequestWithBody(server string, cardId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "card_id", runtime.ParamLocationPath, cardId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/cards/%s/deferred/termination", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCardUnsuspensionResourceRequest calls the generic PostCardUnsuspensionResource builder with application/json body
func NewPostCardUnsuspensionResourceRequest(server string, cardId string, body PostCardUnsuspensionResourceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCardUnsuspensionResourceRequestWithBody(server, cardId, "application/json", bodyReader)
}

// NewPostCardUnsuspensionResourceRequestWithBody generates requests for PostCardUnsuspensionResource with any type of body
func NewPostCardUnsuspensionResourceRequestWithBody(server string, cardId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "card_id", runtime.ParamLocationPath, cardId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/cards/%s/deferred/unsuspension", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCashbackListWithPaginationRequest generates requests for GetCashbackListWithPagination
func NewGetCashbackListWithPaginationRequest(server string, params *GetCashbackListWithPaginationParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/cashbacks/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FromDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from_date", runtime.ParamLocationQuery, *params.FromDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ToDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to_date", runtime.ParamLocationQuery, *params.ToDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Start != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCashbackResourceRequest generates requests for GetCashbackResource
func NewGetCashbackResourceRequest(server string, cashbackId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cashback_id", runtime.ParamLocationPath, cashbackId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/cashbacks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDepartmentListWithPaginationRequest generates requests for GetDepartmentListWithPagination
func NewGetDepartmentListWithPaginationRequest(server string, params *GetDepartmentListWithPaginationParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/departments/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Start != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostDepartmentListWithPaginationRequest calls the generic PostDepartmentListWithPagination builder with application/json body
func NewPostDepartmentListWithPaginationRequest(server string, body PostDepartmentListWithPaginationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDepartmentListWithPaginationRequestWithBody(server, "application/json", bodyReader)
}

// NewPostDepartmentListWithPaginationRequestWithBody generates requests for PostDepartmentListWithPagination with any type of body
func NewPostDepartmentListWithPaginationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/departments/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDepartmentResourceRequest generates requests for GetDepartmentResource
func NewGetDepartmentResourceRequest(server string, departmentUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "department_uuid", runtime.ParamLocationPath, departmentUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/departments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchDepartmentResourceRequest calls the generic PatchDepartmentResource builder with application/json body
func NewPatchDepartmentResourceRequest(server string, departmentUuid string, body PatchDepartmentResourceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchDepartmentResourceRequestWithBody(server, departmentUuid, "application/json", bodyReader)
}

// NewPatchDepartmentResourceRequestWithBody generates requests for PatchDepartmentResource with any type of body
func NewPatchDepartmentResourceRequestWithBody(server string, departmentUuid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "department_uuid", runtime.ParamLocationPath, departmentUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/departments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSalesLeadCreationRequest calls the generic PostSalesLeadCreation builder with application/json body
func NewPostSalesLeadCreationRequest(server string, body PostSalesLeadCreationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSalesLeadCreationRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSalesLeadCreationRequestWithBody generates requests for PostSalesLeadCreation with any type of body
func NewPostSalesLeadCreationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/leads/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSalesLeadResourceRequest generates requests for GetSalesLeadResource
func NewGetSalesLeadResourceRequest(server string, salesLeadId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "sales_lead_id", runtime.ParamLocationPath, salesLeadId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/leads/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSalesLeadDocumentUploadRequest generates requests for PostSalesLeadDocumentUpload
func NewPostSalesLeadDocumentUploadRequest(server string, salesLeadId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "sales_lead_id", runtime.ParamLocationPath, salesLeadId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/leads/%s/upload_document", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSpendLimitListWithPaginationRequest generates requests for GetSpendLimitListWithPagination
func NewGetSpendLimitListWithPaginationRequest(server string, params *GetSpendLimitListWithPaginationParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/limits/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Start != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSpendLimitCreationRequest calls the generic PostSpendLimitCreation builder with application/json body
func NewPostSpendLimitCreationRequest(server string, body PostSpendLimitCreationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSpendLimitCreationRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSpendLimitCreationRequestWithBody generates requests for PostSpendLimitCreation with any type of body
func NewPostSpendLimitCreationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/limits/deferred")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSpendLimitDeferredTaskStatusRequest generates requests for GetSpendLimitDeferredTaskStatus
func NewGetSpendLimitDeferredTaskStatusRequest(server string, taskUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "task_uuid", runtime.ParamLocationPath, taskUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/limits/deferred/status/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSpendLimitResourceRequest generates requests for GetSpendLimitResource
func NewGetSpendLimitResourceRequest(server string, spendLimitId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spend_limit_id", runtime.ParamLocationPath, spendLimitId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/limits/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchSpendLimitResourceRequest generates requests for PatchSpendLimitResource
func NewPatchSpendLimitResourceRequest(server string, spendLimitId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spend_limit_id", runtime.ParamLocationPath, spendLimitId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/limits/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSpendLimitTerminationResourceRequest calls the generic PostSpendLimitTerminationResource builder with application/json body
func NewPostSpendLimitTerminationResourceRequest(server string, spendLimitId string, body PostSpendLimitTerminationResourceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSpendLimitTerminationResourceRequestWithBody(server, spendLimitId, "application/json", bodyReader)
}

// NewPostSpendLimitTerminationResourceRequestWithBody generates requests for PostSpendLimitTerminationResource with any type of body
func NewPostSpendLimitTerminationResourceRequestWithBody(server string, spendLimitId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spend_limit_id", runtime.ParamLocationPath, spendLimitId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/limits/%s/deferred/termination", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSpendLimitSuspensionResourceRequest generates requests for PostSpendLimitSuspensionResource
func NewPostSpendLimitSuspensionResourceRequest(server string, spendLimitId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spend_limit_id", runtime.ParamLocationPath, spendLimitId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/limits/%s/suspension", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSpendLimitUnsuspensionResourceRequest generates requests for PostSpendLimitUnsuspensionResource
func NewPostSpendLimitUnsuspensionResourceRequest(server string, spendLimitId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spend_limit_id", runtime.ParamLocationPath, spendLimitId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/limits/%s/unsuspension", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLocationListResourceRequest generates requests for GetLocationListResource
func NewGetLocationListResourceRequest(server string, params *GetLocationListResourceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/locations/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Start != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostLocationListResourceRequest calls the generic PostLocationListResource builder with application/json body
func NewPostLocationListResourceRequest(server string, body PostLocationListResourceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostLocationListResourceRequestWithBody(server, "application/json", bodyReader)
}

// NewPostLocationListResourceRequestWithBody generates requests for PostLocationListResource with any type of body
func NewPostLocationListResourceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/locations/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetLocationSingleResourceRequest generates requests for GetLocationSingleResource
func NewGetLocationSingleResourceRequest(server string, locationUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "location_uuid", runtime.ParamLocationPath, locationUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/locations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchLocationSingleResourceRequest calls the generic PatchLocationSingleResource builder with application/json body
func NewPatchLocationSingleResourceRequest(server string, locationUuid string, body PatchLocationSingleResourceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchLocationSingleResourceRequestWithBody(server, locationUuid, "application/json", bodyReader)
}

// NewPatchLocationSingleResourceRequestWithBody generates requests for PatchLocationSingleResource with any type of body
func NewPatchLocationSingleResourceRequestWithBody(server string, locationUuid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "location_uuid", runtime.ParamLocationPath, locationUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/locations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMemoListWithPaginationRequest generates requests for GetMemoListWithPagination
func NewGetMemoListWithPaginationRequest(server string, params *GetMemoListWithPaginationParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/memos/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Start != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CardId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "card_id", runtime.ParamLocationQuery, *params.CardId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DepartmentId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "department_id", runtime.ParamLocationQuery, *params.DepartmentId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FromDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from_date", runtime.ParamLocationQuery, *params.FromDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LocationId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "location_id", runtime.ParamLocationQuery, *params.LocationId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ManagerId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "manager_id", runtime.ParamLocationQuery, *params.ManagerId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.MerchantId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "merchant_id", runtime.ParamLocationQuery, *params.MerchantId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ToDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to_date", runtime.ParamLocationQuery, *params.ToDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.UserId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user_id", runtime.ParamLocationQuery, *params.UserId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMemoSingleResourceRequest generates requests for GetMemoSingleResource
func NewGetMemoSingleResourceRequest(server string, transactionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "transaction_id", runtime.ParamLocationPath, transactionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/memos/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMerchantListWithPaginationRequest generates requests for GetMerchantListWithPagination
func NewGetMerchantListWithPaginationRequest(server string, params *GetMerchantListWithPaginationParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/merchants/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Start != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TransactionFromDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_from_date", runtime.ParamLocationQuery, *params.TransactionFromDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TransactionToDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transaction_to_date", runtime.ParamLocationQuery, *params.TransactionToDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetReceiptIntegrationOptedOutEmailsListResourceRequest calls the generic GetReceiptIntegrationOptedOutEmailsListResource builder with application/json body
func NewGetReceiptIntegrationOptedOutEmailsListResourceRequest(server string, body GetReceiptIntegrationOptedOutEmailsListResourceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetReceiptIntegrationOptedOutEmailsListResourceRequestWithBody(server, "application/json", bodyReader)
}

// NewGetReceiptIntegrationOptedOutEmailsListResourceRequestWithBody generates requests for GetReceiptIntegrationOptedOutEmailsListResource with any type of body
func NewGetReceiptIntegrationOptedOutEmailsListResourceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/receipt-integrations/opt-out")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostReceiptIntegrationOptedOutEmailsListResourceRequest calls the generic PostReceiptIntegrationOptedOutEmailsListResource builder with application/json body
func NewPostReceiptIntegrationOptedOutEmailsListResourceRequest(server string, body PostReceiptIntegrationOptedOutEmailsListResourceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostReceiptIntegrationOptedOutEmailsListResourceRequestWithBody(server, "application/json", bodyReader)
}

// NewPostReceiptIntegrationOptedOutEmailsListResourceRequestWithBody generates requests for PostReceiptIntegrationOptedOutEmailsListResource with any type of body
func NewPostReceiptIntegrationOptedOutEmailsListResourceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/receipt-integrations/opt-out")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteReceiptIntegrationOptedOutEmailsDeleteResourceRequest generates requests for DeleteReceiptIntegrationOptedOutEmailsDeleteResource
func NewDeleteReceiptIntegrationOptedOutEmailsDeleteResourceRequest(server string, mailboxOptedOutEmailUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "mailbox_opted_out_email_uuid", runtime.ParamLocationPath, mailboxOptedOutEmailUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/receipt-integrations/opt-out/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetReceiptListWithPaginationRequest generates requests for GetReceiptListWithPagination
func NewGetReceiptListWithPaginationRequest(server string, params *GetReceiptListWithPaginationParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/receipts/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FromDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from_date", runtime.ParamLocationQuery, *params.FromDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ToDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to_date", runtime.ParamLocationQuery, *params.ToDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CreatedAfter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_after", runtime.ParamLocationQuery, *params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CreatedBefore != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_before", runtime.ParamLocationQuery, *params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Start != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetReceiptSingleResourceRequest generates requests for GetReceiptSingleResource
func NewGetReceiptSingleResourceRequest(server string, receiptId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "receipt_id", runtime.ParamLocationPath, receiptId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/receipts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetReimbursementListWithPaginationRequest generates requests for GetReimbursementListWithPagination
func NewGetReimbursementListWithPaginationRequest(server string, params *GetReimbursementListWithPaginationParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/reimbursements/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.SyncReady != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sync_ready", runtime.ParamLocationQuery, *params.SyncReady); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.HasNoSyncCommits != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "has_no_sync_commits", runtime.ParamLocationQuery, *params.HasNoSyncCommits); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Start != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.UserId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user_id", runtime.ParamLocationQuery, *params.UserId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetReimbursementResourceRequest generates requests for GetReimbursementResource
func NewGetReimbursementResourceRequest(server string, reimbursementId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "reimbursement_id", runtime.ParamLocationPath, reimbursementId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/reimbursements/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSpendProgramResourceRequest generates requests for GetSpendProgramResource
func NewGetSpendProgramResourceRequest(server string, params *GetSpendProgramResourceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/spend-programs/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Start != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSpendProgramResourceRequest calls the generic PostSpendProgramResource builder with application/json body
func NewPostSpendProgramResourceRequest(server string, body PostSpendProgramResourceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSpendProgramResourceRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSpendProgramResourceRequestWithBody generates requests for PostSpendProgramResource with any type of body
func NewPostSpendProgramResourceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/spend-programs/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSpendProgramSingleResourceRequest generates requests for GetSpendProgramSingleResource
func NewGetSpendProgramSingleResourceRequest(server string, spendProgramId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spend_program_id", runtime.ParamLocationPath, spendProgramId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/spend-programs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatementListWithPaginationRequest generates requests for GetStatementListWithPagination
func NewGetStatementListWithPaginationRequest(server string, params *GetStatementListWithPaginationParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/statements/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FromDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from_date", runtime.ParamLocationQuery, *params.FromDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ToDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to_date", runtime.ParamLocationQuery, *params.ToDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Start != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatementResourceRequest generates requests for GetStatementResource
func NewGetStatementResourceRequest(server string, statementId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "statement_id", runtime.ParamLocationPath, statementId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/statements/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTransactionsCanonicalListWithPaginationRequest generates requests for GetTransactionsCanonicalListWithPagination
func NewGetTransactionsCanonicalListWithPaginationRequest(server string, params *GetTransactionsCanonicalListWithPaginationParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/transactions/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.CardId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "card_id", runtime.ParamLocationQuery, *params.CardId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DepartmentId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "department_id", runtime.ParamLocationQuery, *params.DepartmentId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LocationId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "location_id", runtime.ParamLocationQuery, *params.LocationId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.MerchantId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "merchant_id", runtime.ParamLocationQuery, *params.MerchantId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SkCategoryId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sk_category_id", runtime.ParamLocationQuery, *params.SkCategoryId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StatementId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "statement_id", runtime.ParamLocationQuery, *params.StatementId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.State != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "state", runtime.ParamLocationQuery, *params.State); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.UserId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user_id", runtime.ParamLocationQuery, *params.UserId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SyncReady != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sync_ready", runtime.ParamLocationQuery, *params.SyncReady); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FromDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from_date", runtime.ParamLocationQuery, *params.FromDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ToDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to_date", runtime.ParamLocationQuery, *params.ToDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ExpensePolicyInteractionHasAlert != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expense_policy_interaction_has_alert", runtime.ParamLocationQuery, *params.ExpensePolicyInteractionHasAlert); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.MinAmount != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "min_amount", runtime.ParamLocationQuery, *params.MinAmount); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.HasNoSyncCommits != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "has_no_sync_commits", runtime.ParamLocationQuery, *params.HasNoSyncCommits); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.MaxAmount != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max_amount", runtime.ParamLocationQuery, *params.MaxAmount); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ExpensePolicyInteractionNeedsReview != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expense_policy_interaction_needs_review", runtime.ParamLocationQuery, *params.ExpensePolicyInteractionNeedsReview); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RequiresMemo != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "requires_memo", runtime.ParamLocationQuery, *params.RequiresMemo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrderByAmountAsc != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by_amount_asc", runtime.ParamLocationQuery, *params.OrderByAmountAsc); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrderByAmountDesc != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by_amount_desc", runtime.ParamLocationQuery, *params.OrderByAmountDesc); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrderByDateAsc != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by_date_asc", runtime.ParamLocationQuery, *params.OrderByDateAsc); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrderByDateDesc != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by_date_desc", runtime.ParamLocationQuery, *params.OrderByDateDesc); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Start != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ManagerId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "manager_id", runtime.ParamLocationQuery, *params.ManagerId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTransactionCanonicalResourceRequest generates requests for GetTransactionCanonicalResource
func NewGetTransactionCanonicalResourceRequest(server string, transactionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "transaction_id", runtime.ParamLocationPath, transactionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/transactions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTransferListWithPaginationRequest generates requests for GetTransferListWithPagination
func NewGetTransferListWithPaginationRequest(server string, params *GetTransferListWithPaginationParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/transfers/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FromDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from_date", runtime.ParamLocationQuery, *params.FromDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ToDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to_date", runtime.ParamLocationQuery, *params.ToDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StatementId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "statement_id", runtime.ParamLocationQuery, *params.StatementId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Start != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTransferResourceRequest generates requests for GetTransferResource
func NewGetTransferResourceRequest(server string, transferId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "transfer_id", runtime.ParamLocationPath, transferId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/transfers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserListWithPaginationRequest generates requests for GetUserListWithPagination
func NewGetUserListWithPaginationRequest(server string, params *GetUserListWithPaginationParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/users/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Start != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DepartmentId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "department_id", runtime.ParamLocationQuery, *params.DepartmentId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Email != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "email", runtime.ParamLocationQuery, *params.Email); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LocationId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "location_id", runtime.ParamLocationQuery, *params.LocationId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUserCreationDeferredTaskRequest calls the generic PostUserCreationDeferredTask builder with application/json body
func NewPostUserCreationDeferredTaskRequest(server string, body PostUserCreationDeferredTaskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUserCreationDeferredTaskRequestWithBody(server, "application/json", bodyReader)
}

// NewPostUserCreationDeferredTaskRequestWithBody generates requests for PostUserCreationDeferredTask with any type of body
func NewPostUserCreationDeferredTaskRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/users/deferred")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUserDeferredTaskResourceRequest generates requests for GetUserDeferredTaskResource
func NewGetUserDeferredTaskResourceRequest(server string, taskUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "task_uuid", runtime.ParamLocationPath, taskUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/users/deferred/status/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteUserResourceRequest generates requests for DeleteUserResource
func NewDeleteUserResourceRequest(server string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserResourceRequest generates requests for GetUserResource
func NewGetUserResourceRequest(server string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchUserResourceRequest calls the generic PatchUserResource builder with application/json body
func NewPatchUserResourceRequest(server string, userId string, body PatchUserResourceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchUserResourceRequestWithBody(server, userId, "application/json", bodyReader)
}

// NewPatchUserResourceRequestWithBody generates requests for PatchUserResource with any type of body
func NewPatchUserResourceRequestWithBody(server string, userId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/developer/v1/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetGlAccountListResource request
	GetGlAccountListResourceWithResponse(ctx context.Context, params *GetGlAccountListResourceParams, reqEditors ...RequestEditorFn) (*GetGlAccountListResourceResponse, error)

	// PostGlAccountListResource request with any body
	PostGlAccountListResourceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGlAccountListResourceResponse, error)

	PostGlAccountListResourceWithResponse(ctx context.Context, body PostGlAccountListResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGlAccountListResourceResponse, error)

	// DeleteGlAccountResource request
	DeleteGlAccountResourceWithResponse(ctx context.Context, glAccountId string, reqEditors ...RequestEditorFn) (*DeleteGlAccountResourceResponse, error)

	// GetGlAccountResource request
	GetGlAccountResourceWithResponse(ctx context.Context, glAccountId string, reqEditors ...RequestEditorFn) (*GetGlAccountResourceResponse, error)

	// PatchGlAccountResource request with any body
	PatchGlAccountResourceWithBodyWithResponse(ctx context.Context, glAccountId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchGlAccountResourceResponse, error)

	PatchGlAccountResourceWithResponse(ctx context.Context, glAccountId string, body PatchGlAccountResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchGlAccountResourceResponse, error)

	// DeleteAccountingConnectionResouce request
	DeleteAccountingConnectionResouceWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteAccountingConnectionResouceResponse, error)

	// GetAccountingConnectionResouce request
	GetAccountingConnectionResouceWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAccountingConnectionResouceResponse, error)

	// PostAccountingConnectionResouce request with any body
	PostAccountingConnectionResouceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAccountingConnectionResouceResponse, error)

	PostAccountingConnectionResouceWithResponse(ctx context.Context, body PostAccountingConnectionResouceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAccountingConnectionResouceResponse, error)

	// GetCustomFieldOptionListResource request
	GetCustomFieldOptionListResourceWithResponse(ctx context.Context, params *GetCustomFieldOptionListResourceParams, reqEditors ...RequestEditorFn) (*GetCustomFieldOptionListResourceResponse, error)

	// PostCustomFieldOptionListResource request with any body
	PostCustomFieldOptionListResourceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCustomFieldOptionListResourceResponse, error)

	PostCustomFieldOptionListResourceWithResponse(ctx context.Context, body PostCustomFieldOptionListResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCustomFieldOptionListResourceResponse, error)

	// DeleteCustomFieldOptionResource request
	DeleteCustomFieldOptionResourceWithResponse(ctx context.Context, fieldOptionId string, reqEditors ...RequestEditorFn) (*DeleteCustomFieldOptionResourceResponse, error)

	// GetCustomFieldOptionResource request
	GetCustomFieldOptionResourceWithResponse(ctx context.Context, fieldOptionId string, reqEditors ...RequestEditorFn) (*GetCustomFieldOptionResourceResponse, error)

	// PatchCustomFieldOptionResource request with any body
	PatchCustomFieldOptionResourceWithBodyWithResponse(ctx context.Context, fieldOptionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchCustomFieldOptionResourceResponse, error)

	PatchCustomFieldOptionResourceWithResponse(ctx context.Context, fieldOptionId string, body PatchCustomFieldOptionResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchCustomFieldOptionResourceResponse, error)

	// GetCustomFieldListResource request
	GetCustomFieldListResourceWithResponse(ctx context.Context, params *GetCustomFieldListResourceParams, reqEditors ...RequestEditorFn) (*GetCustomFieldListResourceResponse, error)

	// PostCustomFieldListResource request with any body
	PostCustomFieldListResourceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCustomFieldListResourceResponse, error)

	PostCustomFieldListResourceWithResponse(ctx context.Context, body PostCustomFieldListResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCustomFieldListResourceResponse, error)

	// DeleteCustomFieldResource request
	DeleteCustomFieldResourceWithResponse(ctx context.Context, fieldId string, reqEditors ...RequestEditorFn) (*DeleteCustomFieldResourceResponse, error)

	// GetCustomFieldResource request
	GetCustomFieldResourceWithResponse(ctx context.Context, fieldId string, reqEditors ...RequestEditorFn) (*GetCustomFieldResourceResponse, error)

	// PatchCustomFieldResource request with any body
	PatchCustomFieldResourceWithBodyWithResponse(ctx context.Context, fieldId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchCustomFieldResourceResponse, error)

	PatchCustomFieldResourceWithResponse(ctx context.Context, fieldId string, body PatchCustomFieldResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchCustomFieldResourceResponse, error)

	// GetSubsidiaryListResource request
	GetSubsidiaryListResourceWithResponse(ctx context.Context, params *GetSubsidiaryListResourceParams, reqEditors ...RequestEditorFn) (*GetSubsidiaryListResourceResponse, error)

	// PostSubsidiaryListResource request with any body
	PostSubsidiaryListResourceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSubsidiaryListResourceResponse, error)

	PostSubsidiaryListResourceWithResponse(ctx context.Context, body PostSubsidiaryListResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSubsidiaryListResourceResponse, error)

	// DeleteSubsidiaryResource request
	DeleteSubsidiaryResourceWithResponse(ctx context.Context, subsidiaryId string, reqEditors ...RequestEditorFn) (*DeleteSubsidiaryResourceResponse, error)

	// GetSubsidiaryResource request
	GetSubsidiaryResourceWithResponse(ctx context.Context, subsidiaryId string, reqEditors ...RequestEditorFn) (*GetSubsidiaryResourceResponse, error)

	// PatchSubsidiaryResource request with any body
	PatchSubsidiaryResourceWithBodyWithResponse(ctx context.Context, subsidiaryId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchSubsidiaryResourceResponse, error)

	PatchSubsidiaryResourceWithResponse(ctx context.Context, subsidiaryId string, body PatchSubsidiaryResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchSubsidiaryResourceResponse, error)

	// PostSyncListResource request with any body
	PostSyncListResourceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSyncListResourceResponse, error)

	PostSyncListResourceWithResponse(ctx context.Context, body PostSyncListResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSyncListResourceResponse, error)

	// GetSyncResource request
	GetSyncResourceWithResponse(ctx context.Context, syncId string, reqEditors ...RequestEditorFn) (*GetSyncResourceResponse, error)

	// GetVendorListResource request
	GetVendorListResourceWithResponse(ctx context.Context, params *GetVendorListResourceParams, reqEditors ...RequestEditorFn) (*GetVendorListResourceResponse, error)

	// PostVendorListResource request with any body
	PostVendorListResourceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostVendorListResourceResponse, error)

	PostVendorListResourceWithResponse(ctx context.Context, body PostVendorListResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostVendorListResourceResponse, error)

	// DeleteVendorResource request
	DeleteVendorResourceWithResponse(ctx context.Context, vendorId string, reqEditors ...RequestEditorFn) (*DeleteVendorResourceResponse, error)

	// GetVendorResource request
	GetVendorResourceWithResponse(ctx context.Context, vendorId string, reqEditors ...RequestEditorFn) (*GetVendorResourceResponse, error)

	// PatchVendorResource request with any body
	PatchVendorResourceWithBodyWithResponse(ctx context.Context, vendorId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchVendorResourceResponse, error)

	PatchVendorResourceWithResponse(ctx context.Context, vendorId string, body PatchVendorResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchVendorResourceResponse, error)

	// GetBusinessResource request
	GetBusinessResourceWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetBusinessResourceResponse, error)

	// GetBusinessBalanceResource request
	GetBusinessBalanceResourceWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetBusinessBalanceResourceResponse, error)

	// GetCardProgramListDeprecated request
	GetCardProgramListDeprecatedWithResponse(ctx context.Context, params *GetCardProgramListDeprecatedParams, reqEditors ...RequestEditorFn) (*GetCardProgramListDeprecatedResponse, error)

	// PostCardProgramListDeprecated request with any body
	PostCardProgramListDeprecatedWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCardProgramListDeprecatedResponse, error)

	PostCardProgramListDeprecatedWithResponse(ctx context.Context, body PostCardProgramListDeprecatedJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCardProgramListDeprecatedResponse, error)

	// GetCardProgramResourceDeprecated request
	GetCardProgramResourceDeprecatedWithResponse(ctx context.Context, cardProgramId string, reqEditors ...RequestEditorFn) (*GetCardProgramResourceDeprecatedResponse, error)

	// GetCardListWithPagination request
	GetCardListWithPaginationWithResponse(ctx context.Context, params *GetCardListWithPaginationParams, reqEditors ...RequestEditorFn) (*GetCardListWithPaginationResponse, error)

	// PostPhysicalCard request with any body
	PostPhysicalCardWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPhysicalCardResponse, error)

	PostPhysicalCardWithResponse(ctx context.Context, body PostPhysicalCardJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPhysicalCardResponse, error)

	// GetCardDeferredTaskResource request
	GetCardDeferredTaskResourceWithResponse(ctx context.Context, taskUuid string, reqEditors ...RequestEditorFn) (*GetCardDeferredTaskResourceResponse, error)

	// PostVirtualCard request with any body
	PostVirtualCardWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostVirtualCardResponse, error)

	PostVirtualCardWithResponse(ctx context.Context, body PostVirtualCardJSONRequestBody, reqEditors ...RequestEditorFn) (*PostVirtualCardResponse, error)

	// GetCardResource request
	GetCardResourceWithResponse(ctx context.Context, cardId string, reqEditors ...RequestEditorFn) (*GetCardResourceResponse, error)

	// PatchCardResource request with any body
	PatchCardResourceWithBodyWithResponse(ctx context.Context, cardId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchCardResourceResponse, error)

	PatchCardResourceWithResponse(ctx context.Context, cardId string, body PatchCardResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchCardResourceResponse, error)

	// PostCardSuspensionResource request with any body
	PostCardSuspensionResourceWithBodyWithResponse(ctx context.Context, cardId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCardSuspensionResourceResponse, error)

	PostCardSuspensionResourceWithResponse(ctx context.Context, cardId string, body PostCardSuspensionResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCardSuspensionResourceResponse, error)

	// PostCardTerminationResource request with any body
	PostCardTerminationResourceWithBodyWithResponse(ctx context.Context, cardId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCardTerminationResourceResponse, error)

	PostCardTerminationResourceWithResponse(ctx context.Context, cardId string, body PostCardTerminationResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCardTerminationResourceResponse, error)

	// PostCardUnsuspensionResource request with any body
	PostCardUnsuspensionResourceWithBodyWithResponse(ctx context.Context, cardId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCardUnsuspensionResourceResponse, error)

	PostCardUnsuspensionResourceWithResponse(ctx context.Context, cardId string, body PostCardUnsuspensionResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCardUnsuspensionResourceResponse, error)

	// GetCashbackListWithPagination request
	GetCashbackListWithPaginationWithResponse(ctx context.Context, params *GetCashbackListWithPaginationParams, reqEditors ...RequestEditorFn) (*GetCashbackListWithPaginationResponse, error)

	// GetCashbackResource request
	GetCashbackResourceWithResponse(ctx context.Context, cashbackId string, reqEditors ...RequestEditorFn) (*GetCashbackResourceResponse, error)

	// GetDepartmentListWithPagination request
	GetDepartmentListWithPaginationWithResponse(ctx context.Context, params *GetDepartmentListWithPaginationParams, reqEditors ...RequestEditorFn) (*GetDepartmentListWithPaginationResponse, error)

	// PostDepartmentListWithPagination request with any body
	PostDepartmentListWithPaginationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDepartmentListWithPaginationResponse, error)

	PostDepartmentListWithPaginationWithResponse(ctx context.Context, body PostDepartmentListWithPaginationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDepartmentListWithPaginationResponse, error)

	// GetDepartmentResource request
	GetDepartmentResourceWithResponse(ctx context.Context, departmentUuid string, reqEditors ...RequestEditorFn) (*GetDepartmentResourceResponse, error)

	// PatchDepartmentResource request with any body
	PatchDepartmentResourceWithBodyWithResponse(ctx context.Context, departmentUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchDepartmentResourceResponse, error)

	PatchDepartmentResourceWithResponse(ctx context.Context, departmentUuid string, body PatchDepartmentResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchDepartmentResourceResponse, error)

	// PostSalesLeadCreation request with any body
	PostSalesLeadCreationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSalesLeadCreationResponse, error)

	PostSalesLeadCreationWithResponse(ctx context.Context, body PostSalesLeadCreationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSalesLeadCreationResponse, error)

	// GetSalesLeadResource request
	GetSalesLeadResourceWithResponse(ctx context.Context, salesLeadId string, reqEditors ...RequestEditorFn) (*GetSalesLeadResourceResponse, error)

	// PostSalesLeadDocumentUpload request
	PostSalesLeadDocumentUploadWithResponse(ctx context.Context, salesLeadId string, reqEditors ...RequestEditorFn) (*PostSalesLeadDocumentUploadResponse, error)

	// GetSpendLimitListWithPagination request
	GetSpendLimitListWithPaginationWithResponse(ctx context.Context, params *GetSpendLimitListWithPaginationParams, reqEditors ...RequestEditorFn) (*GetSpendLimitListWithPaginationResponse, error)

	// PostSpendLimitCreation request with any body
	PostSpendLimitCreationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSpendLimitCreationResponse, error)

	PostSpendLimitCreationWithResponse(ctx context.Context, body PostSpendLimitCreationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSpendLimitCreationResponse, error)

	// GetSpendLimitDeferredTaskStatus request
	GetSpendLimitDeferredTaskStatusWithResponse(ctx context.Context, taskUuid string, reqEditors ...RequestEditorFn) (*GetSpendLimitDeferredTaskStatusResponse, error)

	// GetSpendLimitResource request
	GetSpendLimitResourceWithResponse(ctx context.Context, spendLimitId string, reqEditors ...RequestEditorFn) (*GetSpendLimitResourceResponse, error)

	// PatchSpendLimitResource request
	PatchSpendLimitResourceWithResponse(ctx context.Context, spendLimitId string, reqEditors ...RequestEditorFn) (*PatchSpendLimitResourceResponse, error)

	// PostSpendLimitTerminationResource request with any body
	PostSpendLimitTerminationResourceWithBodyWithResponse(ctx context.Context, spendLimitId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSpendLimitTerminationResourceResponse, error)

	PostSpendLimitTerminationResourceWithResponse(ctx context.Context, spendLimitId string, body PostSpendLimitTerminationResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSpendLimitTerminationResourceResponse, error)

	// PostSpendLimitSuspensionResource request
	PostSpendLimitSuspensionResourceWithResponse(ctx context.Context, spendLimitId string, reqEditors ...RequestEditorFn) (*PostSpendLimitSuspensionResourceResponse, error)

	// PostSpendLimitUnsuspensionResource request
	PostSpendLimitUnsuspensionResourceWithResponse(ctx context.Context, spendLimitId string, reqEditors ...RequestEditorFn) (*PostSpendLimitUnsuspensionResourceResponse, error)

	// GetLocationListResource request
	GetLocationListResourceWithResponse(ctx context.Context, params *GetLocationListResourceParams, reqEditors ...RequestEditorFn) (*GetLocationListResourceResponse, error)

	// PostLocationListResource request with any body
	PostLocationListResourceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLocationListResourceResponse, error)

	PostLocationListResourceWithResponse(ctx context.Context, body PostLocationListResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostLocationListResourceResponse, error)

	// GetLocationSingleResource request
	GetLocationSingleResourceWithResponse(ctx context.Context, locationUuid string, reqEditors ...RequestEditorFn) (*GetLocationSingleResourceResponse, error)

	// PatchLocationSingleResource request with any body
	PatchLocationSingleResourceWithBodyWithResponse(ctx context.Context, locationUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchLocationSingleResourceResponse, error)

	PatchLocationSingleResourceWithResponse(ctx context.Context, locationUuid string, body PatchLocationSingleResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchLocationSingleResourceResponse, error)

	// GetMemoListWithPagination request
	GetMemoListWithPaginationWithResponse(ctx context.Context, params *GetMemoListWithPaginationParams, reqEditors ...RequestEditorFn) (*GetMemoListWithPaginationResponse, error)

	// GetMemoSingleResource request
	GetMemoSingleResourceWithResponse(ctx context.Context, transactionId string, reqEditors ...RequestEditorFn) (*GetMemoSingleResourceResponse, error)

	// GetMerchantListWithPagination request
	GetMerchantListWithPaginationWithResponse(ctx context.Context, params *GetMerchantListWithPaginationParams, reqEditors ...RequestEditorFn) (*GetMerchantListWithPaginationResponse, error)

	// GetReceiptIntegrationOptedOutEmailsListResource request with any body
	GetReceiptIntegrationOptedOutEmailsListResourceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetReceiptIntegrationOptedOutEmailsListResourceResponse, error)

	GetReceiptIntegrationOptedOutEmailsListResourceWithResponse(ctx context.Context, body GetReceiptIntegrationOptedOutEmailsListResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*GetReceiptIntegrationOptedOutEmailsListResourceResponse, error)

	// PostReceiptIntegrationOptedOutEmailsListResource request with any body
	PostReceiptIntegrationOptedOutEmailsListResourceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostReceiptIntegrationOptedOutEmailsListResourceResponse, error)

	PostReceiptIntegrationOptedOutEmailsListResourceWithResponse(ctx context.Context, body PostReceiptIntegrationOptedOutEmailsListResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostReceiptIntegrationOptedOutEmailsListResourceResponse, error)

	// DeleteReceiptIntegrationOptedOutEmailsDeleteResource request
	DeleteReceiptIntegrationOptedOutEmailsDeleteResourceWithResponse(ctx context.Context, mailboxOptedOutEmailUuid string, reqEditors ...RequestEditorFn) (*DeleteReceiptIntegrationOptedOutEmailsDeleteResourceResponse, error)

	// GetReceiptListWithPagination request
	GetReceiptListWithPaginationWithResponse(ctx context.Context, params *GetReceiptListWithPaginationParams, reqEditors ...RequestEditorFn) (*GetReceiptListWithPaginationResponse, error)

	// GetReceiptSingleResource request
	GetReceiptSingleResourceWithResponse(ctx context.Context, receiptId string, reqEditors ...RequestEditorFn) (*GetReceiptSingleResourceResponse, error)

	// GetReimbursementListWithPagination request
	GetReimbursementListWithPaginationWithResponse(ctx context.Context, params *GetReimbursementListWithPaginationParams, reqEditors ...RequestEditorFn) (*GetReimbursementListWithPaginationResponse, error)

	// GetReimbursementResource request
	GetReimbursementResourceWithResponse(ctx context.Context, reimbursementId string, reqEditors ...RequestEditorFn) (*GetReimbursementResourceResponse, error)

	// GetSpendProgramResource request
	GetSpendProgramResourceWithResponse(ctx context.Context, params *GetSpendProgramResourceParams, reqEditors ...RequestEditorFn) (*GetSpendProgramResourceResponse, error)

	// PostSpendProgramResource request with any body
	PostSpendProgramResourceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSpendProgramResourceResponse, error)

	PostSpendProgramResourceWithResponse(ctx context.Context, body PostSpendProgramResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSpendProgramResourceResponse, error)

	// GetSpendProgramSingleResource request
	GetSpendProgramSingleResourceWithResponse(ctx context.Context, spendProgramId string, reqEditors ...RequestEditorFn) (*GetSpendProgramSingleResourceResponse, error)

	// GetStatementListWithPagination request
	GetStatementListWithPaginationWithResponse(ctx context.Context, params *GetStatementListWithPaginationParams, reqEditors ...RequestEditorFn) (*GetStatementListWithPaginationResponse, error)

	// GetStatementResource request
	GetStatementResourceWithResponse(ctx context.Context, statementId string, reqEditors ...RequestEditorFn) (*GetStatementResourceResponse, error)

	// GetTransactionsCanonicalListWithPagination request
	GetTransactionsCanonicalListWithPaginationWithResponse(ctx context.Context, params *GetTransactionsCanonicalListWithPaginationParams, reqEditors ...RequestEditorFn) (*GetTransactionsCanonicalListWithPaginationResponse, error)

	// GetTransactionCanonicalResource request
	GetTransactionCanonicalResourceWithResponse(ctx context.Context, transactionId string, reqEditors ...RequestEditorFn) (*GetTransactionCanonicalResourceResponse, error)

	// GetTransferListWithPagination request
	GetTransferListWithPaginationWithResponse(ctx context.Context, params *GetTransferListWithPaginationParams, reqEditors ...RequestEditorFn) (*GetTransferListWithPaginationResponse, error)

	// GetTransferResource request
	GetTransferResourceWithResponse(ctx context.Context, transferId string, reqEditors ...RequestEditorFn) (*GetTransferResourceResponse, error)

	// GetUserListWithPagination request
	GetUserListWithPaginationWithResponse(ctx context.Context, params *GetUserListWithPaginationParams, reqEditors ...RequestEditorFn) (*GetUserListWithPaginationResponse, error)

	// PostUserCreationDeferredTask request with any body
	PostUserCreationDeferredTaskWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserCreationDeferredTaskResponse, error)

	PostUserCreationDeferredTaskWithResponse(ctx context.Context, body PostUserCreationDeferredTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserCreationDeferredTaskResponse, error)

	// GetUserDeferredTaskResource request
	GetUserDeferredTaskResourceWithResponse(ctx context.Context, taskUuid string, reqEditors ...RequestEditorFn) (*GetUserDeferredTaskResourceResponse, error)

	// DeleteUserResource request
	DeleteUserResourceWithResponse(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*DeleteUserResourceResponse, error)

	// GetUserResource request
	GetUserResourceWithResponse(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*GetUserResourceResponse, error)

	// PatchUserResource request with any body
	PatchUserResourceWithBodyWithResponse(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchUserResourceResponse, error)

	PatchUserResourceWithResponse(ctx context.Context, userId string, body PatchUserResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchUserResourceResponse, error)
}

type GetGlAccountListResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponseApiAccountingGLAccountResourceSchema
}

// Status returns HTTPResponse.Status
func (r GetGlAccountListResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGlAccountListResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGlAccountListResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ApiAccountingTrackingCategoryUploadResponse
}

// Status returns HTTPResponse.Status
func (r PostGlAccountListResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGlAccountListResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteGlAccountResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteGlAccountResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteGlAccountResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGlAccountResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GeneralLedgerAccount
}

// Status returns HTTPResponse.Status
func (r GetGlAccountResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGlAccountResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchGlAccountResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GeneralLedgerAccount
}

// Status returns HTTPResponse.Status
func (r PatchGlAccountResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchGlAccountResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAccountingConnectionResouceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAccountingConnectionResouceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAccountingConnectionResouceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAccountingConnectionResouceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccountingProvider
}

// Status returns HTTPResponse.Status
func (r GetAccountingConnectionResouceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAccountingConnectionResouceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAccountingConnectionResouceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *AccountingProvider
}

// Status returns HTTPResponse.Status
func (r PostAccountingConnectionResouceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAccountingConnectionResouceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCustomFieldOptionListResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponseApiAccountingCustomFieldOptionResourceSchema
}

// Status returns HTTPResponse.Status
func (r GetCustomFieldOptionListResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCustomFieldOptionListResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCustomFieldOptionListResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ApiAccountingTrackingCategoryUploadResponse
}

// Status returns HTTPResponse.Status
func (r PostCustomFieldOptionListResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCustomFieldOptionListResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCustomFieldOptionResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteCustomFieldOptionResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCustomFieldOptionResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCustomFieldOptionResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CustomFieldOption
}

// Status returns HTTPResponse.Status
func (r GetCustomFieldOptionResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCustomFieldOptionResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchCustomFieldOptionResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CustomFieldOption
}

// Status returns HTTPResponse.Status
func (r PatchCustomFieldOptionResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchCustomFieldOptionResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCustomFieldListResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponseApiAccountingCustomFieldResourceSchema
}

// Status returns HTTPResponse.Status
func (r GetCustomFieldListResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCustomFieldListResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCustomFieldListResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ApiAccountingCustomFieldResource
}

// Status returns HTTPResponse.Status
func (r PostCustomFieldListResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCustomFieldListResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCustomFieldResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteCustomFieldResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCustomFieldResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCustomFieldResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiAccountingCustomFieldResource
}

// Status returns HTTPResponse.Status
func (r GetCustomFieldResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCustomFieldResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchCustomFieldResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiAccountingCustomFieldResource
}

// Status returns HTTPResponse.Status
func (r PatchCustomFieldResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchCustomFieldResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSubsidiaryListResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponseApiAccountingSubsidiaryResourceSchema
}

// Status returns HTTPResponse.Status
func (r GetSubsidiaryListResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSubsidiaryListResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSubsidiaryListResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ApiAccountingTrackingCategoryUploadResponse
}

// Status returns HTTPResponse.Status
func (r PostSubsidiaryListResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSubsidiaryListResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSubsidiaryResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteSubsidiaryResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSubsidiaryResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSubsidiaryResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Subsidiary
}

// Status returns HTTPResponse.Status
func (r GetSubsidiaryResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSubsidiaryResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchSubsidiaryResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Subsidiary
}

// Status returns HTTPResponse.Status
func (r PatchSubsidiaryResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchSubsidiaryResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSyncListResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSyncListResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSyncListResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSyncResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Sync
}

// Status returns HTTPResponse.Status
func (r GetSyncResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSyncResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVendorListResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponseApiAccountingVendorResourceSchema
}

// Status returns HTTPResponse.Status
func (r GetVendorListResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVendorListResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostVendorListResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ApiAccountingTrackingCategoryUploadResponse
}

// Status returns HTTPResponse.Status
func (r PostVendorListResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostVendorListResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteVendorResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteVendorResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteVendorResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVendorResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VendorAccount
}

// Status returns HTTPResponse.Status
func (r GetVendorResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVendorResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchVendorResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PatchVendorResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchVendorResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBusinessResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Business
}

// Status returns HTTPResponse.Status
func (r GetBusinessResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBusinessResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBusinessBalanceResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BusinessBalance
}

// Status returns HTTPResponse.Status
func (r GetBusinessBalanceResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBusinessBalanceResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCardProgramListDeprecatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponseApiCardProgramResourceSchema
}

// Status returns HTTPResponse.Status
func (r GetCardProgramListDeprecatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCardProgramListDeprecatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCardProgramListDeprecatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ApiCardProgramResource
}

// Status returns HTTPResponse.Status
func (r PostCardProgramListDeprecatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCardProgramListDeprecatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCardProgramResourceDeprecatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiCardProgramResource
}

// Status returns HTTPResponse.Status
func (r GetCardProgramResourceDeprecatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCardProgramResourceDeprecatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCardListWithPaginationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponseApiCardResourceSchema
}

// Status returns HTTPResponse.Status
func (r GetCardListWithPaginationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCardListWithPaginationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPhysicalCardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeferredTaskUUID
}

// Status returns HTTPResponse.Status
func (r PostPhysicalCardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPhysicalCardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCardDeferredTaskResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CardDeferredTask
}

// Status returns HTTPResponse.Status
func (r GetCardDeferredTaskResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCardDeferredTaskResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostVirtualCardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeferredTaskUUID
}

// Status returns HTTPResponse.Status
func (r PostVirtualCardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostVirtualCardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCardResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Card
}

// Status returns HTTPResponse.Status
func (r GetCardResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCardResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchCardResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PatchCardResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchCardResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCardSuspensionResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeferredTaskUUID
}

// Status returns HTTPResponse.Status
func (r PostCardSuspensionResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCardSuspensionResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCardTerminationResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeferredTaskUUID
}

// Status returns HTTPResponse.Status
func (r PostCardTerminationResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCardTerminationResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCardUnsuspensionResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeferredTaskUUID
}

// Status returns HTTPResponse.Status
func (r PostCardUnsuspensionResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCardUnsuspensionResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCashbackListWithPaginationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponseApiCashbackResourceSchema
}

// Status returns HTTPResponse.Status
func (r GetCashbackListWithPaginationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCashbackListWithPaginationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCashbackResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Cashback
}

// Status returns HTTPResponse.Status
func (r GetCashbackResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCashbackResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDepartmentListWithPaginationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponseApiDepartmentResourceSchema
}

// Status returns HTTPResponse.Status
func (r GetDepartmentListWithPaginationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDepartmentListWithPaginationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDepartmentListWithPaginationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Department
}

// Status returns HTTPResponse.Status
func (r PostDepartmentListWithPaginationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDepartmentListWithPaginationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDepartmentResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Department
}

// Status returns HTTPResponse.Status
func (r GetDepartmentResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDepartmentResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchDepartmentResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Department
}

// Status returns HTTPResponse.Status
func (r PatchDepartmentResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchDepartmentResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSalesLeadCreationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSalesLeadCreationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSalesLeadCreationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSalesLeadResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Lead
}

// Status returns HTTPResponse.Status
func (r GetSalesLeadResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSalesLeadResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSalesLeadDocumentUploadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Upload
}

// Status returns HTTPResponse.Status
func (r PostSalesLeadDocumentUploadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSalesLeadDocumentUploadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSpendLimitListWithPaginationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponseApiSpendLimitResourceSchema
}

// Status returns HTTPResponse.Status
func (r GetSpendLimitListWithPaginationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSpendLimitListWithPaginationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSpendLimitCreationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeferredTaskUUID
}

// Status returns HTTPResponse.Status
func (r PostSpendLimitCreationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSpendLimitCreationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSpendLimitDeferredTaskStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SpendLimitDeferredTask
}

// Status returns HTTPResponse.Status
func (r GetSpendLimitDeferredTaskStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSpendLimitDeferredTaskStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSpendLimitResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Limit
}

// Status returns HTTPResponse.Status
func (r GetSpendLimitResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSpendLimitResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchSpendLimitResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Limit
}

// Status returns HTTPResponse.Status
func (r PatchSpendLimitResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchSpendLimitResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSpendLimitTerminationResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeferredTaskUUID
}

// Status returns HTTPResponse.Status
func (r PostSpendLimitTerminationResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSpendLimitTerminationResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSpendLimitSuspensionResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Limit
}

// Status returns HTTPResponse.Status
func (r PostSpendLimitSuspensionResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSpendLimitSuspensionResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSpendLimitUnsuspensionResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Limit
}

// Status returns HTTPResponse.Status
func (r PostSpendLimitUnsuspensionResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSpendLimitUnsuspensionResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLocationListResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponseApiLocationResourceSchema
}

// Status returns HTTPResponse.Status
func (r GetLocationListResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLocationListResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostLocationListResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Location
}

// Status returns HTTPResponse.Status
func (r PostLocationListResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostLocationListResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLocationSingleResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Location
}

// Status returns HTTPResponse.Status
func (r GetLocationSingleResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLocationSingleResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchLocationSingleResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Location
}

// Status returns HTTPResponse.Status
func (r PatchLocationSingleResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchLocationSingleResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMemoListWithPaginationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponseApiMemoResourceSchema
}

// Status returns HTTPResponse.Status
func (r GetMemoListWithPaginationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMemoListWithPaginationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMemoSingleResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Memo
}

// Status returns HTTPResponse.Status
func (r GetMemoSingleResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMemoSingleResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMerchantListWithPaginationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponseApiMerchantResourceSchema
}

// Status returns HTTPResponse.Status
func (r GetMerchantListWithPaginationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMerchantListWithPaginationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReceiptIntegrationOptedOutEmailsListResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiReceiptIntegrationOptedOutEmailResource
}

// Status returns HTTPResponse.Status
func (r GetReceiptIntegrationOptedOutEmailsListResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReceiptIntegrationOptedOutEmailsListResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostReceiptIntegrationOptedOutEmailsListResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ApiReceiptIntegrationOptedOutEmailResource
}

// Status returns HTTPResponse.Status
func (r PostReceiptIntegrationOptedOutEmailsListResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostReceiptIntegrationOptedOutEmailsListResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteReceiptIntegrationOptedOutEmailsDeleteResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteReceiptIntegrationOptedOutEmailsDeleteResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteReceiptIntegrationOptedOutEmailsDeleteResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReceiptListWithPaginationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponseApiReceiptResourceSchema
}

// Status returns HTTPResponse.Status
func (r GetReceiptListWithPaginationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReceiptListWithPaginationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReceiptSingleResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Receipt
}

// Status returns HTTPResponse.Status
func (r GetReceiptSingleResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReceiptSingleResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReimbursementListWithPaginationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponseApiReimbursementResourceSchema
}

// Status returns HTTPResponse.Status
func (r GetReimbursementListWithPaginationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReimbursementListWithPaginationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReimbursementResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Reimbursement
}

// Status returns HTTPResponse.Status
func (r GetReimbursementResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReimbursementResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSpendProgramResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponseApiSpendProgramResourceSchema
}

// Status returns HTTPResponse.Status
func (r GetSpendProgramResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSpendProgramResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSpendProgramResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ApiSpendProgramResource
}

// Status returns HTTPResponse.Status
func (r PostSpendProgramResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSpendProgramResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSpendProgramSingleResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiSpendProgramResource
}

// Status returns HTTPResponse.Status
func (r GetSpendProgramSingleResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSpendProgramSingleResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatementListWithPaginationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponseApiStatementResourceSchema
}

// Status returns HTTPResponse.Status
func (r GetStatementListWithPaginationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatementListWithPaginationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatementResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Statement
}

// Status returns HTTPResponse.Status
func (r GetStatementResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatementResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTransactionsCanonicalListWithPaginationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponseApiTransactionCanonicalSchema
}

// Status returns HTTPResponse.Status
func (r GetTransactionsCanonicalListWithPaginationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTransactionsCanonicalListWithPaginationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTransactionCanonicalResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Transaction
}

// Status returns HTTPResponse.Status
func (r GetTransactionCanonicalResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTransactionCanonicalResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTransferListWithPaginationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponseApiTransferResourceSchema
}

// Status returns HTTPResponse.Status
func (r GetTransferListWithPaginationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTransferListWithPaginationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTransferResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Transfer
}

// Status returns HTTPResponse.Status
func (r GetTransferResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTransferResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserListWithPaginationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponseApiUserResourceSchema
}

// Status returns HTTPResponse.Status
func (r GetUserListWithPaginationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserListWithPaginationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUserCreationDeferredTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *DeferredTaskUUID
}

// Status returns HTTPResponse.Status
func (r PostUserCreationDeferredTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUserCreationDeferredTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserDeferredTaskResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserDeferredTask
}

// Status returns HTTPResponse.Status
func (r GetUserDeferredTaskResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserDeferredTaskResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUserResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteUserResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r GetUserResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchUserResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PatchUserResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchUserResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetGlAccountListResourceWithResponse request returning *GetGlAccountListResourceResponse
func (c *ClientWithResponses) GetGlAccountListResourceWithResponse(ctx context.Context, params *GetGlAccountListResourceParams, reqEditors ...RequestEditorFn) (*GetGlAccountListResourceResponse, error) {
	rsp, err := c.GetGlAccountListResource(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGlAccountListResourceResponse(rsp)
}

// PostGlAccountListResourceWithBodyWithResponse request with arbitrary body returning *PostGlAccountListResourceResponse
func (c *ClientWithResponses) PostGlAccountListResourceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGlAccountListResourceResponse, error) {
	rsp, err := c.PostGlAccountListResourceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGlAccountListResourceResponse(rsp)
}

func (c *ClientWithResponses) PostGlAccountListResourceWithResponse(ctx context.Context, body PostGlAccountListResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGlAccountListResourceResponse, error) {
	rsp, err := c.PostGlAccountListResource(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGlAccountListResourceResponse(rsp)
}

// DeleteGlAccountResourceWithResponse request returning *DeleteGlAccountResourceResponse
func (c *ClientWithResponses) DeleteGlAccountResourceWithResponse(ctx context.Context, glAccountId string, reqEditors ...RequestEditorFn) (*DeleteGlAccountResourceResponse, error) {
	rsp, err := c.DeleteGlAccountResource(ctx, glAccountId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteGlAccountResourceResponse(rsp)
}

// GetGlAccountResourceWithResponse request returning *GetGlAccountResourceResponse
func (c *ClientWithResponses) GetGlAccountResourceWithResponse(ctx context.Context, glAccountId string, reqEditors ...RequestEditorFn) (*GetGlAccountResourceResponse, error) {
	rsp, err := c.GetGlAccountResource(ctx, glAccountId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGlAccountResourceResponse(rsp)
}

// PatchGlAccountResourceWithBodyWithResponse request with arbitrary body returning *PatchGlAccountResourceResponse
func (c *ClientWithResponses) PatchGlAccountResourceWithBodyWithResponse(ctx context.Context, glAccountId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchGlAccountResourceResponse, error) {
	rsp, err := c.PatchGlAccountResourceWithBody(ctx, glAccountId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchGlAccountResourceResponse(rsp)
}

func (c *ClientWithResponses) PatchGlAccountResourceWithResponse(ctx context.Context, glAccountId string, body PatchGlAccountResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchGlAccountResourceResponse, error) {
	rsp, err := c.PatchGlAccountResource(ctx, glAccountId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchGlAccountResourceResponse(rsp)
}

// DeleteAccountingConnectionResouceWithResponse request returning *DeleteAccountingConnectionResouceResponse
func (c *ClientWithResponses) DeleteAccountingConnectionResouceWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteAccountingConnectionResouceResponse, error) {
	rsp, err := c.DeleteAccountingConnectionResouce(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAccountingConnectionResouceResponse(rsp)
}

// GetAccountingConnectionResouceWithResponse request returning *GetAccountingConnectionResouceResponse
func (c *ClientWithResponses) GetAccountingConnectionResouceWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAccountingConnectionResouceResponse, error) {
	rsp, err := c.GetAccountingConnectionResouce(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAccountingConnectionResouceResponse(rsp)
}

// PostAccountingConnectionResouceWithBodyWithResponse request with arbitrary body returning *PostAccountingConnectionResouceResponse
func (c *ClientWithResponses) PostAccountingConnectionResouceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAccountingConnectionResouceResponse, error) {
	rsp, err := c.PostAccountingConnectionResouceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAccountingConnectionResouceResponse(rsp)
}

func (c *ClientWithResponses) PostAccountingConnectionResouceWithResponse(ctx context.Context, body PostAccountingConnectionResouceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAccountingConnectionResouceResponse, error) {
	rsp, err := c.PostAccountingConnectionResouce(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAccountingConnectionResouceResponse(rsp)
}

// GetCustomFieldOptionListResourceWithResponse request returning *GetCustomFieldOptionListResourceResponse
func (c *ClientWithResponses) GetCustomFieldOptionListResourceWithResponse(ctx context.Context, params *GetCustomFieldOptionListResourceParams, reqEditors ...RequestEditorFn) (*GetCustomFieldOptionListResourceResponse, error) {
	rsp, err := c.GetCustomFieldOptionListResource(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCustomFieldOptionListResourceResponse(rsp)
}

// PostCustomFieldOptionListResourceWithBodyWithResponse request with arbitrary body returning *PostCustomFieldOptionListResourceResponse
func (c *ClientWithResponses) PostCustomFieldOptionListResourceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCustomFieldOptionListResourceResponse, error) {
	rsp, err := c.PostCustomFieldOptionListResourceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCustomFieldOptionListResourceResponse(rsp)
}

func (c *ClientWithResponses) PostCustomFieldOptionListResourceWithResponse(ctx context.Context, body PostCustomFieldOptionListResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCustomFieldOptionListResourceResponse, error) {
	rsp, err := c.PostCustomFieldOptionListResource(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCustomFieldOptionListResourceResponse(rsp)
}

// DeleteCustomFieldOptionResourceWithResponse request returning *DeleteCustomFieldOptionResourceResponse
func (c *ClientWithResponses) DeleteCustomFieldOptionResourceWithResponse(ctx context.Context, fieldOptionId string, reqEditors ...RequestEditorFn) (*DeleteCustomFieldOptionResourceResponse, error) {
	rsp, err := c.DeleteCustomFieldOptionResource(ctx, fieldOptionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCustomFieldOptionResourceResponse(rsp)
}

// GetCustomFieldOptionResourceWithResponse request returning *GetCustomFieldOptionResourceResponse
func (c *ClientWithResponses) GetCustomFieldOptionResourceWithResponse(ctx context.Context, fieldOptionId string, reqEditors ...RequestEditorFn) (*GetCustomFieldOptionResourceResponse, error) {
	rsp, err := c.GetCustomFieldOptionResource(ctx, fieldOptionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCustomFieldOptionResourceResponse(rsp)
}

// PatchCustomFieldOptionResourceWithBodyWithResponse request with arbitrary body returning *PatchCustomFieldOptionResourceResponse
func (c *ClientWithResponses) PatchCustomFieldOptionResourceWithBodyWithResponse(ctx context.Context, fieldOptionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchCustomFieldOptionResourceResponse, error) {
	rsp, err := c.PatchCustomFieldOptionResourceWithBody(ctx, fieldOptionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchCustomFieldOptionResourceResponse(rsp)
}

func (c *ClientWithResponses) PatchCustomFieldOptionResourceWithResponse(ctx context.Context, fieldOptionId string, body PatchCustomFieldOptionResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchCustomFieldOptionResourceResponse, error) {
	rsp, err := c.PatchCustomFieldOptionResource(ctx, fieldOptionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchCustomFieldOptionResourceResponse(rsp)
}

// GetCustomFieldListResourceWithResponse request returning *GetCustomFieldListResourceResponse
func (c *ClientWithResponses) GetCustomFieldListResourceWithResponse(ctx context.Context, params *GetCustomFieldListResourceParams, reqEditors ...RequestEditorFn) (*GetCustomFieldListResourceResponse, error) {
	rsp, err := c.GetCustomFieldListResource(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCustomFieldListResourceResponse(rsp)
}

// PostCustomFieldListResourceWithBodyWithResponse request with arbitrary body returning *PostCustomFieldListResourceResponse
func (c *ClientWithResponses) PostCustomFieldListResourceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCustomFieldListResourceResponse, error) {
	rsp, err := c.PostCustomFieldListResourceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCustomFieldListResourceResponse(rsp)
}

func (c *ClientWithResponses) PostCustomFieldListResourceWithResponse(ctx context.Context, body PostCustomFieldListResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCustomFieldListResourceResponse, error) {
	rsp, err := c.PostCustomFieldListResource(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCustomFieldListResourceResponse(rsp)
}

// DeleteCustomFieldResourceWithResponse request returning *DeleteCustomFieldResourceResponse
func (c *ClientWithResponses) DeleteCustomFieldResourceWithResponse(ctx context.Context, fieldId string, reqEditors ...RequestEditorFn) (*DeleteCustomFieldResourceResponse, error) {
	rsp, err := c.DeleteCustomFieldResource(ctx, fieldId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCustomFieldResourceResponse(rsp)
}

// GetCustomFieldResourceWithResponse request returning *GetCustomFieldResourceResponse
func (c *ClientWithResponses) GetCustomFieldResourceWithResponse(ctx context.Context, fieldId string, reqEditors ...RequestEditorFn) (*GetCustomFieldResourceResponse, error) {
	rsp, err := c.GetCustomFieldResource(ctx, fieldId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCustomFieldResourceResponse(rsp)
}

// PatchCustomFieldResourceWithBodyWithResponse request with arbitrary body returning *PatchCustomFieldResourceResponse
func (c *ClientWithResponses) PatchCustomFieldResourceWithBodyWithResponse(ctx context.Context, fieldId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchCustomFieldResourceResponse, error) {
	rsp, err := c.PatchCustomFieldResourceWithBody(ctx, fieldId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchCustomFieldResourceResponse(rsp)
}

func (c *ClientWithResponses) PatchCustomFieldResourceWithResponse(ctx context.Context, fieldId string, body PatchCustomFieldResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchCustomFieldResourceResponse, error) {
	rsp, err := c.PatchCustomFieldResource(ctx, fieldId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchCustomFieldResourceResponse(rsp)
}

// GetSubsidiaryListResourceWithResponse request returning *GetSubsidiaryListResourceResponse
func (c *ClientWithResponses) GetSubsidiaryListResourceWithResponse(ctx context.Context, params *GetSubsidiaryListResourceParams, reqEditors ...RequestEditorFn) (*GetSubsidiaryListResourceResponse, error) {
	rsp, err := c.GetSubsidiaryListResource(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSubsidiaryListResourceResponse(rsp)
}

// PostSubsidiaryListResourceWithBodyWithResponse request with arbitrary body returning *PostSubsidiaryListResourceResponse
func (c *ClientWithResponses) PostSubsidiaryListResourceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSubsidiaryListResourceResponse, error) {
	rsp, err := c.PostSubsidiaryListResourceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSubsidiaryListResourceResponse(rsp)
}

func (c *ClientWithResponses) PostSubsidiaryListResourceWithResponse(ctx context.Context, body PostSubsidiaryListResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSubsidiaryListResourceResponse, error) {
	rsp, err := c.PostSubsidiaryListResource(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSubsidiaryListResourceResponse(rsp)
}

// DeleteSubsidiaryResourceWithResponse request returning *DeleteSubsidiaryResourceResponse
func (c *ClientWithResponses) DeleteSubsidiaryResourceWithResponse(ctx context.Context, subsidiaryId string, reqEditors ...RequestEditorFn) (*DeleteSubsidiaryResourceResponse, error) {
	rsp, err := c.DeleteSubsidiaryResource(ctx, subsidiaryId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSubsidiaryResourceResponse(rsp)
}

// GetSubsidiaryResourceWithResponse request returning *GetSubsidiaryResourceResponse
func (c *ClientWithResponses) GetSubsidiaryResourceWithResponse(ctx context.Context, subsidiaryId string, reqEditors ...RequestEditorFn) (*GetSubsidiaryResourceResponse, error) {
	rsp, err := c.GetSubsidiaryResource(ctx, subsidiaryId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSubsidiaryResourceResponse(rsp)
}

// PatchSubsidiaryResourceWithBodyWithResponse request with arbitrary body returning *PatchSubsidiaryResourceResponse
func (c *ClientWithResponses) PatchSubsidiaryResourceWithBodyWithResponse(ctx context.Context, subsidiaryId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchSubsidiaryResourceResponse, error) {
	rsp, err := c.PatchSubsidiaryResourceWithBody(ctx, subsidiaryId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchSubsidiaryResourceResponse(rsp)
}

func (c *ClientWithResponses) PatchSubsidiaryResourceWithResponse(ctx context.Context, subsidiaryId string, body PatchSubsidiaryResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchSubsidiaryResourceResponse, error) {
	rsp, err := c.PatchSubsidiaryResource(ctx, subsidiaryId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchSubsidiaryResourceResponse(rsp)
}

// PostSyncListResourceWithBodyWithResponse request with arbitrary body returning *PostSyncListResourceResponse
func (c *ClientWithResponses) PostSyncListResourceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSyncListResourceResponse, error) {
	rsp, err := c.PostSyncListResourceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSyncListResourceResponse(rsp)
}

func (c *ClientWithResponses) PostSyncListResourceWithResponse(ctx context.Context, body PostSyncListResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSyncListResourceResponse, error) {
	rsp, err := c.PostSyncListResource(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSyncListResourceResponse(rsp)
}

// GetSyncResourceWithResponse request returning *GetSyncResourceResponse
func (c *ClientWithResponses) GetSyncResourceWithResponse(ctx context.Context, syncId string, reqEditors ...RequestEditorFn) (*GetSyncResourceResponse, error) {
	rsp, err := c.GetSyncResource(ctx, syncId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSyncResourceResponse(rsp)
}

// GetVendorListResourceWithResponse request returning *GetVendorListResourceResponse
func (c *ClientWithResponses) GetVendorListResourceWithResponse(ctx context.Context, params *GetVendorListResourceParams, reqEditors ...RequestEditorFn) (*GetVendorListResourceResponse, error) {
	rsp, err := c.GetVendorListResource(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVendorListResourceResponse(rsp)
}

// PostVendorListResourceWithBodyWithResponse request with arbitrary body returning *PostVendorListResourceResponse
func (c *ClientWithResponses) PostVendorListResourceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostVendorListResourceResponse, error) {
	rsp, err := c.PostVendorListResourceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostVendorListResourceResponse(rsp)
}

func (c *ClientWithResponses) PostVendorListResourceWithResponse(ctx context.Context, body PostVendorListResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostVendorListResourceResponse, error) {
	rsp, err := c.PostVendorListResource(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostVendorListResourceResponse(rsp)
}

// DeleteVendorResourceWithResponse request returning *DeleteVendorResourceResponse
func (c *ClientWithResponses) DeleteVendorResourceWithResponse(ctx context.Context, vendorId string, reqEditors ...RequestEditorFn) (*DeleteVendorResourceResponse, error) {
	rsp, err := c.DeleteVendorResource(ctx, vendorId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteVendorResourceResponse(rsp)
}

// GetVendorResourceWithResponse request returning *GetVendorResourceResponse
func (c *ClientWithResponses) GetVendorResourceWithResponse(ctx context.Context, vendorId string, reqEditors ...RequestEditorFn) (*GetVendorResourceResponse, error) {
	rsp, err := c.GetVendorResource(ctx, vendorId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVendorResourceResponse(rsp)
}

// PatchVendorResourceWithBodyWithResponse request with arbitrary body returning *PatchVendorResourceResponse
func (c *ClientWithResponses) PatchVendorResourceWithBodyWithResponse(ctx context.Context, vendorId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchVendorResourceResponse, error) {
	rsp, err := c.PatchVendorResourceWithBody(ctx, vendorId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchVendorResourceResponse(rsp)
}

func (c *ClientWithResponses) PatchVendorResourceWithResponse(ctx context.Context, vendorId string, body PatchVendorResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchVendorResourceResponse, error) {
	rsp, err := c.PatchVendorResource(ctx, vendorId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchVendorResourceResponse(rsp)
}

// GetBusinessResourceWithResponse request returning *GetBusinessResourceResponse
func (c *ClientWithResponses) GetBusinessResourceWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetBusinessResourceResponse, error) {
	rsp, err := c.GetBusinessResource(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBusinessResourceResponse(rsp)
}

// GetBusinessBalanceResourceWithResponse request returning *GetBusinessBalanceResourceResponse
func (c *ClientWithResponses) GetBusinessBalanceResourceWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetBusinessBalanceResourceResponse, error) {
	rsp, err := c.GetBusinessBalanceResource(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBusinessBalanceResourceResponse(rsp)
}

// GetCardProgramListDeprecatedWithResponse request returning *GetCardProgramListDeprecatedResponse
func (c *ClientWithResponses) GetCardProgramListDeprecatedWithResponse(ctx context.Context, params *GetCardProgramListDeprecatedParams, reqEditors ...RequestEditorFn) (*GetCardProgramListDeprecatedResponse, error) {
	rsp, err := c.GetCardProgramListDeprecated(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCardProgramListDeprecatedResponse(rsp)
}

// PostCardProgramListDeprecatedWithBodyWithResponse request with arbitrary body returning *PostCardProgramListDeprecatedResponse
func (c *ClientWithResponses) PostCardProgramListDeprecatedWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCardProgramListDeprecatedResponse, error) {
	rsp, err := c.PostCardProgramListDeprecatedWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCardProgramListDeprecatedResponse(rsp)
}

func (c *ClientWithResponses) PostCardProgramListDeprecatedWithResponse(ctx context.Context, body PostCardProgramListDeprecatedJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCardProgramListDeprecatedResponse, error) {
	rsp, err := c.PostCardProgramListDeprecated(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCardProgramListDeprecatedResponse(rsp)
}

// GetCardProgramResourceDeprecatedWithResponse request returning *GetCardProgramResourceDeprecatedResponse
func (c *ClientWithResponses) GetCardProgramResourceDeprecatedWithResponse(ctx context.Context, cardProgramId string, reqEditors ...RequestEditorFn) (*GetCardProgramResourceDeprecatedResponse, error) {
	rsp, err := c.GetCardProgramResourceDeprecated(ctx, cardProgramId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCardProgramResourceDeprecatedResponse(rsp)
}

// GetCardListWithPaginationWithResponse request returning *GetCardListWithPaginationResponse
func (c *ClientWithResponses) GetCardListWithPaginationWithResponse(ctx context.Context, params *GetCardListWithPaginationParams, reqEditors ...RequestEditorFn) (*GetCardListWithPaginationResponse, error) {
	rsp, err := c.GetCardListWithPagination(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCardListWithPaginationResponse(rsp)
}

// PostPhysicalCardWithBodyWithResponse request with arbitrary body returning *PostPhysicalCardResponse
func (c *ClientWithResponses) PostPhysicalCardWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPhysicalCardResponse, error) {
	rsp, err := c.PostPhysicalCardWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPhysicalCardResponse(rsp)
}

func (c *ClientWithResponses) PostPhysicalCardWithResponse(ctx context.Context, body PostPhysicalCardJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPhysicalCardResponse, error) {
	rsp, err := c.PostPhysicalCard(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPhysicalCardResponse(rsp)
}

// GetCardDeferredTaskResourceWithResponse request returning *GetCardDeferredTaskResourceResponse
func (c *ClientWithResponses) GetCardDeferredTaskResourceWithResponse(ctx context.Context, taskUuid string, reqEditors ...RequestEditorFn) (*GetCardDeferredTaskResourceResponse, error) {
	rsp, err := c.GetCardDeferredTaskResource(ctx, taskUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCardDeferredTaskResourceResponse(rsp)
}

// PostVirtualCardWithBodyWithResponse request with arbitrary body returning *PostVirtualCardResponse
func (c *ClientWithResponses) PostVirtualCardWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostVirtualCardResponse, error) {
	rsp, err := c.PostVirtualCardWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostVirtualCardResponse(rsp)
}

func (c *ClientWithResponses) PostVirtualCardWithResponse(ctx context.Context, body PostVirtualCardJSONRequestBody, reqEditors ...RequestEditorFn) (*PostVirtualCardResponse, error) {
	rsp, err := c.PostVirtualCard(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostVirtualCardResponse(rsp)
}

// GetCardResourceWithResponse request returning *GetCardResourceResponse
func (c *ClientWithResponses) GetCardResourceWithResponse(ctx context.Context, cardId string, reqEditors ...RequestEditorFn) (*GetCardResourceResponse, error) {
	rsp, err := c.GetCardResource(ctx, cardId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCardResourceResponse(rsp)
}

// PatchCardResourceWithBodyWithResponse request with arbitrary body returning *PatchCardResourceResponse
func (c *ClientWithResponses) PatchCardResourceWithBodyWithResponse(ctx context.Context, cardId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchCardResourceResponse, error) {
	rsp, err := c.PatchCardResourceWithBody(ctx, cardId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchCardResourceResponse(rsp)
}

func (c *ClientWithResponses) PatchCardResourceWithResponse(ctx context.Context, cardId string, body PatchCardResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchCardResourceResponse, error) {
	rsp, err := c.PatchCardResource(ctx, cardId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchCardResourceResponse(rsp)
}

// PostCardSuspensionResourceWithBodyWithResponse request with arbitrary body returning *PostCardSuspensionResourceResponse
func (c *ClientWithResponses) PostCardSuspensionResourceWithBodyWithResponse(ctx context.Context, cardId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCardSuspensionResourceResponse, error) {
	rsp, err := c.PostCardSuspensionResourceWithBody(ctx, cardId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCardSuspensionResourceResponse(rsp)
}

func (c *ClientWithResponses) PostCardSuspensionResourceWithResponse(ctx context.Context, cardId string, body PostCardSuspensionResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCardSuspensionResourceResponse, error) {
	rsp, err := c.PostCardSuspensionResource(ctx, cardId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCardSuspensionResourceResponse(rsp)
}

// PostCardTerminationResourceWithBodyWithResponse request with arbitrary body returning *PostCardTerminationResourceResponse
func (c *ClientWithResponses) PostCardTerminationResourceWithBodyWithResponse(ctx context.Context, cardId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCardTerminationResourceResponse, error) {
	rsp, err := c.PostCardTerminationResourceWithBody(ctx, cardId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCardTerminationResourceResponse(rsp)
}

func (c *ClientWithResponses) PostCardTerminationResourceWithResponse(ctx context.Context, cardId string, body PostCardTerminationResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCardTerminationResourceResponse, error) {
	rsp, err := c.PostCardTerminationResource(ctx, cardId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCardTerminationResourceResponse(rsp)
}

// PostCardUnsuspensionResourceWithBodyWithResponse request with arbitrary body returning *PostCardUnsuspensionResourceResponse
func (c *ClientWithResponses) PostCardUnsuspensionResourceWithBodyWithResponse(ctx context.Context, cardId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCardUnsuspensionResourceResponse, error) {
	rsp, err := c.PostCardUnsuspensionResourceWithBody(ctx, cardId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCardUnsuspensionResourceResponse(rsp)
}

func (c *ClientWithResponses) PostCardUnsuspensionResourceWithResponse(ctx context.Context, cardId string, body PostCardUnsuspensionResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCardUnsuspensionResourceResponse, error) {
	rsp, err := c.PostCardUnsuspensionResource(ctx, cardId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCardUnsuspensionResourceResponse(rsp)
}

// GetCashbackListWithPaginationWithResponse request returning *GetCashbackListWithPaginationResponse
func (c *ClientWithResponses) GetCashbackListWithPaginationWithResponse(ctx context.Context, params *GetCashbackListWithPaginationParams, reqEditors ...RequestEditorFn) (*GetCashbackListWithPaginationResponse, error) {
	rsp, err := c.GetCashbackListWithPagination(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCashbackListWithPaginationResponse(rsp)
}

// GetCashbackResourceWithResponse request returning *GetCashbackResourceResponse
func (c *ClientWithResponses) GetCashbackResourceWithResponse(ctx context.Context, cashbackId string, reqEditors ...RequestEditorFn) (*GetCashbackResourceResponse, error) {
	rsp, err := c.GetCashbackResource(ctx, cashbackId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCashbackResourceResponse(rsp)
}

// GetDepartmentListWithPaginationWithResponse request returning *GetDepartmentListWithPaginationResponse
func (c *ClientWithResponses) GetDepartmentListWithPaginationWithResponse(ctx context.Context, params *GetDepartmentListWithPaginationParams, reqEditors ...RequestEditorFn) (*GetDepartmentListWithPaginationResponse, error) {
	rsp, err := c.GetDepartmentListWithPagination(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDepartmentListWithPaginationResponse(rsp)
}

// PostDepartmentListWithPaginationWithBodyWithResponse request with arbitrary body returning *PostDepartmentListWithPaginationResponse
func (c *ClientWithResponses) PostDepartmentListWithPaginationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDepartmentListWithPaginationResponse, error) {
	rsp, err := c.PostDepartmentListWithPaginationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDepartmentListWithPaginationResponse(rsp)
}

func (c *ClientWithResponses) PostDepartmentListWithPaginationWithResponse(ctx context.Context, body PostDepartmentListWithPaginationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDepartmentListWithPaginationResponse, error) {
	rsp, err := c.PostDepartmentListWithPagination(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDepartmentListWithPaginationResponse(rsp)
}

// GetDepartmentResourceWithResponse request returning *GetDepartmentResourceResponse
func (c *ClientWithResponses) GetDepartmentResourceWithResponse(ctx context.Context, departmentUuid string, reqEditors ...RequestEditorFn) (*GetDepartmentResourceResponse, error) {
	rsp, err := c.GetDepartmentResource(ctx, departmentUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDepartmentResourceResponse(rsp)
}

// PatchDepartmentResourceWithBodyWithResponse request with arbitrary body returning *PatchDepartmentResourceResponse
func (c *ClientWithResponses) PatchDepartmentResourceWithBodyWithResponse(ctx context.Context, departmentUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchDepartmentResourceResponse, error) {
	rsp, err := c.PatchDepartmentResourceWithBody(ctx, departmentUuid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchDepartmentResourceResponse(rsp)
}

func (c *ClientWithResponses) PatchDepartmentResourceWithResponse(ctx context.Context, departmentUuid string, body PatchDepartmentResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchDepartmentResourceResponse, error) {
	rsp, err := c.PatchDepartmentResource(ctx, departmentUuid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchDepartmentResourceResponse(rsp)
}

// PostSalesLeadCreationWithBodyWithResponse request with arbitrary body returning *PostSalesLeadCreationResponse
func (c *ClientWithResponses) PostSalesLeadCreationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSalesLeadCreationResponse, error) {
	rsp, err := c.PostSalesLeadCreationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSalesLeadCreationResponse(rsp)
}

func (c *ClientWithResponses) PostSalesLeadCreationWithResponse(ctx context.Context, body PostSalesLeadCreationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSalesLeadCreationResponse, error) {
	rsp, err := c.PostSalesLeadCreation(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSalesLeadCreationResponse(rsp)
}

// GetSalesLeadResourceWithResponse request returning *GetSalesLeadResourceResponse
func (c *ClientWithResponses) GetSalesLeadResourceWithResponse(ctx context.Context, salesLeadId string, reqEditors ...RequestEditorFn) (*GetSalesLeadResourceResponse, error) {
	rsp, err := c.GetSalesLeadResource(ctx, salesLeadId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSalesLeadResourceResponse(rsp)
}

// PostSalesLeadDocumentUploadWithResponse request returning *PostSalesLeadDocumentUploadResponse
func (c *ClientWithResponses) PostSalesLeadDocumentUploadWithResponse(ctx context.Context, salesLeadId string, reqEditors ...RequestEditorFn) (*PostSalesLeadDocumentUploadResponse, error) {
	rsp, err := c.PostSalesLeadDocumentUpload(ctx, salesLeadId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSalesLeadDocumentUploadResponse(rsp)
}

// GetSpendLimitListWithPaginationWithResponse request returning *GetSpendLimitListWithPaginationResponse
func (c *ClientWithResponses) GetSpendLimitListWithPaginationWithResponse(ctx context.Context, params *GetSpendLimitListWithPaginationParams, reqEditors ...RequestEditorFn) (*GetSpendLimitListWithPaginationResponse, error) {
	rsp, err := c.GetSpendLimitListWithPagination(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSpendLimitListWithPaginationResponse(rsp)
}

// PostSpendLimitCreationWithBodyWithResponse request with arbitrary body returning *PostSpendLimitCreationResponse
func (c *ClientWithResponses) PostSpendLimitCreationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSpendLimitCreationResponse, error) {
	rsp, err := c.PostSpendLimitCreationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSpendLimitCreationResponse(rsp)
}

func (c *ClientWithResponses) PostSpendLimitCreationWithResponse(ctx context.Context, body PostSpendLimitCreationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSpendLimitCreationResponse, error) {
	rsp, err := c.PostSpendLimitCreation(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSpendLimitCreationResponse(rsp)
}

// GetSpendLimitDeferredTaskStatusWithResponse request returning *GetSpendLimitDeferredTaskStatusResponse
func (c *ClientWithResponses) GetSpendLimitDeferredTaskStatusWithResponse(ctx context.Context, taskUuid string, reqEditors ...RequestEditorFn) (*GetSpendLimitDeferredTaskStatusResponse, error) {
	rsp, err := c.GetSpendLimitDeferredTaskStatus(ctx, taskUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSpendLimitDeferredTaskStatusResponse(rsp)
}

// GetSpendLimitResourceWithResponse request returning *GetSpendLimitResourceResponse
func (c *ClientWithResponses) GetSpendLimitResourceWithResponse(ctx context.Context, spendLimitId string, reqEditors ...RequestEditorFn) (*GetSpendLimitResourceResponse, error) {
	rsp, err := c.GetSpendLimitResource(ctx, spendLimitId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSpendLimitResourceResponse(rsp)
}

// PatchSpendLimitResourceWithResponse request returning *PatchSpendLimitResourceResponse
func (c *ClientWithResponses) PatchSpendLimitResourceWithResponse(ctx context.Context, spendLimitId string, reqEditors ...RequestEditorFn) (*PatchSpendLimitResourceResponse, error) {
	rsp, err := c.PatchSpendLimitResource(ctx, spendLimitId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchSpendLimitResourceResponse(rsp)
}

// PostSpendLimitTerminationResourceWithBodyWithResponse request with arbitrary body returning *PostSpendLimitTerminationResourceResponse
func (c *ClientWithResponses) PostSpendLimitTerminationResourceWithBodyWithResponse(ctx context.Context, spendLimitId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSpendLimitTerminationResourceResponse, error) {
	rsp, err := c.PostSpendLimitTerminationResourceWithBody(ctx, spendLimitId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSpendLimitTerminationResourceResponse(rsp)
}

func (c *ClientWithResponses) PostSpendLimitTerminationResourceWithResponse(ctx context.Context, spendLimitId string, body PostSpendLimitTerminationResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSpendLimitTerminationResourceResponse, error) {
	rsp, err := c.PostSpendLimitTerminationResource(ctx, spendLimitId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSpendLimitTerminationResourceResponse(rsp)
}

// PostSpendLimitSuspensionResourceWithResponse request returning *PostSpendLimitSuspensionResourceResponse
func (c *ClientWithResponses) PostSpendLimitSuspensionResourceWithResponse(ctx context.Context, spendLimitId string, reqEditors ...RequestEditorFn) (*PostSpendLimitSuspensionResourceResponse, error) {
	rsp, err := c.PostSpendLimitSuspensionResource(ctx, spendLimitId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSpendLimitSuspensionResourceResponse(rsp)
}

// PostSpendLimitUnsuspensionResourceWithResponse request returning *PostSpendLimitUnsuspensionResourceResponse
func (c *ClientWithResponses) PostSpendLimitUnsuspensionResourceWithResponse(ctx context.Context, spendLimitId string, reqEditors ...RequestEditorFn) (*PostSpendLimitUnsuspensionResourceResponse, error) {
	rsp, err := c.PostSpendLimitUnsuspensionResource(ctx, spendLimitId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSpendLimitUnsuspensionResourceResponse(rsp)
}

// GetLocationListResourceWithResponse request returning *GetLocationListResourceResponse
func (c *ClientWithResponses) GetLocationListResourceWithResponse(ctx context.Context, params *GetLocationListResourceParams, reqEditors ...RequestEditorFn) (*GetLocationListResourceResponse, error) {
	rsp, err := c.GetLocationListResource(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLocationListResourceResponse(rsp)
}

// PostLocationListResourceWithBodyWithResponse request with arbitrary body returning *PostLocationListResourceResponse
func (c *ClientWithResponses) PostLocationListResourceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLocationListResourceResponse, error) {
	rsp, err := c.PostLocationListResourceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLocationListResourceResponse(rsp)
}

func (c *ClientWithResponses) PostLocationListResourceWithResponse(ctx context.Context, body PostLocationListResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostLocationListResourceResponse, error) {
	rsp, err := c.PostLocationListResource(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLocationListResourceResponse(rsp)
}

// GetLocationSingleResourceWithResponse request returning *GetLocationSingleResourceResponse
func (c *ClientWithResponses) GetLocationSingleResourceWithResponse(ctx context.Context, locationUuid string, reqEditors ...RequestEditorFn) (*GetLocationSingleResourceResponse, error) {
	rsp, err := c.GetLocationSingleResource(ctx, locationUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLocationSingleResourceResponse(rsp)
}

// PatchLocationSingleResourceWithBodyWithResponse request with arbitrary body returning *PatchLocationSingleResourceResponse
func (c *ClientWithResponses) PatchLocationSingleResourceWithBodyWithResponse(ctx context.Context, locationUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchLocationSingleResourceResponse, error) {
	rsp, err := c.PatchLocationSingleResourceWithBody(ctx, locationUuid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchLocationSingleResourceResponse(rsp)
}

func (c *ClientWithResponses) PatchLocationSingleResourceWithResponse(ctx context.Context, locationUuid string, body PatchLocationSingleResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchLocationSingleResourceResponse, error) {
	rsp, err := c.PatchLocationSingleResource(ctx, locationUuid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchLocationSingleResourceResponse(rsp)
}

// GetMemoListWithPaginationWithResponse request returning *GetMemoListWithPaginationResponse
func (c *ClientWithResponses) GetMemoListWithPaginationWithResponse(ctx context.Context, params *GetMemoListWithPaginationParams, reqEditors ...RequestEditorFn) (*GetMemoListWithPaginationResponse, error) {
	rsp, err := c.GetMemoListWithPagination(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMemoListWithPaginationResponse(rsp)
}

// GetMemoSingleResourceWithResponse request returning *GetMemoSingleResourceResponse
func (c *ClientWithResponses) GetMemoSingleResourceWithResponse(ctx context.Context, transactionId string, reqEditors ...RequestEditorFn) (*GetMemoSingleResourceResponse, error) {
	rsp, err := c.GetMemoSingleResource(ctx, transactionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMemoSingleResourceResponse(rsp)
}

// GetMerchantListWithPaginationWithResponse request returning *GetMerchantListWithPaginationResponse
func (c *ClientWithResponses) GetMerchantListWithPaginationWithResponse(ctx context.Context, params *GetMerchantListWithPaginationParams, reqEditors ...RequestEditorFn) (*GetMerchantListWithPaginationResponse, error) {
	rsp, err := c.GetMerchantListWithPagination(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMerchantListWithPaginationResponse(rsp)
}

// GetReceiptIntegrationOptedOutEmailsListResourceWithBodyWithResponse request with arbitrary body returning *GetReceiptIntegrationOptedOutEmailsListResourceResponse
func (c *ClientWithResponses) GetReceiptIntegrationOptedOutEmailsListResourceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetReceiptIntegrationOptedOutEmailsListResourceResponse, error) {
	rsp, err := c.GetReceiptIntegrationOptedOutEmailsListResourceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReceiptIntegrationOptedOutEmailsListResourceResponse(rsp)
}

func (c *ClientWithResponses) GetReceiptIntegrationOptedOutEmailsListResourceWithResponse(ctx context.Context, body GetReceiptIntegrationOptedOutEmailsListResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*GetReceiptIntegrationOptedOutEmailsListResourceResponse, error) {
	rsp, err := c.GetReceiptIntegrationOptedOutEmailsListResource(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReceiptIntegrationOptedOutEmailsListResourceResponse(rsp)
}

// PostReceiptIntegrationOptedOutEmailsListResourceWithBodyWithResponse request with arbitrary body returning *PostReceiptIntegrationOptedOutEmailsListResourceResponse
func (c *ClientWithResponses) PostReceiptIntegrationOptedOutEmailsListResourceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostReceiptIntegrationOptedOutEmailsListResourceResponse, error) {
	rsp, err := c.PostReceiptIntegrationOptedOutEmailsListResourceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostReceiptIntegrationOptedOutEmailsListResourceResponse(rsp)
}

func (c *ClientWithResponses) PostReceiptIntegrationOptedOutEmailsListResourceWithResponse(ctx context.Context, body PostReceiptIntegrationOptedOutEmailsListResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostReceiptIntegrationOptedOutEmailsListResourceResponse, error) {
	rsp, err := c.PostReceiptIntegrationOptedOutEmailsListResource(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostReceiptIntegrationOptedOutEmailsListResourceResponse(rsp)
}

// DeleteReceiptIntegrationOptedOutEmailsDeleteResourceWithResponse request returning *DeleteReceiptIntegrationOptedOutEmailsDeleteResourceResponse
func (c *ClientWithResponses) DeleteReceiptIntegrationOptedOutEmailsDeleteResourceWithResponse(ctx context.Context, mailboxOptedOutEmailUuid string, reqEditors ...RequestEditorFn) (*DeleteReceiptIntegrationOptedOutEmailsDeleteResourceResponse, error) {
	rsp, err := c.DeleteReceiptIntegrationOptedOutEmailsDeleteResource(ctx, mailboxOptedOutEmailUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteReceiptIntegrationOptedOutEmailsDeleteResourceResponse(rsp)
}

// GetReceiptListWithPaginationWithResponse request returning *GetReceiptListWithPaginationResponse
func (c *ClientWithResponses) GetReceiptListWithPaginationWithResponse(ctx context.Context, params *GetReceiptListWithPaginationParams, reqEditors ...RequestEditorFn) (*GetReceiptListWithPaginationResponse, error) {
	rsp, err := c.GetReceiptListWithPagination(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReceiptListWithPaginationResponse(rsp)
}

// GetReceiptSingleResourceWithResponse request returning *GetReceiptSingleResourceResponse
func (c *ClientWithResponses) GetReceiptSingleResourceWithResponse(ctx context.Context, receiptId string, reqEditors ...RequestEditorFn) (*GetReceiptSingleResourceResponse, error) {
	rsp, err := c.GetReceiptSingleResource(ctx, receiptId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReceiptSingleResourceResponse(rsp)
}

// GetReimbursementListWithPaginationWithResponse request returning *GetReimbursementListWithPaginationResponse
func (c *ClientWithResponses) GetReimbursementListWithPaginationWithResponse(ctx context.Context, params *GetReimbursementListWithPaginationParams, reqEditors ...RequestEditorFn) (*GetReimbursementListWithPaginationResponse, error) {
	rsp, err := c.GetReimbursementListWithPagination(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReimbursementListWithPaginationResponse(rsp)
}

// GetReimbursementResourceWithResponse request returning *GetReimbursementResourceResponse
func (c *ClientWithResponses) GetReimbursementResourceWithResponse(ctx context.Context, reimbursementId string, reqEditors ...RequestEditorFn) (*GetReimbursementResourceResponse, error) {
	rsp, err := c.GetReimbursementResource(ctx, reimbursementId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReimbursementResourceResponse(rsp)
}

// GetSpendProgramResourceWithResponse request returning *GetSpendProgramResourceResponse
func (c *ClientWithResponses) GetSpendProgramResourceWithResponse(ctx context.Context, params *GetSpendProgramResourceParams, reqEditors ...RequestEditorFn) (*GetSpendProgramResourceResponse, error) {
	rsp, err := c.GetSpendProgramResource(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSpendProgramResourceResponse(rsp)
}

// PostSpendProgramResourceWithBodyWithResponse request with arbitrary body returning *PostSpendProgramResourceResponse
func (c *ClientWithResponses) PostSpendProgramResourceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSpendProgramResourceResponse, error) {
	rsp, err := c.PostSpendProgramResourceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSpendProgramResourceResponse(rsp)
}

func (c *ClientWithResponses) PostSpendProgramResourceWithResponse(ctx context.Context, body PostSpendProgramResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSpendProgramResourceResponse, error) {
	rsp, err := c.PostSpendProgramResource(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSpendProgramResourceResponse(rsp)
}

// GetSpendProgramSingleResourceWithResponse request returning *GetSpendProgramSingleResourceResponse
func (c *ClientWithResponses) GetSpendProgramSingleResourceWithResponse(ctx context.Context, spendProgramId string, reqEditors ...RequestEditorFn) (*GetSpendProgramSingleResourceResponse, error) {
	rsp, err := c.GetSpendProgramSingleResource(ctx, spendProgramId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSpendProgramSingleResourceResponse(rsp)
}

// GetStatementListWithPaginationWithResponse request returning *GetStatementListWithPaginationResponse
func (c *ClientWithResponses) GetStatementListWithPaginationWithResponse(ctx context.Context, params *GetStatementListWithPaginationParams, reqEditors ...RequestEditorFn) (*GetStatementListWithPaginationResponse, error) {
	rsp, err := c.GetStatementListWithPagination(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatementListWithPaginationResponse(rsp)
}

// GetStatementResourceWithResponse request returning *GetStatementResourceResponse
func (c *ClientWithResponses) GetStatementResourceWithResponse(ctx context.Context, statementId string, reqEditors ...RequestEditorFn) (*GetStatementResourceResponse, error) {
	rsp, err := c.GetStatementResource(ctx, statementId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatementResourceResponse(rsp)
}

// GetTransactionsCanonicalListWithPaginationWithResponse request returning *GetTransactionsCanonicalListWithPaginationResponse
func (c *ClientWithResponses) GetTransactionsCanonicalListWithPaginationWithResponse(ctx context.Context, params *GetTransactionsCanonicalListWithPaginationParams, reqEditors ...RequestEditorFn) (*GetTransactionsCanonicalListWithPaginationResponse, error) {
	rsp, err := c.GetTransactionsCanonicalListWithPagination(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTransactionsCanonicalListWithPaginationResponse(rsp)
}

// GetTransactionCanonicalResourceWithResponse request returning *GetTransactionCanonicalResourceResponse
func (c *ClientWithResponses) GetTransactionCanonicalResourceWithResponse(ctx context.Context, transactionId string, reqEditors ...RequestEditorFn) (*GetTransactionCanonicalResourceResponse, error) {
	rsp, err := c.GetTransactionCanonicalResource(ctx, transactionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTransactionCanonicalResourceResponse(rsp)
}

// GetTransferListWithPaginationWithResponse request returning *GetTransferListWithPaginationResponse
func (c *ClientWithResponses) GetTransferListWithPaginationWithResponse(ctx context.Context, params *GetTransferListWithPaginationParams, reqEditors ...RequestEditorFn) (*GetTransferListWithPaginationResponse, error) {
	rsp, err := c.GetTransferListWithPagination(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTransferListWithPaginationResponse(rsp)
}

// GetTransferResourceWithResponse request returning *GetTransferResourceResponse
func (c *ClientWithResponses) GetTransferResourceWithResponse(ctx context.Context, transferId string, reqEditors ...RequestEditorFn) (*GetTransferResourceResponse, error) {
	rsp, err := c.GetTransferResource(ctx, transferId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTransferResourceResponse(rsp)
}

// GetUserListWithPaginationWithResponse request returning *GetUserListWithPaginationResponse
func (c *ClientWithResponses) GetUserListWithPaginationWithResponse(ctx context.Context, params *GetUserListWithPaginationParams, reqEditors ...RequestEditorFn) (*GetUserListWithPaginationResponse, error) {
	rsp, err := c.GetUserListWithPagination(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserListWithPaginationResponse(rsp)
}

// PostUserCreationDeferredTaskWithBodyWithResponse request with arbitrary body returning *PostUserCreationDeferredTaskResponse
func (c *ClientWithResponses) PostUserCreationDeferredTaskWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserCreationDeferredTaskResponse, error) {
	rsp, err := c.PostUserCreationDeferredTaskWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserCreationDeferredTaskResponse(rsp)
}

func (c *ClientWithResponses) PostUserCreationDeferredTaskWithResponse(ctx context.Context, body PostUserCreationDeferredTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserCreationDeferredTaskResponse, error) {
	rsp, err := c.PostUserCreationDeferredTask(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserCreationDeferredTaskResponse(rsp)
}

// GetUserDeferredTaskResourceWithResponse request returning *GetUserDeferredTaskResourceResponse
func (c *ClientWithResponses) GetUserDeferredTaskResourceWithResponse(ctx context.Context, taskUuid string, reqEditors ...RequestEditorFn) (*GetUserDeferredTaskResourceResponse, error) {
	rsp, err := c.GetUserDeferredTaskResource(ctx, taskUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserDeferredTaskResourceResponse(rsp)
}

// DeleteUserResourceWithResponse request returning *DeleteUserResourceResponse
func (c *ClientWithResponses) DeleteUserResourceWithResponse(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*DeleteUserResourceResponse, error) {
	rsp, err := c.DeleteUserResource(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserResourceResponse(rsp)
}

// GetUserResourceWithResponse request returning *GetUserResourceResponse
func (c *ClientWithResponses) GetUserResourceWithResponse(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*GetUserResourceResponse, error) {
	rsp, err := c.GetUserResource(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserResourceResponse(rsp)
}

// PatchUserResourceWithBodyWithResponse request with arbitrary body returning *PatchUserResourceResponse
func (c *ClientWithResponses) PatchUserResourceWithBodyWithResponse(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchUserResourceResponse, error) {
	rsp, err := c.PatchUserResourceWithBody(ctx, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchUserResourceResponse(rsp)
}

func (c *ClientWithResponses) PatchUserResourceWithResponse(ctx context.Context, userId string, body PatchUserResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchUserResourceResponse, error) {
	rsp, err := c.PatchUserResource(ctx, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchUserResourceResponse(rsp)
}

// ParseGetGlAccountListResourceResponse parses an HTTP response from a GetGlAccountListResourceWithResponse call
func ParseGetGlAccountListResourceResponse(rsp *http.Response) (*GetGlAccountListResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGlAccountListResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponseApiAccountingGLAccountResourceSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostGlAccountListResourceResponse parses an HTTP response from a PostGlAccountListResourceWithResponse call
func ParsePostGlAccountListResourceResponse(rsp *http.Response) (*PostGlAccountListResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGlAccountListResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ApiAccountingTrackingCategoryUploadResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteGlAccountResourceResponse parses an HTTP response from a DeleteGlAccountResourceWithResponse call
func ParseDeleteGlAccountResourceResponse(rsp *http.Response) (*DeleteGlAccountResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteGlAccountResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetGlAccountResourceResponse parses an HTTP response from a GetGlAccountResourceWithResponse call
func ParseGetGlAccountResourceResponse(rsp *http.Response) (*GetGlAccountResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGlAccountResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GeneralLedgerAccount
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchGlAccountResourceResponse parses an HTTP response from a PatchGlAccountResourceWithResponse call
func ParsePatchGlAccountResourceResponse(rsp *http.Response) (*PatchGlAccountResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchGlAccountResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GeneralLedgerAccount
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteAccountingConnectionResouceResponse parses an HTTP response from a DeleteAccountingConnectionResouceWithResponse call
func ParseDeleteAccountingConnectionResouceResponse(rsp *http.Response) (*DeleteAccountingConnectionResouceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAccountingConnectionResouceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAccountingConnectionResouceResponse parses an HTTP response from a GetAccountingConnectionResouceWithResponse call
func ParseGetAccountingConnectionResouceResponse(rsp *http.Response) (*GetAccountingConnectionResouceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAccountingConnectionResouceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccountingProvider
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAccountingConnectionResouceResponse parses an HTTP response from a PostAccountingConnectionResouceWithResponse call
func ParsePostAccountingConnectionResouceResponse(rsp *http.Response) (*PostAccountingConnectionResouceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAccountingConnectionResouceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AccountingProvider
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetCustomFieldOptionListResourceResponse parses an HTTP response from a GetCustomFieldOptionListResourceWithResponse call
func ParseGetCustomFieldOptionListResourceResponse(rsp *http.Response) (*GetCustomFieldOptionListResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCustomFieldOptionListResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponseApiAccountingCustomFieldOptionResourceSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostCustomFieldOptionListResourceResponse parses an HTTP response from a PostCustomFieldOptionListResourceWithResponse call
func ParsePostCustomFieldOptionListResourceResponse(rsp *http.Response) (*PostCustomFieldOptionListResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCustomFieldOptionListResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ApiAccountingTrackingCategoryUploadResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteCustomFieldOptionResourceResponse parses an HTTP response from a DeleteCustomFieldOptionResourceWithResponse call
func ParseDeleteCustomFieldOptionResourceResponse(rsp *http.Response) (*DeleteCustomFieldOptionResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCustomFieldOptionResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCustomFieldOptionResourceResponse parses an HTTP response from a GetCustomFieldOptionResourceWithResponse call
func ParseGetCustomFieldOptionResourceResponse(rsp *http.Response) (*GetCustomFieldOptionResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCustomFieldOptionResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomFieldOption
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchCustomFieldOptionResourceResponse parses an HTTP response from a PatchCustomFieldOptionResourceWithResponse call
func ParsePatchCustomFieldOptionResourceResponse(rsp *http.Response) (*PatchCustomFieldOptionResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchCustomFieldOptionResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomFieldOption
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCustomFieldListResourceResponse parses an HTTP response from a GetCustomFieldListResourceWithResponse call
func ParseGetCustomFieldListResourceResponse(rsp *http.Response) (*GetCustomFieldListResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCustomFieldListResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponseApiAccountingCustomFieldResourceSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostCustomFieldListResourceResponse parses an HTTP response from a PostCustomFieldListResourceWithResponse call
func ParsePostCustomFieldListResourceResponse(rsp *http.Response) (*PostCustomFieldListResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCustomFieldListResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ApiAccountingCustomFieldResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteCustomFieldResourceResponse parses an HTTP response from a DeleteCustomFieldResourceWithResponse call
func ParseDeleteCustomFieldResourceResponse(rsp *http.Response) (*DeleteCustomFieldResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCustomFieldResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCustomFieldResourceResponse parses an HTTP response from a GetCustomFieldResourceWithResponse call
func ParseGetCustomFieldResourceResponse(rsp *http.Response) (*GetCustomFieldResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCustomFieldResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiAccountingCustomFieldResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchCustomFieldResourceResponse parses an HTTP response from a PatchCustomFieldResourceWithResponse call
func ParsePatchCustomFieldResourceResponse(rsp *http.Response) (*PatchCustomFieldResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchCustomFieldResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiAccountingCustomFieldResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSubsidiaryListResourceResponse parses an HTTP response from a GetSubsidiaryListResourceWithResponse call
func ParseGetSubsidiaryListResourceResponse(rsp *http.Response) (*GetSubsidiaryListResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSubsidiaryListResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponseApiAccountingSubsidiaryResourceSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostSubsidiaryListResourceResponse parses an HTTP response from a PostSubsidiaryListResourceWithResponse call
func ParsePostSubsidiaryListResourceResponse(rsp *http.Response) (*PostSubsidiaryListResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSubsidiaryListResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ApiAccountingTrackingCategoryUploadResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteSubsidiaryResourceResponse parses an HTTP response from a DeleteSubsidiaryResourceWithResponse call
func ParseDeleteSubsidiaryResourceResponse(rsp *http.Response) (*DeleteSubsidiaryResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSubsidiaryResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSubsidiaryResourceResponse parses an HTTP response from a GetSubsidiaryResourceWithResponse call
func ParseGetSubsidiaryResourceResponse(rsp *http.Response) (*GetSubsidiaryResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSubsidiaryResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Subsidiary
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchSubsidiaryResourceResponse parses an HTTP response from a PatchSubsidiaryResourceWithResponse call
func ParsePatchSubsidiaryResourceResponse(rsp *http.Response) (*PatchSubsidiaryResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchSubsidiaryResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Subsidiary
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostSyncListResourceResponse parses an HTTP response from a PostSyncListResourceWithResponse call
func ParsePostSyncListResourceResponse(rsp *http.Response) (*PostSyncListResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSyncListResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSyncResourceResponse parses an HTTP response from a GetSyncResourceWithResponse call
func ParseGetSyncResourceResponse(rsp *http.Response) (*GetSyncResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSyncResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Sync
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetVendorListResourceResponse parses an HTTP response from a GetVendorListResourceWithResponse call
func ParseGetVendorListResourceResponse(rsp *http.Response) (*GetVendorListResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVendorListResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponseApiAccountingVendorResourceSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostVendorListResourceResponse parses an HTTP response from a PostVendorListResourceWithResponse call
func ParsePostVendorListResourceResponse(rsp *http.Response) (*PostVendorListResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostVendorListResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ApiAccountingTrackingCategoryUploadResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteVendorResourceResponse parses an HTTP response from a DeleteVendorResourceWithResponse call
func ParseDeleteVendorResourceResponse(rsp *http.Response) (*DeleteVendorResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteVendorResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetVendorResourceResponse parses an HTTP response from a GetVendorResourceWithResponse call
func ParseGetVendorResourceResponse(rsp *http.Response) (*GetVendorResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVendorResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VendorAccount
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchVendorResourceResponse parses an HTTP response from a PatchVendorResourceWithResponse call
func ParsePatchVendorResourceResponse(rsp *http.Response) (*PatchVendorResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchVendorResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetBusinessResourceResponse parses an HTTP response from a GetBusinessResourceWithResponse call
func ParseGetBusinessResourceResponse(rsp *http.Response) (*GetBusinessResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBusinessResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Business
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetBusinessBalanceResourceResponse parses an HTTP response from a GetBusinessBalanceResourceWithResponse call
func ParseGetBusinessBalanceResourceResponse(rsp *http.Response) (*GetBusinessBalanceResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBusinessBalanceResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BusinessBalance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCardProgramListDeprecatedResponse parses an HTTP response from a GetCardProgramListDeprecatedWithResponse call
func ParseGetCardProgramListDeprecatedResponse(rsp *http.Response) (*GetCardProgramListDeprecatedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCardProgramListDeprecatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponseApiCardProgramResourceSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostCardProgramListDeprecatedResponse parses an HTTP response from a PostCardProgramListDeprecatedWithResponse call
func ParsePostCardProgramListDeprecatedResponse(rsp *http.Response) (*PostCardProgramListDeprecatedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCardProgramListDeprecatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ApiCardProgramResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetCardProgramResourceDeprecatedResponse parses an HTTP response from a GetCardProgramResourceDeprecatedWithResponse call
func ParseGetCardProgramResourceDeprecatedResponse(rsp *http.Response) (*GetCardProgramResourceDeprecatedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCardProgramResourceDeprecatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiCardProgramResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCardListWithPaginationResponse parses an HTTP response from a GetCardListWithPaginationWithResponse call
func ParseGetCardListWithPaginationResponse(rsp *http.Response) (*GetCardListWithPaginationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCardListWithPaginationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponseApiCardResourceSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPhysicalCardResponse parses an HTTP response from a PostPhysicalCardWithResponse call
func ParsePostPhysicalCardResponse(rsp *http.Response) (*PostPhysicalCardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPhysicalCardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeferredTaskUUID
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCardDeferredTaskResourceResponse parses an HTTP response from a GetCardDeferredTaskResourceWithResponse call
func ParseGetCardDeferredTaskResourceResponse(rsp *http.Response) (*GetCardDeferredTaskResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCardDeferredTaskResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CardDeferredTask
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostVirtualCardResponse parses an HTTP response from a PostVirtualCardWithResponse call
func ParsePostVirtualCardResponse(rsp *http.Response) (*PostVirtualCardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostVirtualCardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeferredTaskUUID
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCardResourceResponse parses an HTTP response from a GetCardResourceWithResponse call
func ParseGetCardResourceResponse(rsp *http.Response) (*GetCardResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCardResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Card
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchCardResourceResponse parses an HTTP response from a PatchCardResourceWithResponse call
func ParsePatchCardResourceResponse(rsp *http.Response) (*PatchCardResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchCardResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostCardSuspensionResourceResponse parses an HTTP response from a PostCardSuspensionResourceWithResponse call
func ParsePostCardSuspensionResourceResponse(rsp *http.Response) (*PostCardSuspensionResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCardSuspensionResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeferredTaskUUID
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostCardTerminationResourceResponse parses an HTTP response from a PostCardTerminationResourceWithResponse call
func ParsePostCardTerminationResourceResponse(rsp *http.Response) (*PostCardTerminationResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCardTerminationResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeferredTaskUUID
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostCardUnsuspensionResourceResponse parses an HTTP response from a PostCardUnsuspensionResourceWithResponse call
func ParsePostCardUnsuspensionResourceResponse(rsp *http.Response) (*PostCardUnsuspensionResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCardUnsuspensionResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeferredTaskUUID
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCashbackListWithPaginationResponse parses an HTTP response from a GetCashbackListWithPaginationWithResponse call
func ParseGetCashbackListWithPaginationResponse(rsp *http.Response) (*GetCashbackListWithPaginationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCashbackListWithPaginationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponseApiCashbackResourceSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCashbackResourceResponse parses an HTTP response from a GetCashbackResourceWithResponse call
func ParseGetCashbackResourceResponse(rsp *http.Response) (*GetCashbackResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCashbackResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Cashback
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDepartmentListWithPaginationResponse parses an HTTP response from a GetDepartmentListWithPaginationWithResponse call
func ParseGetDepartmentListWithPaginationResponse(rsp *http.Response) (*GetDepartmentListWithPaginationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDepartmentListWithPaginationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponseApiDepartmentResourceSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostDepartmentListWithPaginationResponse parses an HTTP response from a PostDepartmentListWithPaginationWithResponse call
func ParsePostDepartmentListWithPaginationResponse(rsp *http.Response) (*PostDepartmentListWithPaginationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDepartmentListWithPaginationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Department
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDepartmentResourceResponse parses an HTTP response from a GetDepartmentResourceWithResponse call
func ParseGetDepartmentResourceResponse(rsp *http.Response) (*GetDepartmentResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDepartmentResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Department
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchDepartmentResourceResponse parses an HTTP response from a PatchDepartmentResourceWithResponse call
func ParsePatchDepartmentResourceResponse(rsp *http.Response) (*PatchDepartmentResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchDepartmentResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Department
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostSalesLeadCreationResponse parses an HTTP response from a PostSalesLeadCreationWithResponse call
func ParsePostSalesLeadCreationResponse(rsp *http.Response) (*PostSalesLeadCreationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSalesLeadCreationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSalesLeadResourceResponse parses an HTTP response from a GetSalesLeadResourceWithResponse call
func ParseGetSalesLeadResourceResponse(rsp *http.Response) (*GetSalesLeadResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSalesLeadResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Lead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostSalesLeadDocumentUploadResponse parses an HTTP response from a PostSalesLeadDocumentUploadWithResponse call
func ParsePostSalesLeadDocumentUploadResponse(rsp *http.Response) (*PostSalesLeadDocumentUploadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSalesLeadDocumentUploadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Upload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSpendLimitListWithPaginationResponse parses an HTTP response from a GetSpendLimitListWithPaginationWithResponse call
func ParseGetSpendLimitListWithPaginationResponse(rsp *http.Response) (*GetSpendLimitListWithPaginationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSpendLimitListWithPaginationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponseApiSpendLimitResourceSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostSpendLimitCreationResponse parses an HTTP response from a PostSpendLimitCreationWithResponse call
func ParsePostSpendLimitCreationResponse(rsp *http.Response) (*PostSpendLimitCreationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSpendLimitCreationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeferredTaskUUID
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSpendLimitDeferredTaskStatusResponse parses an HTTP response from a GetSpendLimitDeferredTaskStatusWithResponse call
func ParseGetSpendLimitDeferredTaskStatusResponse(rsp *http.Response) (*GetSpendLimitDeferredTaskStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSpendLimitDeferredTaskStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SpendLimitDeferredTask
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSpendLimitResourceResponse parses an HTTP response from a GetSpendLimitResourceWithResponse call
func ParseGetSpendLimitResourceResponse(rsp *http.Response) (*GetSpendLimitResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSpendLimitResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Limit
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchSpendLimitResourceResponse parses an HTTP response from a PatchSpendLimitResourceWithResponse call
func ParsePatchSpendLimitResourceResponse(rsp *http.Response) (*PatchSpendLimitResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchSpendLimitResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Limit
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostSpendLimitTerminationResourceResponse parses an HTTP response from a PostSpendLimitTerminationResourceWithResponse call
func ParsePostSpendLimitTerminationResourceResponse(rsp *http.Response) (*PostSpendLimitTerminationResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSpendLimitTerminationResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeferredTaskUUID
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostSpendLimitSuspensionResourceResponse parses an HTTP response from a PostSpendLimitSuspensionResourceWithResponse call
func ParsePostSpendLimitSuspensionResourceResponse(rsp *http.Response) (*PostSpendLimitSuspensionResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSpendLimitSuspensionResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Limit
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostSpendLimitUnsuspensionResourceResponse parses an HTTP response from a PostSpendLimitUnsuspensionResourceWithResponse call
func ParsePostSpendLimitUnsuspensionResourceResponse(rsp *http.Response) (*PostSpendLimitUnsuspensionResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSpendLimitUnsuspensionResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Limit
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetLocationListResourceResponse parses an HTTP response from a GetLocationListResourceWithResponse call
func ParseGetLocationListResourceResponse(rsp *http.Response) (*GetLocationListResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLocationListResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponseApiLocationResourceSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostLocationListResourceResponse parses an HTTP response from a PostLocationListResourceWithResponse call
func ParsePostLocationListResourceResponse(rsp *http.Response) (*PostLocationListResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostLocationListResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Location
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetLocationSingleResourceResponse parses an HTTP response from a GetLocationSingleResourceWithResponse call
func ParseGetLocationSingleResourceResponse(rsp *http.Response) (*GetLocationSingleResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLocationSingleResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Location
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchLocationSingleResourceResponse parses an HTTP response from a PatchLocationSingleResourceWithResponse call
func ParsePatchLocationSingleResourceResponse(rsp *http.Response) (*PatchLocationSingleResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchLocationSingleResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Location
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMemoListWithPaginationResponse parses an HTTP response from a GetMemoListWithPaginationWithResponse call
func ParseGetMemoListWithPaginationResponse(rsp *http.Response) (*GetMemoListWithPaginationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMemoListWithPaginationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponseApiMemoResourceSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMemoSingleResourceResponse parses an HTTP response from a GetMemoSingleResourceWithResponse call
func ParseGetMemoSingleResourceResponse(rsp *http.Response) (*GetMemoSingleResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMemoSingleResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Memo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMerchantListWithPaginationResponse parses an HTTP response from a GetMerchantListWithPaginationWithResponse call
func ParseGetMerchantListWithPaginationResponse(rsp *http.Response) (*GetMerchantListWithPaginationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMerchantListWithPaginationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponseApiMerchantResourceSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetReceiptIntegrationOptedOutEmailsListResourceResponse parses an HTTP response from a GetReceiptIntegrationOptedOutEmailsListResourceWithResponse call
func ParseGetReceiptIntegrationOptedOutEmailsListResourceResponse(rsp *http.Response) (*GetReceiptIntegrationOptedOutEmailsListResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetReceiptIntegrationOptedOutEmailsListResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiReceiptIntegrationOptedOutEmailResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostReceiptIntegrationOptedOutEmailsListResourceResponse parses an HTTP response from a PostReceiptIntegrationOptedOutEmailsListResourceWithResponse call
func ParsePostReceiptIntegrationOptedOutEmailsListResourceResponse(rsp *http.Response) (*PostReceiptIntegrationOptedOutEmailsListResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostReceiptIntegrationOptedOutEmailsListResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ApiReceiptIntegrationOptedOutEmailResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteReceiptIntegrationOptedOutEmailsDeleteResourceResponse parses an HTTP response from a DeleteReceiptIntegrationOptedOutEmailsDeleteResourceWithResponse call
func ParseDeleteReceiptIntegrationOptedOutEmailsDeleteResourceResponse(rsp *http.Response) (*DeleteReceiptIntegrationOptedOutEmailsDeleteResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteReceiptIntegrationOptedOutEmailsDeleteResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetReceiptListWithPaginationResponse parses an HTTP response from a GetReceiptListWithPaginationWithResponse call
func ParseGetReceiptListWithPaginationResponse(rsp *http.Response) (*GetReceiptListWithPaginationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetReceiptListWithPaginationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponseApiReceiptResourceSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetReceiptSingleResourceResponse parses an HTTP response from a GetReceiptSingleResourceWithResponse call
func ParseGetReceiptSingleResourceResponse(rsp *http.Response) (*GetReceiptSingleResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetReceiptSingleResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Receipt
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetReimbursementListWithPaginationResponse parses an HTTP response from a GetReimbursementListWithPaginationWithResponse call
func ParseGetReimbursementListWithPaginationResponse(rsp *http.Response) (*GetReimbursementListWithPaginationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetReimbursementListWithPaginationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponseApiReimbursementResourceSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetReimbursementResourceResponse parses an HTTP response from a GetReimbursementResourceWithResponse call
func ParseGetReimbursementResourceResponse(rsp *http.Response) (*GetReimbursementResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetReimbursementResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Reimbursement
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSpendProgramResourceResponse parses an HTTP response from a GetSpendProgramResourceWithResponse call
func ParseGetSpendProgramResourceResponse(rsp *http.Response) (*GetSpendProgramResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSpendProgramResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponseApiSpendProgramResourceSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostSpendProgramResourceResponse parses an HTTP response from a PostSpendProgramResourceWithResponse call
func ParsePostSpendProgramResourceResponse(rsp *http.Response) (*PostSpendProgramResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSpendProgramResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ApiSpendProgramResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetSpendProgramSingleResourceResponse parses an HTTP response from a GetSpendProgramSingleResourceWithResponse call
func ParseGetSpendProgramSingleResourceResponse(rsp *http.Response) (*GetSpendProgramSingleResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSpendProgramSingleResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiSpendProgramResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetStatementListWithPaginationResponse parses an HTTP response from a GetStatementListWithPaginationWithResponse call
func ParseGetStatementListWithPaginationResponse(rsp *http.Response) (*GetStatementListWithPaginationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatementListWithPaginationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponseApiStatementResourceSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetStatementResourceResponse parses an HTTP response from a GetStatementResourceWithResponse call
func ParseGetStatementResourceResponse(rsp *http.Response) (*GetStatementResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatementResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Statement
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTransactionsCanonicalListWithPaginationResponse parses an HTTP response from a GetTransactionsCanonicalListWithPaginationWithResponse call
func ParseGetTransactionsCanonicalListWithPaginationResponse(rsp *http.Response) (*GetTransactionsCanonicalListWithPaginationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTransactionsCanonicalListWithPaginationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponseApiTransactionCanonicalSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTransactionCanonicalResourceResponse parses an HTTP response from a GetTransactionCanonicalResourceWithResponse call
func ParseGetTransactionCanonicalResourceResponse(rsp *http.Response) (*GetTransactionCanonicalResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTransactionCanonicalResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Transaction
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTransferListWithPaginationResponse parses an HTTP response from a GetTransferListWithPaginationWithResponse call
func ParseGetTransferListWithPaginationResponse(rsp *http.Response) (*GetTransferListWithPaginationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTransferListWithPaginationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponseApiTransferResourceSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTransferResourceResponse parses an HTTP response from a GetTransferResourceWithResponse call
func ParseGetTransferResourceResponse(rsp *http.Response) (*GetTransferResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTransferResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Transfer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUserListWithPaginationResponse parses an HTTP response from a GetUserListWithPaginationWithResponse call
func ParseGetUserListWithPaginationResponse(rsp *http.Response) (*GetUserListWithPaginationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserListWithPaginationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponseApiUserResourceSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostUserCreationDeferredTaskResponse parses an HTTP response from a PostUserCreationDeferredTaskWithResponse call
func ParsePostUserCreationDeferredTaskResponse(rsp *http.Response) (*PostUserCreationDeferredTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUserCreationDeferredTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest DeferredTaskUUID
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetUserDeferredTaskResourceResponse parses an HTTP response from a GetUserDeferredTaskResourceWithResponse call
func ParseGetUserDeferredTaskResourceResponse(rsp *http.Response) (*GetUserDeferredTaskResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserDeferredTaskResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserDeferredTask
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteUserResourceResponse parses an HTTP response from a DeleteUserResourceWithResponse call
func ParseDeleteUserResourceResponse(rsp *http.Response) (*DeleteUserResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUserResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUserResourceResponse parses an HTTP response from a GetUserResourceWithResponse call
func ParseGetUserResourceResponse(rsp *http.Response) (*GetUserResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchUserResourceResponse parses an HTTP response from a PatchUserResourceWithResponse call
func ParsePatchUserResourceResponse(rsp *http.Response) (*PatchUserResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchUserResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"3CcHGdE5fPnx5cf/FwAA//+IHjte/J8CAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
